<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[bubble sky]]></title>
  <subtitle><![CDATA[Coding world, changing world ^_^]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://codingbubble.github.io/"/>
  <updated>2015-09-22T06:49:04.123Z</updated>
  <id>http://codingbubble.github.io/</id>
  
  <author>
    <name><![CDATA[bubble]]></name>
    <email><![CDATA[codingbubble@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SimpleWord简词开发记录笔记]]></title>
    <link href="http://codingbubble.github.io/2015/08/06/SimpleWord-dev-log/"/>
    <id>http://codingbubble.github.io/2015/08/06/SimpleWord-dev-log/</id>
    <published>2015-08-06T07:06:40.000Z</published>
    <updated>2015-09-22T06:49:04.123Z</updated>
    <content type="html"><![CDATA[<p>之前开发“简算”的时候忘记记录了，有时间补上。。觉得养成记录的习惯比较好。。</p>
<p>2015-8-6 15:07:54</p>
<h1 id="1-词库">1.词库</h1><p>找不到词库，暂时找到一个带音标和释义的考研单词excel（估计是好几年前的大纲词汇），就先用这个吧。<br>excel不能显示音标的话，还得下载字体TOPhonetic.ttf。</p>
<h1 id="2-数据库">2.数据库</h1><p>1.excel导入SQLite<br>试了几个可视化工具，就SQLiyeStudio比较满意，也没有乱码。<br>开始时把excel另存为.csv文件，系统的分隔符是逗号，但是去控制面板改了，excel导出时还是逗号，不知道为什么，可能需要重启电脑吧，懒得重启。竟然忘记replace了！所以excel → 制表符分隔的txt → replace分隔符，就ok了^_^</p>
<ol>
<li><h1 id="3-优化">3.优化</h1><p>1.延迟切换fragment</p>
<p> public void switchContent(Fragment fragment) {</p>
<pre><code>contentFragment = fragment;
getFragmentManager<span class="literal">()</span>.beginTransaction<span class="literal">()</span>.replace(<span class="type">R</span>.id.content_frame, fragment).commit<span class="literal">()</span>;
</code></pre><p> //  sm.showContent();</p>
<pre><code><span class="type">Handler</span> h = <span class="keyword">new</span> <span class="type">Handler</span><span class="literal">()</span>;
h.postDelayed(<span class="keyword">new</span> <span class="type">Runnable</span><span class="literal">()</span> {
    public void run<span class="literal">()</span> {
        sm.showContent<span class="literal">()</span>;
    }
}, <span class="number">50</span>);
</code></pre><p> }</p>
</li>
</ol>
<p>2015-8-10 20:54:25</p>
<h1 id="1-单词本界面想做成卡片来滑动">1.单词本界面想做成卡片来滑动</h1><h2 id="1-RecyclerView">1.RecyclerView</h2><p>关于引入V7包：<a href="http://wp.aesean.com/?p=185" target="_blank" rel="external">http://wp.aesean.com/?p=185</a><br>2015-8-11 20:44:55</p>
<ol>
<li>继承RecyclerView.Adapter出现<em>The hierarchy of the type ViewHolder is inconsistent</em>，因为菜单用的SlidingMenu，support-v4包可能不是最新的，将SlidingMenu的libs下的v4包替换成最新的就可以了。</li>
<li><p><em>Call requires API level 21 (current min is 17): android.content.Context#getDrawable</em><br><a href="http://stackoverflow.com/questions/29041027/android-getresources-getdrawable-deprecated-api-22" target="_blank" rel="external">解决</a></p>
<p> ContextCompat.getDrawable(this, R.drawable.your_drawable)</p>
</li>
</ol>
<p>2015-8-12 </p>
<h1 id="在actionbar添加spinner下拉列表">在actionbar添加spinner下拉列表</h1><p>1.actionbar.xml</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  
<span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  
<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>  
<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>  
<span class="attribute">android:gravity</span>=<span class="value">"center_vertical"</span>  
<span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span> &gt;</span>  

    <span class="tag">&lt;<span class="title">TextView</span>  
        <span class="attribute">android:id</span>=<span class="value">"@+id/action_bar_title"</span>  
        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>  
        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>          
        <span class="attribute">android:text</span>=<span class="value">"下拉列表"</span> /&gt;</span>  

    <span class="comment">&lt;!-- 下拉列表  --&gt;</span>  
    <span class="tag">&lt;<span class="title">Spinner</span>  
        <span class="attribute">android:id</span>=<span class="value">"@+id/action_bar_spinner"</span>  
        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>  
        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>  
        &gt;</span>  
    <span class="tag">&lt;/<span class="title">Spinner</span>&gt;</span>  

<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span>  
</code></pre><p>2.在activity的onCreate()或fragment的onCreateView()中添加代码，初始化下拉列表数据</p>
<pre><code><span class="comment">//使自定义的普通View能在title栏显示，actionBar.setCustomView能起作用</span>
getActivity().getActionBar().setDisplayShowCustomEnabled(<span class="literal">true</span>); 
<span class="comment">//初始化下拉列表</span>
View actionbarLayout = view.inflate(activity,R.layout.actionbar, <span class="literal">null</span>);  
mActionbarSpinner = (Spinner) actionbarLayout.findViewById(R.id.actionbar_spinner);  

<span class="comment">//初始化下拉列表数据</span>
<span class="comment">//方法一  </span>
initSpinnerMethod1();  
<span class="comment">//方法二  </span>
<span class="comment">//initSpinnerMethod2();  </span>

<span class="comment">//事件监听  </span>
mActionbarSpinner.setOnItemSelectedListener(<span class="keyword">new</span> SpinnerItemSelectedListener());  

<span class="comment">//在Bar上显示定制view  </span>
actionBar.setCustomView(actionbarLayout); 
</code></pre><p>初始化下拉列表数据：<br>（1） 在strings.xml添加数组</p>
<pre><code>&lt;<span class="type">string</span>-array <span class="property">name</span>=<span class="string">"spinner_list"</span> &gt;  
&lt;<span class="property">item</span>&gt;item1&lt;/<span class="property">item</span>&gt;  
&lt;<span class="property">item</span>&gt;item2&lt;/<span class="property">item</span>&gt;  
&lt;<span class="property">item</span>&gt;item3&lt;/<span class="property">item</span>&gt;   
&lt;/<span class="type">string</span>-array&gt;  
</code></pre><p>代码：</p>
<pre><code><span class="keyword">private</span> void initSpinnerMethod1<span class="literal">()</span> {  
     <span class="type">String</span><span class="literal">[]</span> mItems = getResources<span class="literal">()</span>.getStringArray(<span class="type">R</span>.<span class="built_in">array</span>.spinner_list);  
     <span class="type">ArrayAdapter</span>&lt;<span class="type">String</span>&gt; spinnerAdapter = <span class="keyword">new</span> <span class="type">ArrayAdapter</span>&lt;<span class="type">String</span>&gt;(activity,android.<span class="type">R</span>.layout.simple_spinner_item, mItems);  
     spinnerAdapter.setDropDownViewResource(android.<span class="type">R</span>.layout.simple_spinner_dropdown_item);  
     mActionbarSpinner.setAdapter(spinnerAdapter);  
}  
</code></pre><p>（2）在代码中添加数组</p>
<pre><code><span class="keyword">private</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> getData(){          
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">data</span> <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>();  
    <span class="built_in">data</span><span class="built_in">.</span>add(<span class="string">"item1"</span>);  
    <span class="built_in">data</span><span class="built_in">.</span>add(<span class="string">"item2"</span>);  
    <span class="built_in">data</span><span class="built_in">.</span>add(<span class="string">"item3"</span>);          
    <span class="keyword">return</span> <span class="built_in">data</span>;  
}  

<span class="keyword">private</span> <span class="literal">void</span> initSpinnerMethod2()  {  
    mActionbarSpinner<span class="built_in">.</span>setAdapter(  
            <span class="literal">new</span> ArrayAdapter<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>(activity,   
                    android<span class="built_in">.</span>R<span class="built_in">.</span>layout<span class="built_in">.</span>simple_expandable_list_item_1,getData()));    
}  
</code></pre><p>3.监听action_bar的spinner的item选择事件</p>
<pre><code><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinnerItemSelectedListener</span> <span class="keyword">implements</span> <span class="title">OnItemSelectedListener</span> </span>{  

    <span class="annotation">@Override</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; arg0, View view, <span class="keyword">int</span> position,<span class="keyword">long</span> arg3)</span> </span>{  
         String str= arg0.getItemAtPosition(position).toString();  
         Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"你选择的是:"</span>+str, <span class="number">2000</span>).show();             
    }  

    <span class="annotation">@Override</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; arg0)</span> </span>{}  
}  
</code></pre><h1 id="同一个activity的不同fragment显示不同的actionbar">同一个activity的不同fragment显示不同的actionbar</h1><p>在单词本界面的actionbar想显示一个spinner下拉选择单词本（暂时未加入切换单词本的功能），在WordBookFragment的<code>onCreateView()</code>里设置自定义actionbar</p>
<pre><code>getActivity<span class="literal">()</span>.getActionBar<span class="literal">()</span>.setDisplayShowCustomEnabled(<span class="literal">true</span>);
</code></pre><p>别的fragment里设置</p>
<pre><code>getActivity<span class="literal">()</span>.getActionBar<span class="literal">()</span>.setDisplayShowCustomEnabled(<span class="literal">false</span>);
</code></pre><p>或者加载另外的view。</p>
<h1 id="不同fragment的标题">不同fragment的标题</h1><p>分别在<code>onCreateView()</code>里设置</p>
<pre><code>getActivity<span class="comment">()</span>.setTitle<span class="comment">("标题")</span>;
</code></pre><p>若写成</p>
<pre><code>getActivity<span class="literal">()</span>.getActionBar<span class="literal">()</span>.setTitle(<span class="string">"标题"</span>);    
</code></pre><p>会将所有fragment设置成同一标题</p>
<h1 id="在fragment里获取actionbar">在fragment里获取actionbar</h1><p><em>cannot convert from android.support.v7.app.ActionBar to android.app.ActionBar</em></p>
<pre><code><span class="attribute">ActionBar actionBar </span>=<span class="string"> getActivity.getActionBar();</span>
</code></pre><p>使用quick fix：</p>
<pre><code>android.<span class="keyword">app</span>.ActionBar actionBar;  
</code></pre><p>2015-8-18</p>
<h1 id="控件左右对齐">控件左右对齐</h1><p>使用<code>RelativeLayout</code></p>
<pre><code><span class="label">android:</span>layout_alignParentRight=<span class="string">"true"</span>
</code></pre><p>2015-8-19</p>
<h1 id="判断程序是否首次运行">判断程序是否首次运行</h1><p>使用<code>SharedPreferences</code>，在<code>onCreate()</code>里：</p>
<pre><code>SharedPreferences preferences;  
Editor <span class="keyword">editor</span>;  
<span class="keyword">if</span> (preferences.getBoolean(<span class="string">"firststart"</span>, true)) {  <span class="comment">//获取boolean值，可为缺省值，若缺省，则返回参数二的值</span>
    <span class="keyword">editor</span> = preferences.edit();  
    <span class="keyword">editor</span>.putBoolean(<span class="string">"firststart"</span>, false);  <span class="comment">//若是首次，则改为false</span>
    <span class="keyword">editor</span>.commit();  <span class="comment">//提交</span>
}  
</code></pre><p>2015-8-20</p>
<h1 id="状态栏通知">状态栏通知</h1><h2 id="可删除">可删除</h2><pre><code>NotificationCompat.Builder mBuilder =
    <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)
    .setSmallIcon(R.drawable.notification_icon)
    .setContentTitle(<span class="string">"My notification"</span>)
    .setContentText(<span class="string">"Hello World!"</span>);
<span class="comment">// Creates an explicit intent for an Activity in your app</span>
Intent resultIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity.<span class="keyword">class</span>);
<span class="comment">// The stack builder object will contain an artificial back stack for the</span>
<span class="comment">// started Activity.</span>
<span class="comment">// This ensures that navigating backward from the Activity leads out of</span>
<span class="comment">// your application to the Home screen.</span>
TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class="keyword">this</span>);
<span class="comment">// Adds the back stack for the Intent (but not the Intent itself)</span>
stackBuilder.addParentStack(ResultActivity.<span class="keyword">class</span>);
<span class="comment">// Adds the Intent that starts the Activity to the top of the stack</span>
stackBuilder.addNextIntent(resultIntent);
PendingIntent resultPendingIntent =
        stackBuilder.getPendingIntent(
            <span class="number">0</span>,
            PendingIntent.FLAG_UPDATE_CURRENT
        );
mBuilder.setContentIntent(resultPendingIntent);
NotificationManager mNotificationManager =
    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
<span class="comment">// mId allows you to update the notification later on.</span>
mNotificationManager.notify(mId, mBuilder.build());
</code></pre><h2 id="常驻状态栏（显示在“进行中/ongoing”）">常驻状态栏（显示在“进行中/ongoing”）</h2><h3 id="Notification">Notification</h3><ul>
<li><p>低于API 11</p>
<p>  notification.flags |= Notification.FLAG_NO_CLEAR;</p>
</li>
<li><p>高于API 11 或者 使用Android Support Library</p>
<p>  //获取状态通知栏管理<br>  NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);<br>  //实例化通知栏构造器<br>  NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);<br>  mBuilder.setSmallIcon(R.drawable.ic_launcher);//设置通知小图标</p>
<pre><code>.<span class="function"><span class="title">setContentTitle</span><span class="params">(<span class="string">"标题"</span>)</span></span>  <span class="comment">//设置通知栏标题</span>
.<span class="function"><span class="title">setContentText</span><span class="params">(<span class="string">"内容"</span>)</span></span>   <span class="comment">//设置通知栏显示内容</span>
.<span class="function"><span class="title">setContentIntent</span><span class="params">(getDefalutIntent(Notification.FLAG_AUTO_CANCEL)</span></span>) <span class="comment">//设置通知栏点击意图</span>
.<span class="function"><span class="title">setNumber</span><span class="params">(number)</span></span> <span class="comment">//设置通知集合的数量</span>
.<span class="function"><span class="title">setTicker</span><span class="params">(<span class="string">"通知来啦"</span>)</span></span> <span class="comment">//通知首次出现在通知栏，带上升动画效果的</span>
.<span class="function"><span class="title">setWhen</span><span class="params">(System.currentTimeMillis()</span></span>)<span class="comment">//通知产生的时间，会在通知信息里显示，一般是系统获取到的时间</span>
.<span class="function"><span class="title">setPriority</span><span class="params">(Notification.PRIORITY_DEFAULT)</span></span> <span class="comment">//设置该通知优先级</span>
.<span class="function"><span class="title">setAutoCancel</span><span class="params">(true)</span></span><span class="comment">//设置这个标志当用户单击面板就可以让通知将自动取消  </span>
.<span class="function"><span class="title">setOngoing</span><span class="params">(false)</span></span><span class="comment">//ture，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)</span>
.<span class="function"><span class="title">setDefaults</span><span class="params">(Notification.DEFAULT_VIBRATE)</span></span><span class="comment">//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合</span>
</code></pre><p>  //Notification.DEFAULT_ALL  Notification.DEFAULT_SOUND 添加声音 // requires VIBRATE permission</p>
</li>
</ul>
<h3 id="service前台服务">service前台服务</h3><p>在service里</p>
<pre><code>startForeground<span class="list">(<span class="keyword">mID</span>, notification)</span><span class="comment">;     //设置前台服务</span>
</code></pre><h1 id="关于服务service">关于服务service</h1><ul>
<li>启动service的时候，<code>onCreate</code>方法只有第一次会调用，<code>onStartCommand</code>和<code>onStart</code>（已被淘汰）每次都被调用。<code>onStartCommand</code>会告诉系统如何重启服务，如判断是否异常终止后重新启动，在何种情况下异常终止。</li>
<li>2.0 API level之后，实现onStart等同于重写onStartCommand并返回START_STICKY 。</li>
<li>2.0 API level之后，onStart()方法被onStartCommand()取代了。</li>
<li><p>必须在AndroidManifest.xml中注册</p>
  <service android:name="完整包名.ServiceNotification">

</service></li>
</ul>
<h2 id="启动服务">启动服务</h2><pre><code>mContext.startService(<span class="type">intent</span>);
</code></pre><h2 id="关闭服务">关闭服务</h2><pre><code>mContext.stopService(<span class="type">intent</span>);
</code></pre><h1 id="保存、恢复spinner的选中项">保存、恢复spinner的选中项</h1><h2 id="保存">保存</h2><p>在<code>onItemSelected()</code>中</p>
<pre><code><span class="built_in">int</span> userChoice = spinner.getSelectedItemPosition<span class="literal">()</span>;
<span class="type">SharedPreferences</span> sharedPref = getSharedPreferences(<span class="string">"FileName"</span>,<span class="number">0</span>);
<span class="type">SharedPreferences</span>.<span class="type">Editor</span> prefEditor = sharedPref.edit<span class="literal">()</span>;
prefEditor.putInt(<span class="string">"userChoiceSpinner"</span>,usersChoice);
prefEditor.commit<span class="literal">()</span>;
</code></pre><h2 id="恢复">恢复</h2><pre><code>SharedPreferences <span class="variable">sharedPref =</span> getSharedPreferences(<span class="string">"FileName"</span>,MODE_PRIVATE);
int <span class="variable">spinnerValue =</span> sharedPref.getInt<span class="string">"userChoiceSpinner"</span>,-<span class="number">1</span>);
<span class="keyword">if</span>(spinnerValue != -<span class="number">1</span>) 
    spinner.setSelection(spinnerValue);
</code></pre><h1 id="关于Activity生命周期该做的事情">关于Activity生命周期该做的事情</h1><h2 id="onCreate()">onCreate()</h2><ul>
<li>使用<code>onCreate()</code>初始化你的Activity：创建UI、为类的变量分配引用、绑定数据到控件、创建Service和线程。</li>
<li>为避免快速的创建和销毁对象引发额外的垃圾回收，如果你的应用程序正常创建一套对象，建议它们在<code>onCreate()</code>中创建，因为在Activity的生命周期中它只被调用一次。</li>
<li><code>onCreate()</code>里面尽量少做事情，避免程序启动太久都看不到界面。</li>
</ul>
<h2 id="onResume()">onResume()</h2><p>当从<code>Paused</code>状态恢复activity时，系统会调用<code>onResume()</code>方法。<br>系统每次调用<code>onResume()</code>时，activity都处于前台，包括第一次创建的时候。所以，应该实现<code>onResume()</code>来初始化那些在<code>onPause</code>方法里面释放掉的组件，并执行那些activity每次进入<code>Resumed state</code>都需要的初始化动作 (例如开始动画与初始化那些只有在获取用户焦点时才需要的组件)</p>
<h2 id="onPause()">onPause()</h2><ul>
<li>不应使用<code>onPause()</code>来保存用户改变的数据 (例如填入表格中的个人信息) 到永久存储(File或者DB)上。仅仅当确认用户期待那些改变能够被自动保存的时候(例如正在撰写邮件草稿)，才把那些数据存到永久存储 。</li>
<li>避免在<code>onPause()</code>时执行CPU-intensive 的工作，例如写数据到DB，因为它会导致切换到下一个activity变得缓慢(应该把那些heavy-load的工作放到onStop()去做)。</li>
<li>如果activity实际上是要被Stop，为了切换的顺畅应减少在OnPause()方法里面的工作量。</li>
<li>停止动画或者是其他正在运行的操作，那些都会导致CPU的浪费.</li>
<li>提交在用户离开时期待保存的内容(例如邮件草稿).</li>
<li>释放系统资源，例如broadcast receivers, sensors (比如GPS), 或者是其他任何会影响到电量的资源。</li>
</ul>
<h2 id="onStop()">onStop()</h2><ul>
<li>当activity调用<code>onStop()</code>方法, activity不再可见，并且应该释放那些不再需要的所有资源。一旦activity停止了，系统会在需要内存空间时摧毁它的实例。极端情况下，系统会直接杀死我们的app进程，并不执行activity的<code>onDestroy()</code>回调方法, 因此我们需要使用<code>onStop()</code>来释放资源，从而避免内存泄漏。<br>所以我们应该使用<code>onStop()</code>来执行那些耗时的释放资源的操作，例如往数据库写信息。<br>-无论什么原因导致activity停止，系统总是会在<code>onStop()</code>之前调用<code>onPause()</code>方法。</li>
</ul>
<h2 id="onDestroy()">onDestroy()</h2><p>大多数app并不需要实现这个方法，因为局部类的references会随着activity的销毁而销毁，并且我们的activity应该在<code>onPause()</code>与<code>onStop()</code>中执行清除activity资源的操作。然而，如果activity含有在onCreate调用时创建的后台线程，或者是其他有可能导致内存泄漏的资源，则应该在<code>OnDestroy()</code>时进行资源清理，杀死后台线程。</p>
<p>除非程序在<code>onCreate()</code>方法里面就调用了<code>finish()</code>方法，系统通常是在执行了<code>onPause()</code>与<code>onStop()</code>之后再调用<code>onDestroy()</code>。在某些情况下，例如我们的activity只是做了一个临时的逻辑跳转的功能，它只是用来决定跳转到哪一个activity，这样的话，需要在onCreate里面调用<code>finish</code>方法，这样系统会直接调用<code>onDestory</code>，跳过生命周期中的其他方法。</p>
<h2 id="与Activity生命周期结合的应用场景">与Activity生命周期结合的应用场景</h2><ul>
<li>与广播(Broadcast)结合<br>在<code>onResume</code>注册广播(registerLinstener)，在<code>onPause</code>注销广播(unregisterLinstener)。<br>例如：做”摇一摇”功能（传感器）、监听网络变化，就可以在onResume中注册监听，在onPause里注销掉，已节省资源提高效率。</li>
<li>与服务(Service)结合<br>在<code>onStartCommand</code>绑定服务(bindService)，在<code>onStop</code>中取消绑定(unbindService)。<br>例如：需要通过Service定时更新UI上的数据，而Activity的可见周期在<code>onStart</code>与<code>onStop</code>之间，那么就可以再<code>onStart</code>时启动服务，在<code>onStop</code>时停止服务。为了节约系统资源，除了提高用户体验以外，开发人员应尽可能的优化程序。</li>
<li>与Cursor结合<br>使用<code>managedQuery让Activity</code>帮你管理<code>Cursor</code>的生命周期，不用自己去close。</li>
<li>释放资源<br>可以在<code>onDestory</code>中释放一些资源。比如可以在<code>onDestory</code>时调用MediaPlayer的release。</li>
</ul>
<h1 id="AlarmManager定时启动Service">AlarmManager定时启动Service</h1><pre><code><span class="keyword">private</span> <span class="keyword">static</span> AlarmManager am;
<span class="keyword">private</span> <span class="keyword">static</span> PendingIntent pendingIntent;
<span class="comment">/**
 * 使用 AlarmManager 来 定时启动服务
 */</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startPendingIntent</span><span class="params">(Context context)</span> </span>{
    am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
    Intent intent = <span class="keyword">new</span> Intent(context, MyService.class);<span class="comment">//启动示例Service</span>
    pendingIntent = PendingIntent.getService(context, <span class="number">0</span>, intent, <span class="number">0</span>);
    <span class="keyword">long</span> interval = DateUtils.MINUTE_IN_MILLIS * <span class="number">30</span>;<span class="comment">// 30分钟一次</span>
    <span class="keyword">long</span> firstWake = System.currentTimeMillis() + interval;
    am.setRepeating(AlarmManager.RTC, firstWake, interval, pendingIntent);
}
<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stopPendingIntent</span><span class="params">()</span> </span>{
    <span class="keyword">if</span> (pendingIntent != <span class="keyword">null</span>) {
        <span class="keyword">if</span> ( am == <span class="keyword">null</span>) {
            am = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
        }
        am.cancel(pendingIntent);
        pendingIntent.cancel();
    }
};
</code></pre><p>参考：<a href="http://www.cnblogs.com/code4app/p/3688115.html" target="_blank" rel="external">android 使用AlarmManager定时启动service</a></p>
<h2 id="Timer与AlarmManager的区别">Timer与AlarmManager的区别</h2><p>通过调用Thread类的<code>start()</code>方法来启动一个线程，这时此线程处于就绪（可运行）状态，但此时并没有运行，它需要<code>CPU时间片</code>。一旦得到CPU时间片，就会执行<code>run()</code>方法。<code>run()</code>的方法体称为<code>线程体</code>，它包含了要执行的这个线程的内容，<code>run()</code>方法运行结束，此线程也随即终止。</p>
<p>Android 平台上常用的定时器主要有两个：</p>
<ul>
<li>Java的Timer</li>
<li>Android的AlarmManager</li>
</ul>
<h3 id="Timer">Timer</h3><p>Java的<code>Timer</code>类可以用来计划需要<strong>循环执行</strong>的任务。</p>
<p>简单的说，一个<code>Timer</code>内部封装装了“一个<code>Thread</code>”和“一个<code>TimerTask</code>队列”，这个队列按照一定的方式将任务排队处理。封装的<code>Thread</code>在<code>Timer</code>的构造方法调用时被启动，这个<code>Thread</code>的<code>run</code>方法按照条件去循环这个<code>TimerTask</code>队列，然后调用<code>TimerTask</code>的<code>run</code>方法。</p>
<p>但是，如果CPU进入了休眠状态，那么这个thread将会因为失去CPU时间片而阻塞，从而造成我们需要的<strong>定时任务失效</strong>。上述定时任务失效的场景分析：假设定时任务的条件是到了时间xx:yy才能执行，但由于cpu休眠造成线程阻塞的关系，当前系统时间超过了这个时间，即便CPU从终端中恢复了，那么由于条件不满足，定时任务在这一次自然就失效了。</p>
<p>解决方案：它需要用<code>WakeLock</code>让CPU保持唤醒状态。但这样会大量消耗手机电量，大大减短手机待机时间。这种方式不能满足我们的需求。</p>
<p>注：<code>TimerTask</code>实现<code>Runnable</code>接口，但它的<code>run</code>方法只是简单的在<code>Timer</code>中封装的<code>Thread</code>中被调用，并未将其放在其它线程中执行。也就是说<code>timer</code>是<strong>单线程</strong>执行的，那么问题来了，为何要这么费劲的封装一个Runnable接口又不进行多线程调用？</p>
<h3 id="AlarmManager">AlarmManager</h3><p><code>AlarmManager</code>是Android 系统封装的用于<code>管理RTC</code>的模块，<code>RTC(Real Time Clock)</code>是一个独立的硬件时钟，可以在 CPU休眠时正常运行，在预设的时间到达时，通过中断唤醒CPU。这意味着，如果我们用 <code>AlarmManager</code>来定时执行任务，CPU 可以正常的休眠，只有在需要运行任务时醒来一段很短的时间。</p>
<p>参考：<a href="http://blog.csdn.net/xplee0576/article/details/37928251" target="_blank" rel="external">Timer与AlarmManager的区别</a></p>
<h1 id="Switch开关">Switch开关</h1><pre><code><span class="keyword">Switch</span> mSwitch = (<span class="keyword">Switch</span>)view.findViewById(R.id.setting_switch_notification_word); 
    mSwitch.setOnCheckedChangeListener(<span class="keyword">new</span> OnCheckedChangeListener(){

        <span class="keyword">public</span> <span class="keyword">void</span> onCheckedChanged(CompoundButton buttonView,<span class="keyword">boolean</span> isChecked) {
            <span class="keyword">if</span> (isChecked) {    
                <span class="comment">// switch on，开启通知栏单词</span>
                intentNotiService = <span class="keyword">new</span> Intent(mContext, ServiceNotification.<span class="keyword">class</span>);
                pendingIntentNotiService = PendingIntent.getService(mContext, <span class="number">0</span>, intentNotiService, <span class="number">0</span>);
                minute = <span class="number">1</span>;
                startPendingIntent(pendingIntentNotiService);
            } <span class="keyword">else</span> {
                <span class="comment">//switch off，关闭通知栏单词</span>
                stopPendingIntent(pendingIntentNotiService);
            }
        }
    });
</code></pre><p>2015-8-21</p>
<h1 id="解决定时启动通知服务时pop_up无效">解决定时启动通知服务时pop up无效</h1><p>在Service的<code>onStartCommand()</code>里更新每次Notification需要更新的内容，如单词信息。无需改动的信息在<code>onCreate()</code>里初始化。</p>
<ul>
<li><p>原代码：</p>
<p>  @Override<br>  public int onStartCommand(Intent intent, int flags, int startId) {</p>
<pre><code>mBuilder
    .<span class="built_in">set</span>ContentText(WordsDB.wordClass.<span class="keyword">to</span>String())   //测试用的单词信息
    .<span class="built_in">set</span>When(System.currentTimeMillis())    //更新的时间
    .<span class="built_in">set</span>Ticker(WordsDB.wordClass.<span class="keyword">to</span>String());   //在通知栏动画向上弹出
startForeground(notifyID, mBuilder.build());    //display <span class="keyword">in</span> <span class="string">"ongoing"</span>
Log.d(<span class="string">"通知栏单词"</span>, WordsDB.wordClass.<span class="keyword">to</span>String());
return super.<span class="keyword">on</span>StartCommand(intent, <span class="keyword">flags</span>, startId);
</code></pre><p>  }<br>按钮点击时会更新notification，也会在通知栏弹出提示。<br>但使用<code>AlarmManager</code>定时启动该service时，会更新内容，但不会在通知栏弹出提示，只能自己打开通知栏才能查看到更新。</p>
</li>
<li><p>改动：使用<code>NotificationManager.notify()</code></p>
<p>  @Override<br>  public int onStartCommand(Intent intent, int flags, int startId) {</p>
<pre><code>mBuilder
    .<span class="built_in">set</span>ContentText(WordsDB.wordClass.<span class="keyword">to</span>String())
    .<span class="built_in">set</span>When(System.currentTimeMillis())
    .<span class="built_in">set</span>Ticker(WordsDB.wordClass.<span class="keyword">to</span>String());   //popup <span class="keyword">in</span> Status Bar
mNotificationManager.notify(notifyID, notification);    //update data
startForeground(notifyID, mBuilder.build());    //display <span class="keyword">in</span> <span class="string">"ongoing"</span>
Log.d(<span class="string">"通知栏单词"</span>, WordsDB.wordClass.<span class="keyword">to</span>String());
return super.<span class="keyword">on</span>StartCommand(intent, <span class="keyword">flags</span>, startId);
</code></pre><p>  }</p>
</li>
</ul>
<p><code>notify</code>必须在<code>startForeground</code>前面，先更新通知的内容，再显示在前台。<br><code>notifyID</code>需一致。</p>
<p>参考：<a href="http://stackoverflow.com/questions/5528288/how-do-i-update-the-notification-text-for-a-foreground-service-in-android" target="_blank" rel="external">How do I update the notification text for a foreground service in Android?</a></p>
<p>2015-8-22</p>
<h1 id="输入自定义更新时间间隔">输入自定义更新时间间隔</h1><p>用了3个EditText，分别输入小时、分钟、秒，默认30秒更新一次，即00:00:30<br>获取焦点时自动清空EditText，失去焦点时若未输入任何内容，则回到默认值</p>
<h2 id="关于离开EditText时无法失焦（触摸EditText外的位置）">关于离开EditText时无法失焦（触摸EditText外的位置）</h2><p>在其parent view设置xml属性：</p>
<pre><code><span class="label">android:</span>clickable=<span class="string">"true"</span>
<span class="label">android:</span>focusable=<span class="string">"true"</span>
<span class="label">android:</span>focusableInTouchMode=<span class="string">"true"</span>
</code></pre><h1 id="隐藏软键盘keyboard">隐藏软键盘keyboard</h1><p>1.在parent view设置</p>
<pre><code><span class="label">android:</span>clickable=<span class="string">"true"</span> 
<span class="label">android:</span>focusableInTouchMode=<span class="string">"true"</span> 
</code></pre><p>2.hideKeyboard() method</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">hideKeyboard</span><span class="params">(View view)</span> </span>{
    InputMethodManager inputMethodManager =(InputMethodManager)getSystemService(Activity.INPUT_METHOD_SERVICE);
    inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), <span class="number">0</span>);
}
</code></pre><p>参考：<a href="http://stackoverflow.com/questions/4165414/how-to-hide-soft-keyboard-on-android-after-clicking-outside-edittext" target="_blank" rel="external">how to hide soft keyboard on android after clicking outside EditText?</a></p>
<p>2015-8-28</p>
<h1 id="改进：通过广播Broadcast启动服务service">改进：通过广播Broadcast启动服务service</h1><h2 id="Broadcast静态registerReceiver与动态注册的区别">Broadcast静态registerReceiver与动态<receiver>注册的区别</receiver></h2><p>1.动态注册的广播永远要快于静态注册的广播,不管静态注册的优先级设置的多高,不管动态注册的优先级有多低</p>
<p>2.动态注册广播不是常驻型广播，也就是说广播跟随activity的生命周期。<br>注意: 在activity结束前，移除广播接收器。</p>
<p>静态注册是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。</p>
<p>3.在同一个优先级下,谁先启动的快,谁将先接收到广播。</p>
<p>动态注册代码:</p>
<pre><code>MyBroadcastReceiver  broadcast= new MyBroadcastReceiver<span class="list">()</span><span class="comment">;</span>
IntentFilter filter = new IntentFilter<span class="list">(<span class="string">"action_name"</span>)</span><span class="comment">;</span>
registerReceiver<span class="list">(<span class="keyword">broadcast</span>, filter)</span><span class="comment">;</span>
</code></pre><p>静态注册代码(在Manifest.xml中添加):</p>
<pre><code><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">"com.example.MyReceiver"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span>
        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"action_name"</span> /&gt;</span> //可自定义action_name
    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">receiver</span>&gt;</span>
</code></pre><p>2015-8-29</p>
<h1 id="Slidingmenu的bug">Slidingmenu的bug</h1><p>在设置如下时</p>
<pre><code>sm.<span class="built_in">set</span>TouchModeAbove(SlidingMenu.TOUCHMODE_FULLSCREEN);
sm.<span class="built_in">set</span>TouchModeBehind(SlidingMenu.TOUCHMODE_FULLSCREEN);
</code></pre><p>1.菜单里的listview无法点击，解决：<br>在Slidingmenu_lib里，</p>
<ul>
<li>修改<code>CustomViewAbove.java</code>，将<code>onInterceptTouchEvent()</code>和<code>onTouchEvent()</code>的<code>case MotionEvent.ACTION_DOWN:</code>的<code>break;</code>改为<code>return mQuickReturn;</code><br>去掉<code>initCustomViewAbove()</code>里的<code>setInternalPageChangeListener()</code></li>
<li>修改<code>CustomViewBehind.java</code>，将<code>onInterceptTouchEvent()</code>和<code>onTouchEvent()</code>的<code>return</code>分别改为<code>return mViewAbove.onInterceptTouchEvent(e);</code>和<code>return mViewAbove.onTouchEvent(e);</code></li>
</ul>
<p>2.上述步骤后，若aboveview无法滑动，则在aboveview的root layout里添加<code>android:clickable=&quot;true&quot;</code></p>
<p>参考：<a href="https://github.com/jfeinstein10/SlidingMenu/issues/446#issuecomment-133709634" target="_blank" rel="external">All touch events are consumed by CustomViewAbove #446</a></p>
<p>2015-8-31</p>
<h1 id="悬浮窗单词">悬浮窗单词</h1><p>参考教程：<a href="http://blog.csdn.net/guolin_blog/article/details/8689140" target="_blank" rel="external">Android桌面悬浮窗效果实现，仿360手机卫士悬浮窗效果</a></p>
<h2 id="基本步骤">基本步骤</h2><p>1.在Manifest.xml声明权限</p>
<pre><code><span class="comment">&lt;!-- 显示顶层浮窗 --&gt;</span>
<span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;</span>
</code></pre><p>注意：在MIUI上需要在设置中打开本应用的“显示悬浮窗”开关，并且重启应用，否则悬浮窗只能显示在本应用界面内，不能显示在手机桌面上。<br>2.获取WindowManager</p>
<pre><code><span class="comment">// 获取应用的Context</span>
<span class="constant">Context mContext</span> = context.getApplicationContext();
<span class="comment">// 获取WindowManager</span>
<span class="constant">WindowManager mWindowManager</span> = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
</code></pre><p>3.获取layout</p>
<pre><code>LayoutInflater.<span class="keyword">from</span>(mContext).inflate(R.layout.float_window, this);  
View view = findViewById(R.<span class="property">id</span>.window_layout);  
</code></pre><p>4.参数设置</p>
<pre><code><span class="variable">smallWindowParams =</span> new LayoutParams();  
//LayoutParams.TYPE_PHONE: 全屏区域显示(不含状态栏)
//LayoutParams.TYPE_SYSTEM_ALERT: 全屏区域显示(包含状态栏区域,被状态栏覆盖)
//LayoutParams.TYPE_SYSTEM_ERROR: 全屏区域显示(包含状态栏区域，覆盖在状态栏上)
smallWindowParams.<span class="variable">type =</span> LayoutParams.TYPE_SYSTEM_ERROR;  
//设置图片格式：背景透明
smallWindowParams.<span class="variable">format =</span> PixelFormat.RGBA_8888;  
//FLAG_LAYOUT_IN_SCREEN：可在状态栏上显示
smallWindowParams.<span class="variable">flags =</span>  LayoutParams.FLAG_NOT_TOUCH_MODAL | LayoutParams.FLAG_NOT_FOCUSABLE | LayoutParams.FLAG_LAYOUT_IN_SCREEN;  
smallWindowParams.<span class="variable">gravity =</span> Gravity.LEFT | Gravity.TOP;  
smallWindowParams.<span class="variable">width =</span> ViewSmallFloatWindow.viewWidth;  
smallWindowParams.<span class="variable">height =</span> ViewSmallFloatWindow.viewHeight;  
smallWindowParams.<span class="variable">x =</span> <span class="number">0</span>;  
smallWindowParams.<span class="variable">y =</span> Util.getStatusBarHeight(context);  
</code></pre><h2 id="让悬浮窗显示在状态栏上层">让悬浮窗显示在状态栏上层</h2><pre><code>LayoutParams.TYPE_SYSTEM_ERROR <span class="comment">//在全屏区域显示（可在状态栏显示，覆盖状态栏）</span>
LayoutParams.FLAG_NOT_TOUCH_MODAL <span class="string">| LayoutParams.FLAG_NOT_FOCUSABLE | LayoutParams.FLAG_LAYOUT_IN_SCREEN;</span>
</code></pre><p>注：</p>
<ul>
<li>这样设置下拉通知栏也会显示在悬浮窗下层。</li>
<li><code>FLAG_NOT_TOUCH_MODAL</code>和<code>FLAG_NOT_FOCUSABLE</code>任选其一都可以，若只设置<code>FLAG_LAYOUT_IN_SCREEN</code>会导致悬浮窗的焦点变成全屏（悬浮窗外无法操作）。<code>smallWindowParams.flags =  LayoutParams.FLAG_NOT_TOUCH_MODAL | LayoutParams.FLAG_NOT_FOCUSABLE | LayoutParams.FLAG_LAYOUT_IN_SCREEN | LayoutParams.FLAG_LAYOUT_INSET_DECOR | LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;</code>也可以。</li>
</ul>
<h2 id="WindowManager">WindowManager</h2><ul>
<li><code>addView</code>：添加一个悬浮窗，</li>
<li><code>updateViewLayout</code>：更新悬浮窗的参数，</li>
<li><code>removeView</code>：移除悬浮窗。</li>
</ul>
<p><code>WindowManager.LayoutParams</code>这个类用于提供悬浮窗所需的参数，其中有几个经常会用到的变量：</p>
<ul>
<li><p><code>type</code>：确定悬浮窗的类型，一般设为2002，表示在所有应用程序之上，但在状态栏之下。</p>
</li>
<li><p><code>flags</code>：确定悬浮窗的行为，比如说不可聚焦，非模态对话框等等，属性非常多，大家可以查看文档。</p>
</li>
<li><p><code>gravity</code>：确定悬浮窗的对齐方式，一般设为左上角对齐，这样当拖动悬浮窗的时候方便计算坐标。</p>
</li>
<li><p><code>x</code>：确定悬浮窗的位置，如果要横向移动悬浮窗，就需要改变这个值。</p>
</li>
<li><p><code>y</code>：确定悬浮窗的位置，如果要纵向移动悬浮窗，就需要改变这个值。</p>
</li>
<li><p><code>width</code>：指定悬浮窗的宽度。</p>
</li>
<li><p><code>height</code>：指定悬浮窗的高度。</p>
</li>
</ul>
<h2 id="获取屏幕宽度和高度">获取屏幕宽度和高度</h2><p>Display中getHeight()和getWidth()被废弃</p>
<pre><code><span class="type">Display</span> dp=getWindowManager().getDefaultDisplay();
<span class="type">int</span> <span class="type">Height</span>=dp.getHeight();  ----&gt;<span class="type">The</span> <span class="keyword">method</span> getHeight() <span class="keyword">from</span> the <span class="keyword">type</span> <span class="type">Display</span> <span class="keyword">is</span> deprecated
<span class="type">int</span> <span class="type">Width</span>=dp.getWidth();    ----&gt;<span class="type">The</span> <span class="keyword">method</span> getWidth() <span class="keyword">from</span> the <span class="keyword">type</span> <span class="type">Display</span> <span class="keyword">is</span> deprecated
</code></pre><p>替代的方法：</p>
<pre><code><span class="comment">//WindowManager wm = this.getWindowManager();</span>
<span class="constant">WindowManager wm</span> = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);

<span class="comment">//DisplayMetrics dm = new DisplayMetrics();</span>
<span class="comment">//wm.getDefaultDisplay().getMetrics(dm);</span>
<span class="constant">DisplayMetrics dm</span> = Resources.getSystem().getDisplayMetrics();
<span class="constant">
SCREEN_WIDTH</span> = dm.widthPixels;
<span class="constant">SCREEN_HEIGHT</span> = dm.heightPixels;
</code></pre><p>解析heightPixels和widthPixels：</p>
<pre><code><span class="keyword">public</span> <span class="built_in">int</span>     heightPixels    The absolute <span class="variable">height</span> of the display in <span class="variable">pixels</span>.
<span class="keyword">public</span> <span class="built_in">int</span>     widthPixels     The absolute <span class="variable">width</span> of the display in <span class="variable">pixels</span>.
</code></pre><p>参考：<br>1.<a href="http://www.cnblogs.com/lyyh-victory/p/3760014.html" target="_blank" rel="external">Display中getHeight()和getWidth() 官方废弃</a><br>2.<a href="http://stackoverflow.com/questions/8632970/how-to-get-screen-metrics-outside-an-activity" target="_blank" rel="external">How to get Screen metrics outside an Activity?</a></p>
<h2 id="点击手机“返回键”，移除悬浮窗">点击手机“返回键”，移除悬浮窗</h2><p>在悬浮窗的view类里添加</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>{ 
    <span class="keyword">switch</span> (event.getKeyCode()) {
    <span class="keyword">case</span> KeyEvent.KEYCODE_BACK:
        MyWindowManager.removeBigWindow(getContext());
    <span class="comment">//  MyWindowManager.createSmallWindow(getContext());</span>
        <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">default</span>:
        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event); 
    }
}
</code></pre><h2 id="触摸悬浮窗外部区域，移除悬浮窗">触摸悬浮窗外部区域，移除悬浮窗</h2><p>在悬浮窗的view类里添加</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>{
    <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();
    <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();
    Rect rect = <span class="keyword">new</span> Rect();
    <span class="comment">//getGlobalVisibleRect方法的作用是获取视图在屏幕坐标中的可视区域;</span>
    <span class="comment">//getLocalVisibleRect的作用是获取视图本身可见的坐标区域，坐标以自己的左上角为原点（0，0）</span>
    <span class="keyword">this</span>.getGlobalVisibleRect(rect);
    <span class="keyword">if</span> ( ! rect.contains(x, y) ) {
        MyWindowManager.removeBigWindow(getContext());
    <span class="comment">//  MyWindowManager.createSmallWindow(getContext());</span>
    }
    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(event)</span></span>;
}
</code></pre><p>参考：</p>
<ol>
<li><a href="http://www.cnblogs.com/mengdd/p/3824782.html" target="_blank" rel="external">Android悬浮窗实现 使用WindowManager</a></li>
<li><a href="http://www.cnblogs.com/ai-developers/p/4413585.html" target="_blank" rel="external">getGlobalVisibleRect和getLocalVisibleRect</a></li>
</ol>
<h2 id="获取状态栏高度">获取状态栏高度</h2><pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Context context)</span> </span>{  
    <span class="keyword">if</span> (statusBarHeight == <span class="number">0</span>) {  
        <span class="keyword">try</span> {  
            Class&lt;?&gt; c = Class.forName(<span class="string">"com.android.internal.R$dimen"</span>);  
            Object o = c.newInstance();  
            Field field = c.getField(<span class="string">"status_bar_height"</span>);  
            <span class="keyword">int</span> x = (Integer) field.<span class="keyword">get</span>(o);  
            statusBarHeight = context.getResources().getDimensionPixelSize(x);  
        } <span class="keyword">catch</span> (Exception e) {  
            e.printStackTrace();  
        }  
    }  
    <span class="keyword">return</span> statusBarHeight;  
}
</code></pre><p>参考：<a href="http://blog.csdn.net/guolin_blog/article/details/8689140" target="_blank" rel="external">Android桌面悬浮窗效果实现，仿360手机卫士悬浮窗效果</a></p>
<h2 id="TextView横向自动滚动实现跑马灯效果">TextView横向自动滚动实现跑马灯效果</h2><p>1.原生android自带的跑马灯效果，直接配置TextView属性</p>
<pre><code><span class="label">android:</span>singleLine=<span class="string">"true"</span>  
<span class="label">android:</span>ellipsize=<span class="string">"marquee"</span> 
<span class="label">android:</span>focusable=<span class="string">"true"</span>  
<span class="label">android:</span>focusableInTouchMode=<span class="string">"true"</span> 
<span class="label">android:</span>marqueeRepeatLimit=<span class="string">"marquee_forever"</span>   
</code></pre><ul>
<li>android:singleLine=true 表示使用单行文字，多行文字也就无所谓使用Marquee效果了。</li>
<li>android:marqueeRepeatLimit，设置走马灯滚动的次数。marquee_forever为无限循环。</li>
<li>android:ellipsize，设置了文字过长时如何切断文字，可以有none, start,middle, end, 如果使用走马灯效果则设为marquee.</li>
<li>android:focusable，Android的缺省行为是在控件获得Focus时才会显示走马灯效果</li>
</ul>
<h2 id="判断当前界面是否是桌面">判断当前界面是否是桌面</h2><pre><code>private <span class="type">boolean</span> isHome() {  
    ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);  
    List&lt;RunningTaskInfo&gt; rti = mActivityManager.getRunningTasks(<span class="number">1</span>);  
<span class="command">    return</span> getHomes().<span class="keyword">contains</span>(rti.<span class="keyword">get</span>(<span class="number">0</span>).topActivity.getPackageName());  
} 
</code></pre><h2 id="获得属于桌面的应用的应用包名称">获得属于桌面的应用的应用包名称</h2><pre><code>private <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; getHomes() {  
    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; names = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();  
    PackageManager packageManager = <span class="keyword">this</span>.getPackageManager();  
    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);  
    intent.addCategory(Intent.CATEGORY_HOME);  
    <span class="built_in">List</span>&lt;ResolveInfo&gt; resolveInfo = packageManager.queryIntentActivities(intent,  
            PackageManager.MATCH_DEFAULT_ONLY);  
    <span class="keyword">for</span> (ResolveInfo ri : resolveInfo) {  
        names.add(ri.activityInfo.packageName);  
    }  
    <span class="keyword">return</span> names;  <span class="comment">//返回包含所有包名的字符串列表</span>
}  
</code></pre><p>2015-9-3</p>
<h1 id="PendingIntent">PendingIntent</h1><h2 id="flag">flag</h2><ul>
<li><p><code>0</code>：默认为无论是否存在相同的 PendingIntent 对象都会创建一个新的 PendingIntent。</p>
</li>
<li><p><code>FLAG_CANCEL_CURRENT</code>: 如果当前系统中已经存在一个相同的 PendingIntent 对象，那么就将先将已有的 PendingIntent 取消，然后重新生成一个 PendingIntent 对象。</p>
</li>
<li><p><code>FLAG_NO_CREATE</code>: 如果当前系统中不存在相同的 PendingIntent 对象，系统将不会创建该 PendingIntent 对象而是直接返回 null。</p>
</li>
<li><p><code>FLAG_ONE_SHOT</code>: 该 PendingIntent 只作用一次，如果该 PendingIntent 对象已经触发过一次，那么下次再获取该 PendingIntent 并且再触发时，系统将会返回一个 SendIntentException，在使用这个标志的时候一定要注意哦。</p>
</li>
<li><p><code>FLAG_UPDATE_CURRENT</code>: 如果系统中已存在该 PendingIntent 对象，那么系统将保留该 PendingIntent 对象，但是会使用新的 Intent 来更新之前 PendingIntent 中的 Intent 对象数据，例如更新 Intent 中的 Extras。这个非常有用，例如之前提到的，我们需要在每次更新之后更新 Intent 中的 Extras 数据，达到在不同时机传递给 MainActivity 不同的参数，实现不同的效果。</p>
</li>
</ul>
<p>参考：<br>1.<a href="http://stackoverflow.com/questions/4523349/what-happens-if-you-set-the-flag-on-a-pendingintent-to-0" target="_blank" rel="external">What happens if you set the flag on a PendingIntent to 0?</a><br>2.<a href="http://7dot9.com/?p=333" target="_blank" rel="external">Android PendingIntent 的一些小迷惑</a></p>
<p>2015-9-5</p>
<h1 id="SeekBar拖动条">SeekBar拖动条</h1><h2 id="SeekBar总是自动获取焦点（点击/触摸SeekBar外部区域时，thumb会有响应（变色））">SeekBar总是自动获取焦点（点击/触摸SeekBar外部区域时，thumb会有响应（变色））</h2><p>在<code>.xml</code>中给<seekbar>添加属性：</seekbar></p>
<pre><code><span class="label">android:</span>clickable=<span class="string">"true"</span>
<span class="label">android:</span>focusable=<span class="string">"true"</span>
<span class="label">android:</span>focusableInTouchMode=<span class="string">"true"</span>
</code></pre><h1 id="TextView显示音标">TextView显示音标</h1><p>1.下载音标字体，如TOPhonetic.ttf，将音标字体文件放在<code>assets/font</code>目录下<br>2.为TextView设置属性</p>
<pre><code>Typeface <span class="variable">mFace =</span> Typeface.createFromAsset(getAssets(), <span class="string">"font/TOPhonetic.ttf"</span>); 
wordPhoneticTextView.setTypeface(mFace);
</code></pre><p>若显示<code>getAssets() is undefined</code>，则改为<code>context.getAssets()</code><br>参考：<a href="http://marshal.easymorse.com/index.html%3Fp=4087.html" target="_blank" rel="external">Android如何显示音标</a></p>
<p>2015-9-6</p>
<h1 id="TextView设置不同的字体风格">TextView设置不同的字体风格</h1><p>悬浮窗里只用了一个TextView，便于显示跑马灯效果。为了显示音标使用了TOPhonetic字体，但这样显示的英文和中文都不太喜欢，想只有音标使用TOPhonetic字体，单词和释义跟随手机当前字体。</p>
<h2 id="1-使用Html-fromHtml">1.使用Html.fromHtml</h2><p>如：</p>
<pre><code>mTextView.setTextView(Html.fromHtml("<span class="tag">&lt;<span class="title">font</span> <span class="attribute">color</span>=<span class="value">'red'</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span>" + "红色字体"
            + "<span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">font</span>&gt;</span>TextView学习显示不同颜色"));
</code></pre><p>Textview并不支持所有的html标签。如果更复杂的，可以直接使用webview组件。<br>查找资料有人说<code>&lt;font face=&quot;verdana&quot; color=&quot;green&quot;&gt;This is some text!&lt;/font&gt;</code>，想要更改字体必须手机上安装了此字体。（未测试是否可行，但直接使用的确无效）</p>
<h2 id="String_Resources支持的tag">String Resources支持的tag</h2><pre><code>-<span class="ruby"> &lt;a&gt; (supports attributes <span class="string">"href"</span>)
</span>-<span class="ruby"> &lt;annotation&gt;
</span>-<span class="ruby"> &lt;b&gt;
</span>-<span class="ruby"> &lt;big&gt;
</span>-<span class="ruby"> &lt;font&gt; (supports attributes <span class="string">"height"</span>, <span class="string">"size"</span>, <span class="string">"fgcolor"</span> <span class="keyword">and</span> <span class="string">"bicolor"</span>, as integers)
</span>-<span class="ruby"> &lt;i&gt;
</span>-<span class="ruby"> &lt;li&gt;
</span>-<span class="ruby"> &lt;marquee&gt;
</span>-<span class="ruby"> &lt;small&gt;
</span>-<span class="ruby"> &lt;strike&gt;
</span>-<span class="ruby"> &lt;sub&gt;
</span>-<span class="ruby"> &lt;sup&gt;
</span>-<span class="ruby"> &lt;tt&gt;
</span>-<span class="ruby"> &lt;u&gt;</span>
</code></pre><h2 id="Html-fromHtml()支持的tag">Html.fromHtml()支持的tag</h2><pre><code>-<span class="ruby"> &lt;a&gt; (supports attribute <span class="string">"href"</span>)
</span>-<span class="ruby"> &lt;b&gt;
</span>-<span class="ruby"> &lt;big&gt;
</span>-<span class="ruby"> &lt;blockquote&gt;
</span>-<span class="ruby"> &lt;br&gt;
</span>-<span class="ruby"> &lt;cite&gt;
</span>-<span class="ruby"> &lt;dfn&gt;
</span>-<span class="ruby"> &lt;div&gt;
</span>-<span class="ruby"> &lt;em&gt;
</span>-<span class="ruby"> &lt;font&gt; (supports attributes <span class="string">"color"</span> <span class="keyword">and</span> <span class="string">"face"</span>)
</span>-<span class="ruby"> &lt;i&gt;
</span>-<span class="ruby"> &lt;img&gt; (supports attribute <span class="string">"src"</span>. <span class="constant">Note</span><span class="symbol">:</span> you have to <span class="keyword">include</span> an <span class="constant">ImageGetter</span> to handle retrieving a <span class="constant">Drawable</span> <span class="keyword">for</span> this tag)
</span>-<span class="ruby"> &lt;p&gt;
</span>-<span class="ruby"> &lt;small&gt;
</span>-<span class="ruby"> &lt;strong&gt;
</span>-<span class="ruby"> &lt;sub&gt;
</span>-<span class="ruby"> &lt;sup&gt;
</span>-<span class="ruby"> &lt;tt&gt;
</span>-<span class="ruby"> &lt;u&gt;</span>
</code></pre><h2 id="支持的颜色：">支持的颜色：</h2><pre><code>-<span class="ruby"> aqua
</span>-<span class="ruby"> black
</span>-<span class="ruby"> blue
</span>-<span class="ruby"> fuchsia
</span>-<span class="ruby"> green
</span>-<span class="ruby"> grey
</span>-<span class="ruby"> lime
</span>-<span class="ruby"> maroon
</span>-<span class="ruby"> navy
</span>-<span class="ruby"> olive
</span>-<span class="ruby"> purple
</span>-<span class="ruby"> red
</span>-<span class="ruby"> silver
</span>-<span class="ruby"> teal
</span>-<span class="ruby"> white
</span>-<span class="ruby"> yellow</span>
</code></pre><p>参考：<br>1.<a href="http://daniel-codes.blogspot.kr/2011/04/html-in-textviews.html" target="_blank" rel="external">HTML in TextViews</a><br>2.<a href="http://m.blog.csdn.net/blog/lue2009/46122727" target="_blank" rel="external">Android 字体设置注意的地方</a></p>
<h2 id="2-使用Spannable">2.使用Spannable</h2><p>1.<code>CustomTypefaceSpan</code> Class:</p>
<pre><code><span class="keyword">import</span> android.graphics.Paint;
<span class="keyword">import</span> android.graphics.Typeface;
<span class="keyword">import</span> android.text.TextPaint;
<span class="keyword">import</span> android.text.style.TypefaceSpan;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypefaceSpan</span> <span class="keyword">extends</span> <span class="title">TypefaceSpan</span> </span>{
    <span class="keyword">private</span> <span class="keyword">final</span> Typeface newType;

    <span class="function"><span class="keyword">public</span> <span class="title">CustomTypefaceSpan</span><span class="params">(String family, Typeface type)</span> </span>{
        <span class="keyword">super</span>(family);
        newType = type;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint tp)</span> </span>{
        applyCustomTypeFace(tp, newType);
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMeasureState</span><span class="params">(TextPaint paint)</span> </span>{
        applyCustomTypeFace(paint, newType);
    }

    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyCustomTypeFace</span><span class="params">(Paint paint, Typeface tf)</span> </span>{
        <span class="keyword">int</span> oldStyle;
        Typeface old = paint.getTypeface();
        <span class="keyword">if</span> (old == <span class="keyword">null</span>) {
            oldStyle = <span class="number">0</span>;
        } <span class="keyword">else</span> {
            oldStyle = old.getStyle();
        }

        <span class="keyword">int</span> fake = oldStyle &amp; ~tf.getStyle();
        <span class="keyword">if</span> ((fake &amp; Typeface.BOLD) != <span class="number">0</span>) {
            paint.setFakeBoldText(<span class="keyword">true</span>);
        }

        <span class="keyword">if</span> ((fake &amp; Typeface.ITALIC) != <span class="number">0</span>) {
            paint.setTextSkewX(-<span class="number">0.25f</span>);
        }

        paint.setTypeface(tf);
    }
}
</code></pre><p>2.使用方法</p>
<pre><code>Typeface font1 = Typeface.createFromAsset(getAssets(), <span class="string">"font/font1.ttf"</span>);
Typeface font2 = Typeface.createFromAsset(getAssets(), <span class="string">"font/font2.ttf"</span>);   
<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"abcdefghijk"</span>;
<span class="built_in">int</span> len = <span class="built_in">str</span>.length();
SpannableStringBuilder ss = <span class="keyword">new</span> SpannableStringBuilder(<span class="built_in">str</span>);
ss.setSpan (<span class="keyword">new</span> CustomTypefaceSpan(<span class="string">""</span>, font1), <span class="number">0</span>, <span class="number">2</span>,Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
ss.setSpan (<span class="keyword">new</span> CustomTypefaceSpan(<span class="string">""</span>, font2), <span class="number">2</span>, <span class="number">5</span>,Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
ss.setSpan (<span class="keyword">new</span> CustomTypefaceSpan(<span class="string">""</span>, Typeface.DEFAULT), <span class="number">5</span>, len,Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
textview.setText(ss);
</code></pre><p>注意：<br><code>setSpan(Object what, int start, int end, int flags)</code>的参数：<br>字符的位置从0开始计数</p>
<ul>
<li><code>int start</code>：开始位置（以0为基数）</li>
<li><code>int end</code>：从start开始一共（end-start）个字符，即实际结束位置为（end-1）</li>
<li><code>int flags</code>：有2个值<code>SPAN_EXCLUSIVE_INCLUSIVE</code>和<code>SPAN_EXCLUSIVE_EXCLUSIVE</code>，使用中没发现有什么区别。O.O</li>
</ul>
<p>参考：<br>1.<a href="http://aichixihongshi.iteye.com/blog/1207503" target="_blank" rel="external">android中用Spannable在TextView中设置超链接、颜色、字体</a><br>2.<a href="http://stackoverflow.com/questions/6612316/how-set-spannable-object-font-with-custom-font" target="_blank" rel="external">How set Spannable object font with custom font</a></p>
<h1 id="“通知栏单词”无法正确显示音标">“通知栏单词”无法正确显示音标</h1><p>可以通过<code>tickerText.setSpan(new StyleSpan(Typeface.BOLD_ITALIC), 0, tickerText.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</code>设置加粗或斜体，但用自定义<code>CustomTypefaceSpan</code>时无效。未找到解决办法。<br>最后发现，其实手机是可以直接显示音标的。。（直接复制音标比如<code>setTicker(&quot;[əˈsɪst]&quot;)</code>，手机上可以正常显示！！！）<br>看来是源数据的编码问题@_@<br>又找了几份单词excel文件，终于找到个可以正常显示的了。<a href="http://bbs.kaoyan.com/forum.php?mod=viewthread&amp;tid=3658574&amp;page=1" target="_blank" rel="external">下载单词音标释义版excel</a><br>换了数据后，一切正常显示。。也不用替换字体了~</p>
<h1 id="SQLite数据库">SQLite数据库</h1><p>记得之前有做笔记的，但是竟然找不到了。。<br>以前在实习公司用过Navicat，但是启动特别缓慢（现在看来是电脑问题<code>—_—</code>），加上网上也有人说Navicat臃肿然后推荐了一堆别的软件，今天之前都用的SQLiteStudio，实话说，不太好用。刚刚新的excel文件虽然在excel里音标是正常的，但导出到txt音标又乱码了，更换字体无效！！！于是只好安装Navicat，可以直接导入excel数据，发现在我的电脑并不卡<code>—_—</code>果断弃用SQLiteStudio。所以这么曲折都是为什么。。。</p>
<p>2015-9-7</p>
<h2 id="Navicat对SQLite添加时间字段">Navicat对SQLite添加时间字段</h2><p>新增时间字段，类型选择<code>TEXT</code>，在下方<code>默认</code>栏里写<code>(datetime(&#39;now&#39;,&#39;localtime&#39;))</code> （注意最外要有括号），即可自动添加当前时区的时间。若<code>默认</code>为<code>CURRENT_TIMESTAMP</code>，则时区为GMT。<br>参考：<br>1.<a href="http://stackoverflow.com/questions/200309/sqlite-database-default-time-value-now" target="_blank" rel="external">sqlite database default time value ‘now’</a><br>2.<a href="http://stackoverflow.com/questions/381371/sqlite-current-timestamp-is-in-gmt-not-the-timezone-of-the-machine" target="_blank" rel="external">Sqlite: CURRENT_TIMESTAMP is in GMT, not the timezone of the machine</a><br>3.<a href="https://community.navicat.com/forum/navicat-product/navicat-for-sqlite/1075-how-to-enter-function-values-in-tables" target="_blank" rel="external">How to enter function values in tables ?</a></p>
<h1 id="Button的点击和父控件的冲突">Button的点击和父控件的冲突</h1><p>1.在“悬浮窗单词”SmallFloatWindowView中，一个Button用来播放单词读音，一个TextView显示单词。<br>最初是对“悬浮窗单词”的SmallFloatWindowView进行onTouchEvent监听，对Button进行OnClickListener监听，但这样Button无法移动，Textview可以移动。<br>改为：button.setOnTouchListener监听onTouch行为，在onTouch里执行button的操作。<br>2.虽然解决了问题，但2个监听有很多重复代码，只是处理点击有所不同。<br>将两者都设置setOnTouchListener，复写onTouch</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent ev)</span> </span>{
    <span class="keyword">switch</span> (ev.getAction()) {  
    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  
        xInView = ev.getX();  
        yInView = ev.getY();  
        xDownInScreen = ev.getRawX();  
        yDownInScreen = ev.getRawY();  
        xInScreen = ev.getRawX();  
        yInScreen = ev.getRawY();  
        <span class="keyword">break</span>;  
    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  
        xInScreen = ev.getRawX();  
        yInScreen = ev.getRawY();  
        updateViewPosition();  
        <span class="keyword">break</span>;  
    <span class="keyword">case</span> MotionEvent.ACTION_UP:  
        <span class="keyword">if</span> (xDownInScreen == xInScreen &amp;&amp; yDownInScreen == yInScreen) {
            <span class="keyword">switch</span> (v.getId()) {
            <span class="keyword">case</span> R.id.small_float_window_layout:
                Log.d(VIEW_LOG_TAG, <span class="string">"点击了float window"</span>);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> R.id.small_float_window_play_btn:
                Log.d(VIEW_LOG_TAG, <span class="string">"点击了btn"</span>);
                <span class="keyword">break</span>;
            <span class="keyword">default</span>:
                <span class="keyword">break</span>;
            }
        }  
        <span class="keyword">break</span>;  
    <span class="keyword">default</span>:  
        <span class="keyword">break</span>;  
    }
    <span class="keyword">return</span> <span class="keyword">true</span>;
}  
</code></pre><p>注意：最后要返回true，否则只能监听到btn的行为。<br>参考：<a href="http://stackoverflow.com/questions/6924275/motionevent-action-up-on-textview" target="_blank" rel="external">MotionEvent.ACTION_UP on Textview</a></p>
<p>2015-9-8</p>
<h1 id="RecyclerView添加PopMenu菜单">RecyclerView添加PopMenu菜单</h1><p>在ViewHolder里配置：<br>1.setOnClickListener</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">( View v )</span> </span>{  
        <span class="keyword">super</span>(v);  
        <span class="keyword">this</span>.view = v;
        v.setOnLongClickListener(<span class="keyword">this</span>);
} 
</code></pre><p>2.在OnLongClickListener创建PopupMenu</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>{
    <span class="keyword">if</span> ( v == <span class="keyword">this</span>.view ) {
        PopupMenu popMenu = <span class="keyword">new</span> PopupMenu(v.getContext(), v);
        popMenu.inflate(R.menu.wordbook_context_menu);
        popMenu.setOnMenuItemClickListener(<span class="keyword">this</span>);
        popMenu.show();
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><p>3.在OnMenuItemClickListener给menu items添加操作</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>{
    <span class="keyword">switch</span> (item.getItemId()) {
    <span class="keyword">case</span> R.id.wordbook_context_menu_edit:
        Toast.makeText(view.getContext(),tvWord.getText().toString()+item.getTitle(), Toast.LENGTH_SHORT).show();
        <span class="keyword">break</span>;
    <span class="keyword">case</span> R.id.wordbook_context_menu_delete:
        Toast.makeText(view.getContext(),tvWord.getText().toString()+item.getTitle(), Toast.LENGTH_SHORT).show();
        <span class="keyword">break</span>;
    <span class="keyword">case</span> R.id.wordbook_context_menu_addto:
        Toast.makeText(view.getContext(),tvWord.getText().toString()+item.getTitle(), Toast.LENGTH_SHORT).show();
        <span class="keyword">break</span>;
    <span class="keyword">default</span>:
        <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> <span class="keyword">true</span>;
}
</code></pre><p>参考：<a href="http://lenz-tech.blogspot.kr/2015/05/adding-context-menus-to-recyclerview.html" target="_blank" rel="external">Adding context menus to RecyclerView items</a></p>
<p>2015-9-9</p>
<h1 id="SQLite数据库-1">SQLite数据库</h1><h2 id="获取所有表名">获取所有表名</h2><pre><code>db = wordsDbHelper.getReadableDatabase();
List&lt;<span class="keyword">String</span>&gt; tableList = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();
Cursor <span class="built_in">cursor</span> = db.rawQuery(<span class="string">"SELECT name FROM sqlite_master WHERE type='table' AND name!='android_metadata' order by name"</span>, <span class="keyword">null</span>);
<span class="keyword">while</span>(<span class="built_in">cursor</span>.moveToNext()){
    tableList.<span class="built_in">add</span>(<span class="built_in">cursor</span>.getString(<span class="number">0</span>));
}
</code></pre><p>参考：<a href="http://stackoverflow.com/questions/26323913/how-to-select-all-tables-names-instead-android-metadata-android-sqlite" target="_blank" rel="external">How to select all tables names instead android_metadata android SQLite</a></p>
<h2 id="表重命名">表重命名</h2><pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> alterTableName(<span class="keyword">String</span> oldName, <span class="keyword">String</span> newName) {
    <span class="keyword">if</span> ( ! getTableList().contains(newName) ) {
        db = wordsDbHelper.getReadableDatabase();
        db.execSQL(<span class="string">"ALTER TABLE "</span> + oldName + <span class="string">" RENAME TO "</span> + newName + <span class="string">";"</span>);
        db.close();
    }
}
</code></pre><h1 id="RecyclerView详细使用">RecyclerView详细使用</h1><p>参考：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2004.html" target="_blank" rel="external">RecyclerView使用介绍</a></p>
<h2 id="RecyclerView_Adapter更新数据集">RecyclerView Adapter更新数据集</h2><pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">updateList</span><span class="params">(List&lt;WordCls&gt; newList)</span> </span>{
    <span class="keyword">this</span>.wordsList = newList;
    notifyDataSetChanged();
}
</code></pre><h1 id="AlertDialog对话框">AlertDialog对话框</h1><p>参考：<a href="http://www.imyukin.com/?p=236" target="_blank" rel="external">Android的AlertDialog详解</a></p>
<p>2015-9-10</p>
<h1 id="RecyclerView添加点击事件，并获取item_position">RecyclerView添加点击事件，并获取item position</h1><p>参考：<br>1.<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2004.html" target="_blank" rel="external">RecyclerView使用介绍</a><br>2.<a href="https://gist.github.com/riyazMuhammad/1c7b1f9fa3065aa5a46f" target="_blank" rel="external">Easy Implementation of RecyclerView custom onItemClickListener</a></p>
<h1 id="RecyclerView水平滑动类似viewpager——继承SnappingRecyclerView">RecyclerView水平滑动类似viewpager——继承SnappingRecyclerView</h1><p>参考：<br>1.<a href="https://gist.github.com/lauw/fc84f7d04f8c54e56d56" target="_blank" rel="external">SnappingRecyclerView.java</a><br>2.<a href="http://stackoverflow.com/questions/26370289/snappy-scrolling-in-recyclerview" target="_blank" rel="external">Snappy scrolling in RecyclerView</a></p>
<h1 id="RecyclerView-Adapter根据viewType动态加载不同的item布局">RecyclerView.Adapter根据viewType动态加载不同的item布局</h1><p>在Adapter里<br>1.设置viewType</p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_VERTICAL = <span class="number">0</span>;
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_HORIZON = <span class="number">1</span>;

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{
    <span class="comment">//也可以根据item的position设置不同的viewType</span>
    <span class="keyword">return</span> viewType;
}

<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setItemViewType</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>{
    <span class="keyword">this</span>.viewType = viewType;
}
</code></pre><p>2.一个item布局对应一个ViewHolder<br>自定义一个<code>BaseViewHolder</code>，让所有的<code>ViewHolder</code>继承它。</p>
<pre><code>public <span class="class"><span class="keyword">class</span> <span class="title">BaseViewHolder</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> {</span>
    public <span class="type">TextView</span> tvWord;  
    public <span class="type">TextView</span> tvPhonetic;  
    public <span class="type">TextView</span> tvDefinition;  

    public <span class="type">BaseViewHolder</span>(<span class="type">View</span> v) {
        <span class="keyword">super</span>(v);
    }
}

public <span class="class"><span class="keyword">class</span> <span class="title">VerticalViewHolder</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BaseViewHolder</span> {</span>
    public <span class="type">ImageButton</span> imgBtn;

    public <span class="type">VerticalViewHolder</span>( <span class="type">View</span> v) {  
        <span class="keyword">super</span>(v); 

        tvWord = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_vertical_tv_word);  
        tvPhonetic = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_vertical_tv_phonetic);  
        tvDefinition = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_vertical_tv_definition);  
        imgBtn = (<span class="type">ImageButton</span>) v.findViewById(<span class="type">R</span>.id.wordcard_vertical_imgbtn);  
    }
}  

public <span class="class"><span class="keyword">class</span> <span class="title">HorizonViewHolder</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BaseViewHolder</span> {</span>

    public <span class="type">HorizonViewHolder</span>( <span class="type">View</span> v) {  
        <span class="keyword">super</span>(v); 

        tvWord = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_horizon_tv_word);  
        tvPhonetic = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_horizon_tv_phonetic);  
        tvDefinition = (<span class="type">TextView</span>) v.findViewById(<span class="type">R</span>.id.wordcard_horizon_tv_definition);  
    }
}
</code></pre><p>3.根据viewType执行不同的操作</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordRecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">WordRecyclerViewAdapter</span>.**<span class="title">BaseViewHolder</span>**&gt; </span>{
    ……

    <span class="annotation">@Override</span>  
    <span class="keyword">public</span> **BaseViewHolder** onCreateViewHolder( ViewGroup parent, <span class="keyword">int</span> **viewType** )  
    {  
        <span class="keyword">final</span> **BaseViewHolder** viewHolder;
        View v ;

        <span class="keyword">switch</span> (**viewType**) {
        <span class="keyword">case</span> TYPE_VIEW_HORIZON:
            v = LayoutInflater.from(parent.getContext()).inflate(R.layout.wordbook_item_horizontal_cardview, parent, <span class="keyword">false</span>);  
            viewHolder = <span class="keyword">new</span> HorizonViewHolder(v);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> TYPE_VIEW_VERTICAL:
        <span class="keyword">default</span>:
            v = LayoutInflater.from(parent.getContext()).inflate(R.layout.wordbook_item_vertical_cardview, parent, <span class="keyword">false</span>);  
            viewHolder = <span class="keyword">new</span> VerticalViewHolder(v);
            <span class="keyword">break</span>;
        }

        <span class="keyword">return</span> viewHolder;   
    }

    <span class="annotation">@Override</span>  
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">( **BaseViewHolder** baseViewHolder, <span class="keyword">int</span> position )</span> </span>{  
        WordCls wordCls = wordsList.get(position);  

        baseViewHolder.itemView.setTag(wordCls);

        baseViewHolder.tvWord.setText(wordCls.getWord());  
        baseViewHolder.tvPhonetic.setText(wordCls.getPhonetic());  
        baseViewHolder.tvDefinition.setText(wordCls.getDefinition());  

        <span class="keyword">switch</span> (**baseViewHolder.getItemViewType()**) {
        <span class="keyword">case</span> TYPE_VIEW_HORIZON:
            HorizonViewHolder horizonViewHolder = (HorizonViewHolder) baseViewHolder;
            ……
            <span class="keyword">break</span>;
        <span class="keyword">case</span> TYPE_VIEW_VERTICAL:
        <span class="keyword">default</span>:
            VerticalViewHolder verticalViewHolder = (VerticalViewHolder) baseViewHolder;
            verticalViewHolder.imgBtn.setOnClickListener(<span class="keyword">new</span> OnClickListener() {

                <span class="annotation">@Override</span>
                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
                }
            });
            ……
            <span class="keyword">break</span>;
        }
    }  
}
</code></pre><p>参考：<br>1.<a href="http://stackoverflow.com/questions/29579717/how-to-change-the-viewtype-of-a-recyclerview-item-onclick" target="_blank" rel="external">How to Change the viewType of a RecyclerView item onClick</a><br>2.<a href="http://stackoverflow.com/a/32267521/5315255" target="_blank" rel="external">Recyclerview and handling different type of row inflation</a></p>
<p>2015-9-11</p>
<h1 id="保存和恢复RecyclerView（Scroll）的精确滑动位置">保存和恢复RecyclerView（Scroll）的精确滑动位置</h1><p>1.scrollby</p>
<pre><code><span class="keyword">private</span> <span class="keyword">int</span> mScrollY;
<span class="keyword">private</span> <span class="keyword">int</span> mScrollYState;
<span class="comment">//保存</span>
<span class="keyword">private</span> RecyclerView.OnScrollListener mTotalScrollListener = <span class="keyword">new</span> RecyclerView.OnScrollListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>{
        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);
        mScrollY += dy;
    }
};
<span class="comment">//恢复</span>
mScrollYState = mScrollY;
mRecyclerView.scrollBy(<span class="number">0</span>, mScrollYState);
</code></pre><p>参考：<a href="http://stackoverflow.com/a/30195360/5315255" target="_blank" rel="external">Refreshing data in RecyclerView and keeping its scroll position</a></p>
<p>2.onSaveInstanceState</p>
<pre><code><span class="constant">Parcelable recyclerViewState</span> = recyclerView.getLayoutManager().onSaveInstanceState();<span class="comment">//保存</span>
recyclerView.getLayoutManager().onRestoreInstanceState(recyclerViewState);<span class="comment">//恢复</span>
</code></pre><p>直接存储RecyclerView的InstanceState，但只能在fragment的生命周期里使用<br>参考：</p>
<ul>
<li>1.<a href="http://stackoverflow.com/a/5688490/5315255" target="_blank" rel="external">Maintain/Save/Restore scroll position when returning to a ListView</a></li>
<li>2.<a href="http://panavtec.me/retain-restore-recycler-view-scroll-position/" target="_blank" rel="external">Retain &amp; restore recycler view scroll position</a></li>
</ul>
<p>2015-9-15<br>3.#保存和恢复RecyclerView（Scroll）的精确滑动位置——改进版<br>尝试了好几天，终于想到了一种比较好的方式，能保存精确位置至本地，随意切换列表数据也能恢复相应表的浏览位置，不过还是有一点点缺陷，第一页的item会跳动一下。</p>
<ul>
<li><p><code>scrollToPosition</code>是根据你的操作方向来判断目标item是显示在顶端还是显示在底端的，手指上滑则显示在底端，手指下滑则显示在顶端。那么在切换列表时，则是根据现在的<code>currentPosition</code>和<code>scrollToPosition(position)</code>的<code>position</code>来判断滑动方向的。这样需要记录顶端和底端的2个偏移量。</p>
</li>
<li><p>切换列表时，是先计算好要滑动的位置，才会显示视图的，所以只能根据当前列表（切换前显示的列表）的视图来计算位置，切换后才会滑到正确的位置。即<code>scrollToPosition</code>会滑到顶端还是底端要靠你自己判断的。</p>
</li>
<li><p>RecyclerView的界面还未出现时，比如第一次打开fragment或者切换到新的数据列表时，<code>findFirstVisibleItemPosition</code>的值是-1，这时是无法获得child View的。调试时发现，只有当手机上能看到RecyclerView时，才能获取child view。并且<code>getChildAt(int index)</code>中的<code>index</code>是指child在当前RecyclerView视图中显示的item个数中的index，而不是针对整个dataset的，故只能获取到正在显示的某一个child的View。</p>
</li>
<li><p>若切换时<code>currentFirstVisiblePosition &lt; savedFirstVisiblePosition</code>，即RecyclerView需要将列表往上拉（手指上滑）以显示下面position较大的部分，<code>scrollToPosition</code>会显示在底端。<br>但是当<code>savedFirstVisiblePosition</code>在其<code>dataset</code>中的位置在手机中显示是在第一页时，<code>scrollToPosition</code>是无法滑动到底端的。我想到的是<code>scrollToPosition</code>后，让列表<code>scrollBy(0, recyclerView.getHeight());</code>往上滑一部分，再<code>scrollToPosition();</code>回来，这样目标item就会显示在顶端了，再用<code>smoothScrollBy(0, dyTop);</code>就可以了。这里最后一步没有用<code>scrollBy</code>是因为没有效，我也不知道为什么，可能不支持连续滑动多次吧，也可以将<code>scrollBy</code>放在handler里，效果和<code>smoothScrollBy</code>差不多；但是这2种方法都会出现跳动的动画。</p>
</li>
</ul>
<pre><code><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">saveRecyclerViewPosition</span><span class="params">(String tableName)</span> </span>{
    firstVisibleItemPosition = ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();

    savedFirstVisibleChild = recyclerView.getChildAt(<span class="number">0</span>);
    <span class="comment">//dy正，手指将列表往上拉</span>
    <span class="comment">//dy负，手指将列表往下拉</span>
    dyTop = savedFirstVisibleChild.getHeight() - savedFirstVisibleChild.getBottom(); 
    dyBottom = recyclerView.getHeight() - savedFirstVisibleChild.getBottom();

    prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_POSITION + tableName, firstVisibleItemPosition);
    prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_DY_TOP + tableName, dyTop);
    prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_DY_BOTTOM + tableName, dyBottom);
    prefEditorSettings.commit(); 
}

<span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">restoreRecyclerViewPosition</span><span class="params">(String tableName)</span> </span>{
    <span class="keyword">if</span> ( recyclerView != <span class="keyword">null</span>) {
        savedFirstVisiblePosition = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_POSITION + tableName, <span class="number">0</span>);
        dyTop = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_DY_TOP + tableName, <span class="number">0</span>);
        dyBottom = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_DY_BOTTOM + tableName, <span class="number">0</span>);

        currentFirstVisiblePosition =  ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();

        recyclerView.scrollToPosition(savedFirstVisiblePosition);

        <span class="keyword">if</span>(currentFirstVisiblePosition &gt; -<span class="number">1</span>) {  
            <span class="keyword">if</span> (currentFirstVisiblePosition &gt;= savedFirstVisiblePosition) { <span class="comment">//savedFirstVisiblePosition在顶部</span>
                recyclerView.scrollBy(<span class="number">0</span>, dyTop);
            } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(currentFirstVisiblePosition &lt; savedFirstVisiblePosition)</span></span>{    <span class="comment">//savedFirstVisiblePosition在底部</span>
                <span class="keyword">if</span> (savedFirstVisiblePosition &gt; <span class="number">4</span>)
                    recyclerView.scrollBy(<span class="number">0</span>, dyBottom);             
                <span class="keyword">else</span> {  <span class="comment">//第一页的item用handler/smoothScrollBy会有跳转动作显示，暂时会找到合适的办法</span>
                    recyclerView.scrollBy(<span class="number">0</span>, recyclerView.getHeight());
                    recyclerView.scrollToPosition(savedFirstVisiblePosition);
                    recyclerView.smoothScrollBy(<span class="number">0</span>, dyTop);
                }
            } 
        } <span class="keyword">else</span> {    <span class="comment">//第一次打开，还未出现界面</span>
            recyclerView.scrollToPosition(savedFirstVisiblePosition);
            recyclerView.scrollBy(<span class="number">0</span>, dyTop);
        }
    }
}
</code></pre><ul>
<li><p>这个方法不受生命周期的限制，但在上述情况中视觉体验不太好，所以可以跟方法2结合起来使用。</p>
<p>  private void saveRecyclerViewPosition(String tableName) {</p>
<pre><code><span class="constant">recyclerViewState</span> = recyclerView.getLayoutManager().onSaveInstanceState();
hmRecyclerViewState.put(tableName, recyclerViewState);

<span class="constant">firstVisibleItemPosition</span> = ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();

<span class="constant">savedFirstVisibleChild</span> = recyclerView.getChildAt(0);
//dy正，手指将列表往上拉
//dy负，手指将列表往下拉
<span class="constant">dyTop</span> = savedFirstVisibleChild.getHeight() - savedFirstVisibleChild.getBottom(); 
<span class="constant">dyBottom</span> = recyclerView.getHeight() - savedFirstVisibleChild.getBottom();

prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_POSITION + tableName, firstVisibleItemPosition);
prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_DY_TOP + tableName, dyTop);
prefEditorSettings.putInt(KEY_RECYCLERVIEW_SCROLL_DY_BOTTOM + tableName, dyBottom);
prefEditorSettings.commit();
</code></pre><p>  }</p>
<p>  private void restoreRecyclerViewPosition(String tableName) {</p>
<pre><code>recyclerViewState = hmRecyclerViewState.<span class="keyword">get</span>(tableName);
<span class="keyword">if</span> (recyclerViewState != <span class="literal">null</span>) {
    recyclerView.getLayoutManager().onRestoreInstanceState(recyclerViewState);
} <span class="keyword">else</span> {
    <span class="keyword">if</span> ( recyclerView != <span class="literal">null</span>) {
        savedFirstVisiblePosition = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_POSITION + tableName, <span class="number">0</span>);
        dyTop = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_DY_TOP + tableName, <span class="number">0</span>);
        dyBottom = prefSettings.getInt(KEY_RECYCLERVIEW_SCROLL_DY_BOTTOM + tableName, <span class="number">0</span>);

        currentFirstVisiblePosition =  ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();

        recyclerView.scrollToPosition(savedFirstVisiblePosition);

        <span class="keyword">if</span>(currentFirstVisiblePosition &gt; -<span class="number">1</span>) {
            <span class="keyword">if</span> (currentFirstVisiblePosition &gt;= savedFirstVisiblePosition) { <span class="comment">//savedFirstVisiblePosition在顶部</span>
                recyclerView.scrollBy(<span class="number">0</span>, dyTop);
            } <span class="keyword">else</span> <span class="keyword">if</span> (currentFirstVisiblePosition &lt; savedFirstVisiblePosition){    <span class="comment">//savedFirstVisiblePosition在底部</span>
                <span class="keyword">if</span> (savedFirstVisiblePosition &gt; <span class="number">4</span>)
                    recyclerView.scrollBy(<span class="number">0</span>, dyBottom);             
                <span class="keyword">else</span> {  <span class="comment">//第一页的item用handler/smoothScrollBy会有跳转动作显示，暂时会找到合适的办法</span>
                    recyclerView.scrollBy(<span class="number">0</span>, recyclerView.getHeight());
                    recyclerView.scrollToPosition(savedFirstVisiblePosition);
                    recyclerView.smoothScrollBy(<span class="number">0</span>, dyTop);
                }
            } 
        } <span class="keyword">else</span> {    <span class="comment">//第一次打开，还未出现界面</span>
            recyclerView.scrollToPosition(savedFirstVisiblePosition);
            recyclerView.scrollBy(<span class="number">0</span>, dyTop);
        }
    }
}
</code></pre><p>  }</p>
</li>
</ul>
<h1 id="slidingmenu切换fragment时的优化">slidingmenu切换fragment时的优化</h1><p>避免每次切换fragment时都重新加载view。<br>注意：一个activity只有一个actionbar。</p>
<p>1.<code>SlidingmenuFragment</code></p>
<pre><code>@<span class="function">Override
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView lv, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>{
    newContentFragment = <span class="keyword">null</span>;

    <span class="keyword">object</span> = lv.getItemAtPosition(position);
    str=(String)<span class="keyword">object</span>;

    getActivity().setTitle(str);
    actionBar.setDisplayShowCustomEnabled(<span class="keyword">false</span>);

    <span class="keyword">if</span> (str.matches(getResources().getString(R.<span class="keyword">string</span>.center))){
        <span class="keyword">if</span> (centerFragment == <span class="keyword">null</span>)
            centerFragment = <span class="keyword">new</span> CenterFragment();
        newContentFragment = centerFragment;
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(str.matches(getResources()</span>.<span class="title">getString</span><span class="params">(R.<span class="keyword">string</span>.home)</span>))</span>{
        <span class="keyword">if</span> (homeFragment == <span class="keyword">null</span>)
            homeFragment = <span class="keyword">new</span> HomeFragment(getActivity());
        newContentFragment = homeFragment;
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(str.matches(getResources()</span>.<span class="title">getString</span><span class="params">(R.<span class="keyword">string</span>.wordbook)</span>))</span>{
        <span class="keyword">if</span> (wordBookFragment == <span class="keyword">null</span>)
            wordBookFragment = <span class="keyword">new</span> WordBookFragment();
        newContentFragment = wordBookFragment;
        <span class="comment">//加载自定义actionbar布局，在wordBookFragment里实现actionBar.setCustomView()后，在这里设置为true即可。</span>
        actionBar.setDisplayShowCustomEnabled(<span class="keyword">true</span>);
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(str.matches(getResources()</span>.<span class="title">getString</span><span class="params">(R.<span class="keyword">string</span>.BBS)</span>))</span>{
        <span class="keyword">if</span> (bbsFragment == <span class="keyword">null</span>)
            bbsFragment = <span class="keyword">new</span> BBSFragment();
        newContentFragment = bbsFragment;
    } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(str.matches(getResources()</span>.<span class="title">getString</span><span class="params">(R.<span class="keyword">string</span>.settings)</span>))</span>{
        <span class="keyword">if</span> (settingsFragment == <span class="keyword">null</span>)
            settingsFragment = <span class="keyword">new</span> SettingsFragment();
        newContentFragment = settingsFragment;
    }


    <span class="keyword">if</span> (newContentFragment != <span class="keyword">null</span>){
        switchFragment(newContentFragment);
    }
}

<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchFragment</span><span class="params">(Fragment fragment)</span> </span>{
    <span class="keyword">if</span> (getActivity() == <span class="keyword">null</span>)
        <span class="keyword">return</span>;

    <span class="keyword">if</span> (getActivity() instanceof MainActivity) {
        MainActivity main = (MainActivity) getActivity();
        main.switchContent(fragment);
    } 
}
</code></pre><p>2.<code>MainActivity</code></p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">switchContent</span><span class="params">(Fragment newFragment)</span> </span>{
    <span class="keyword">if</span> ( contentFragment == <span class="keyword">null</span> || newFragment == <span class="keyword">null</span>)
        <span class="keyword">return</span>;

    FragmentTransaction transaction = getFragmentManager().beginTransaction();

    <span class="keyword">if</span> (contentFragment != newFragment) {
        <span class="keyword">if</span> (!newFragment.isAdded()) {
            <span class="comment">// 隐藏当前的fragment，add下一个到Activity中</span>
            transaction.hide(contentFragment).add(R.id.content_frame,newFragment).commit();
        } <span class="keyword">else</span> {
           <span class="comment">// 隐藏当前的fragment，显示下一个</span>
            transaction.hide(contentFragment).show(newFragment).commit();
        }
        contentFragment = newFragment;
    }

    <span class="comment">//通过handler来避免滑动卡顿的情况</span>
    <span class="keyword">handler</span>.post(<span class="keyword">new</span> Runnable() {

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
            sm.showContent();
        }
    });
}
</code></pre><p>参考：</p>
<ul>
<li>1.<a href="http://m.blog.csdn.net/blog/u011677471/42970339" target="_blank" rel="external">Android SlidingMenu Fragment的简单优化</a></li>
<li>2.<a href="http://bbs.csdn.net/topics/390767905" target="_blank" rel="external">SlidingMenu 左侧菜单切换</a></li>
<li>3.<a href="http://blog.csdn.net/csr_yang/article/details/33502141" target="_blank" rel="external">slidingmenu+fragment实现常用的侧滑效果（包括Fragment状态的保存）</a></li>
<li>4.<a href="http://blog.csdn.net/telenewbie/article/details/45486657" target="_blank" rel="external">SlidingMenu切换fragment卡顿问题</a></li>
</ul>
<p>2015-9-16</p>
<h1 id="联网解析JSON数据">联网解析JSON数据</h1><p>本来想用金山的，但一直没收到key，发现扇贝的查单词不用key，就用了<a href="http://www.shanbay.com/developer/wiki/api_v1/#query_word" target="_blank" rel="external">扇贝的API</a>。<br>1.在AsyncTask里联网并解析数据</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">ParseJsonTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt; </span>{
    HorizonViewHolder horizonViewHolder;
    WordCls wordCls;
    <span class="keyword">int</span> position;

    String definitionEN;
    String definitionCN;
    String audioUrlUS;

    Handler <span class="keyword">handler</span>;    <span class="comment">//用来传值</span>

    <span class="function"><span class="keyword">public</span> <span class="title">ParseJsonTask</span><span class="params">(HorizonViewHolder horizonViewHolder,
            WordCls wordCls, <span class="keyword">int</span> position, Handler <span class="keyword">handler</span>)</span> </span>{
        <span class="keyword">super</span>();
        <span class="keyword">this</span>.horizonViewHolder = horizonViewHolder;
        <span class="keyword">this</span>.wordCls = wordCls;
        <span class="keyword">this</span>.position = position;
        <span class="keyword">this</span>.<span class="keyword">handler</span> = <span class="keyword">handler</span>;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>{
        horizonViewHolder.progressBar.setVisibility(View.VISIBLE);
        <span class="keyword">super</span>.onPreExecute();
    }

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>{
        Message msg = <span class="keyword">handler</span>.obtainMessage();

        horizonViewHolder.progressBar.setVisibility(View.INVISIBLE);
        <span class="keyword">if</span> (result) {
            wordCls.setDefinitionEN(definitionEN);
            wordCls.setDefinitionCN(definitionCN);
            wordCls.setAudioUrlUS(audioUrlUS);
            wordCls.setLoaded(<span class="keyword">true</span>);
            WordsManager.addWordLoadInfo(tableName, wordCls);
            updateItem(position, wordCls);

            msg.what = position;
        }<span class="keyword">else</span> {
            msg.what = <span class="number">0</span>;
            Log.i(wordCls.getWord(), <span class="string">"获取数据失败"</span>);
        }

        <span class="keyword">handler</span>.sendMessage(msg);

        <span class="keyword">super</span>.onPostExecute(result);
    }

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="function">Boolean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>{
        String path = <span class="string">"https://api.shanbay.com/bdc/search/?word="</span> + wordCls.getWord();
        <span class="keyword">try</span> {
            URL url = <span class="keyword">new</span> URL(path);
            Source source = <span class="keyword">new</span> Source(url.openConnection());   <span class="comment">//jericho-html-3.1.jar</span>
            String jsonstr = source.toString();

            JSONObject jsonObj = <span class="keyword">new</span> JSONObject(jsonstr);

            JSONObject data = jsonObj.getJSONObject(<span class="string">"data"</span>);

            JSONObject defEN = data.getJSONObject(<span class="string">"en_definition"</span>);
            definitionEN = defEN.getString(<span class="string">"pos"</span>) + <span class="string">"."</span> + defEN.getString(<span class="string">"defn"</span>); 

            JSONObject defCN = data.getJSONObject(<span class="string">"cn_definition"</span>);
            definitionCN = defCN.getString(<span class="string">"pos"</span>) + defCN.getString(<span class="string">"defn"</span>); 

            audioUrlUS = data.getString(<span class="string">"us_audio"</span>);

            <span class="keyword">return</span> <span class="keyword">true</span>;
        } <span class="keyword">catch</span> (Exception e) {
            Toast.makeText(mContext, <span class="string">"获取数据失败"</span>, Toast.LENGTH_SHORT).show();
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
    }
}

<span class="keyword">if</span> ( ! wordCls.isLoaded() ) {
    Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler(){

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>{    根据AsyncTask的执行结果传递的值来判断下一步操作
            <span class="keyword">if</span> (msg.what == position)
                horizonViewHolder.tvHint.setVisibility(View.INVISIBLE);
            <span class="keyword">else</span>
                horizonViewHolder.tvHint.setText(<span class="string">"数据获取失败，请重试"</span>);
        }

    };
    ParseJsonTask parseJsonTask = <span class="keyword">new</span> ParseJsonTask(horizonViewHolder, wordCls, position, <span class="keyword">handler</span>);
    parseJsonTask.execute();
} 
</code></pre><p>参考：</p>
<ul>
<li>1.<a href="http://blog.chinaunix.net/uid-29006784-id-3865030.html" target="_blank" rel="external">Json方式获取网络数据</a></li>
<li>2.<a href="http://sunzone.iteye.com/blog/2038135" target="_blank" rel="external">Android 之 网络访问服务器，解析JSON数据</a></li>
<li>3.<a href="http://blog.csdn.net/tengweitw/article/details/46506945" target="_blank" rel="external">【Qt编程】基于Qt的词典开发系列&lt;九&gt;—JSON数据解析</a></li>
<li>4.<a href="http://bbs.chinaunix.net/thread-4184233-1-1.html" target="_blank" rel="external">android两种方式获取AsyncTask返回值</a></li>
</ul>
<p>2015-9-17</p>
<h1 id="RecyclerView水平滑动类似viewpager——自定义方法实现">RecyclerView水平滑动类似viewpager——自定义方法实现</h1><p>之前继承的<a href="https://gist.github.com/lauw/fc84f7d04f8c54e56d56" target="_blank" rel="external">SnappingRecyclerView</a>，水平状态的时候，点击item里的TextView更新会出现错位，有时还会跑到第一个位置去，并且感觉他的有点复杂。。<br>然后发现自己写一个实现也并不难@_@ 我的每一个item都是全屏的卡片，所以这样就可以了。</p>
<pre><code><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">scrollToCenter</span><span class="params">(RecyclerView recyclerView)</span> </span>{
    firstVisibleItemPosition = ((LinearLayoutManager)recyclerView.getLayoutManager()).findFirstVisibleItemPosition();
    lastVisibleItemPosition = ((LinearLayoutManager)recyclerView.getLayoutManager()).findLastVisibleItemPosition();

    <span class="keyword">if</span> ( firstVisibleItemPosition &lt; lastVisibleItemPosition ) {
        recyclerViewWidth = recyclerView.getWidth();
        firstVisibleChild = recyclerView.getChildAt(<span class="number">0</span>);
        firstChildVisibleWidth = firstVisibleChild.getRight();
        <span class="keyword">if</span> ( firstChildVisibleWidth &gt; ( recyclerViewWidth / <span class="number">2</span> ) )
            recyclerView.smoothScrollToPosition(firstVisibleItemPosition);
        <span class="keyword">else</span> <span class="keyword">if</span> ( firstChildVisibleWidth &lt; ( recyclerViewWidth / <span class="number">2</span> ) )
            recyclerView.smoothScrollToPosition(lastVisibleItemPosition);
    }
}

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(<span class="keyword">final</span> RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>{
    <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);

    <span class="keyword">switch</span> (newState) {
    <span class="keyword">case</span> RecyclerView.SCROLL_STATE_IDLE:
        <span class="keyword">switch</span> (wordCardAdapter.getItemViewType()) {
        <span class="keyword">case</span> TYPE_VIEW_HORIZON:
            scrollToCenter(recyclerView);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> TYPE_VIEW_VERTICAL:
        <span class="keyword">default</span>:
            <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> RecyclerView.SCROLL_STATE_DRAGGING:
        <span class="keyword">break</span>;
    <span class="keyword">case</span> RecyclerView.SCROLL_STATE_SETTLING:
        <span class="keyword">break</span>;
 }
}
</code></pre><h1 id="actionbar下拉列表——PopupWindow">actionbar下拉列表——PopupWindow</h1><pre><code>View view = LayoutInflater.<span class="keyword">from</span>(context).inflate(R.layout.popmenu, <span class="keyword">null</span>);       
popupWindow = <span class="keyword">new</span> PopupWindow(view, <span class="number">100</span>, LayoutParams.WRAP_CONTENT);
<span class="comment">// 使其聚集</span>
popupWindow.setFocusable(<span class="keyword">true</span>);
<span class="comment">// 设置允许在外点击消失</span>
popupWindow.setOutsideTouchable(<span class="keyword">true</span>);
<span class="comment">//刷新状态（必须刷新否则无效）</span>
popupWindow.update();
<span class="comment">// 这个是为了点击“返回Back”也能使其消失，并且并不会影响你的背景</span>
popupWindow.setBackgroundDrawable(<span class="keyword">new</span> BitmapDrawable()); 

popupWindow.showAsDropDown(v); <span class="comment">//设置显示位置</span>
</code></pre><p>参考：</p>
<ul>
<li>1.<a href="http://www.apkbus.com/android-51289-1-1.html" target="_blank" rel="external">android 下拉菜单实现详解 PopupWindow </a></li>
</ul>
<p>2015-9-18</p>
<h1 id="RecyclerView高度wrap_content无效">RecyclerView高度wrap_content无效</h1><p><a href="https://github.com/serso/android-linear-layout-manager/blob/master/lib/src/main/java/org/solovyev/android/views/llm/LinearLayoutManager.java" target="_blank" rel="external">自定义<code>MyLayoutManager</code></a></p>
<pre><code><span class="comment">/*
 * Copyright 2015 serso aka se.solovyev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * Contact details
 *
 * Email: se.solovyev@gmail.com
 * Site:  http://se.solovyev.org
 */</span>

<span class="keyword">package</span> org.solovyev.android.views.llm;

<span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.graphics.Rect;
<span class="keyword">import</span> android.support.v4.view.ViewCompat;
<span class="keyword">import</span> android.support.v7.widget.RecyclerView;
<span class="keyword">import</span> android.util.Log;
<span class="keyword">import</span> android.view.View;

<span class="keyword">import</span> java.lang.reflect.Field;

<span class="comment">/**
 * {@link android.support.v7.widget.LinearLayoutManager} which wraps its content. Note that this class will always
 * wrap the content regardless of {@link android.support.v7.widget.RecyclerView} layout parameters.
 * &lt;p/&gt;
 * Now it's impossible to run add/remove animations with child views which have arbitrary dimensions (height for
 * VERTICAL orientation and width for HORIZONTAL). However if child views have fixed dimensions
 * {@link #setChildSize(int)} method might be used to let the layout manager know how big they are going to be.
 * If animations are not used at all then a normal measuring procedure will run and child views will be measured during
 * the measure pass.
 */</span>
<span class="keyword">public</span> class LinearLayoutManager extends android.support.v7.widget.LinearLayoutManager {

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">boolean</span> canMakeInsetsDirty = <span class="keyword">true</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> Field insetsDirtyField = <span class="keyword">null</span>;

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> CHILD_WIDTH = <span class="number">0</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> CHILD_HEIGHT = <span class="number">1</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CHILD_SIZE = <span class="number">100</span>;

    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span>[] childDimensions = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];
    <span class="keyword">private</span> <span class="keyword">final</span> RecyclerView view;

    <span class="keyword">private</span> <span class="built_in">int</span> childSize = DEFAULT_CHILD_SIZE;
    <span class="keyword">private</span> <span class="built_in">boolean</span> hasChildSize;
    <span class="keyword">private</span> <span class="built_in">int</span> overScrollMode = ViewCompat.OVER_SCROLL_ALWAYS;
    <span class="keyword">private</span> <span class="keyword">final</span> Rect tmpRect = <span class="keyword">new</span> Rect();

    @SuppressWarnings(<span class="string">"UnusedDeclaration"</span>)
    <span class="keyword">public</span> LinearLayoutManager(Context context) {
        <span class="keyword">super</span>(context);
        <span class="keyword">this</span>.view = <span class="keyword">null</span>;
    }

    @SuppressWarnings(<span class="string">"UnusedDeclaration"</span>)
    <span class="keyword">public</span> LinearLayoutManager(Context context, <span class="built_in">int</span> orientation, <span class="built_in">boolean</span> reverseLayout) {
        <span class="keyword">super</span>(context, orientation, reverseLayout);
        <span class="keyword">this</span>.view = <span class="keyword">null</span>;
    }

    @SuppressWarnings(<span class="string">"UnusedDeclaration"</span>)
    <span class="keyword">public</span> LinearLayoutManager(RecyclerView view) {
        <span class="keyword">super</span>(view.getContext());
        <span class="keyword">this</span>.view = view;
        <span class="keyword">this</span>.overScrollMode = ViewCompat.getOverScrollMode(view);
    }

    @SuppressWarnings(<span class="string">"UnusedDeclaration"</span>)
    <span class="keyword">public</span> LinearLayoutManager(RecyclerView view, <span class="built_in">int</span> orientation, <span class="built_in">boolean</span> reverseLayout) {
        <span class="keyword">super</span>(view.getContext(), orientation, reverseLayout);
        <span class="keyword">this</span>.view = view;
        <span class="keyword">this</span>.overScrollMode = ViewCompat.getOverScrollMode(view);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> setOverScrollMode(<span class="built_in">int</span> overScrollMode) {
        <span class="keyword">if</span> (overScrollMode &lt; ViewCompat.OVER_SCROLL_ALWAYS || overScrollMode &gt; ViewCompat.OVER_SCROLL_NEVER)
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown overscroll mode: "</span> + overScrollMode);
        <span class="keyword">if</span> (<span class="keyword">this</span>.view == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"view == null"</span>);
        <span class="keyword">this</span>.overScrollMode = overScrollMode;
        ViewCompat.setOverScrollMode(view, overScrollMode);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> makeUnspecifiedSpec() {
        <span class="keyword">return</span> View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED);
    }

    @Override
    <span class="keyword">public</span> <span class="keyword">void</span> onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state, <span class="built_in">int</span> widthSpec, <span class="built_in">int</span> heightSpec) {
        <span class="keyword">final</span> <span class="built_in">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);
        <span class="keyword">final</span> <span class="built_in">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);

        <span class="keyword">final</span> <span class="built_in">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);
        <span class="keyword">final</span> <span class="built_in">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);

        <span class="keyword">final</span> <span class="built_in">boolean</span> hasWidthSize = widthMode != View.MeasureSpec.UNSPECIFIED;
        <span class="keyword">final</span> <span class="built_in">boolean</span> hasHeightSize = heightMode != View.MeasureSpec.UNSPECIFIED;

        <span class="keyword">final</span> <span class="built_in">boolean</span> exactWidth = widthMode == View.MeasureSpec.EXACTLY;
        <span class="keyword">final</span> <span class="built_in">boolean</span> exactHeight = heightMode == View.MeasureSpec.EXACTLY;

        <span class="keyword">final</span> <span class="built_in">int</span> unspecified = makeUnspecifiedSpec();

        <span class="keyword">if</span> (exactWidth &amp;&amp; exactHeight) {
            <span class="comment">// in case of exact calculations for both dimensions let's use default "onMeasure" implementation</span>
            <span class="keyword">super</span>.onMeasure(recycler, state, widthSpec, heightSpec);
            <span class="keyword">return</span>;
        }

        <span class="keyword">final</span> <span class="built_in">boolean</span> vertical = getOrientation() == VERTICAL;

        initChildDimensions(widthSize, heightSize, vertical);

        <span class="built_in">int</span> <span class="variable">width</span> = <span class="number">0</span>;
        <span class="built_in">int</span> <span class="variable">height</span> = <span class="number">0</span>;

        <span class="comment">// it's possible to get scrap views in recycler which are bound to old (invalid) adapter entities. This</span>
        <span class="comment">// happens because their invalidation happens after "onMeasure" method. As a workaround let's clear the</span>
        <span class="comment">// recycler now (it should not cause any performance issues while scrolling as "onMeasure" is never</span>
        <span class="comment">// called whiles scrolling)</span>
        recycler.<span class="built_in">clear</span>();

        <span class="keyword">final</span> <span class="built_in">int</span> stateItemCount = state.getItemCount();
        <span class="keyword">final</span> <span class="built_in">int</span> adapterItemCount = getItemCount();
        <span class="comment">// adapter always contains actual data while state might contain old data (f.e. data before the animation is</span>
        <span class="comment">// done). As we want to measure the view with actual data we must use data from the adapter and not from  the</span>
        <span class="comment">// state</span>
        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; adapterItemCount; i++) {
            <span class="keyword">if</span> (vertical) {
                <span class="keyword">if</span> (!hasChildSize) {
                    <span class="keyword">if</span> (i &lt; stateItemCount) {
                        <span class="comment">// we should not exceed state count, otherwise we'll get IndexOutOfBoundsException. For such items</span>
                        <span class="comment">// we will use previously calculated dimensions</span>
                        measureChild(recycler, i, widthSize, unspecified, childDimensions);
                    } <span class="keyword">else</span> {
                        logMeasureWarning(i);
                    }
                }
                <span class="variable">height</span> += childDimensions[CHILD_HEIGHT];
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    <span class="variable">width</span> = childDimensions[CHILD_WIDTH];
                }
                <span class="keyword">if</span> (hasHeightSize &amp;&amp; <span class="variable">height</span> &gt;= heightSize) {
                    <span class="keyword">break</span>;
                }
            } <span class="keyword">else</span> {
                <span class="keyword">if</span> (!hasChildSize) {
                    <span class="keyword">if</span> (i &lt; stateItemCount) {
                        <span class="comment">// we should not exceed state count, otherwise we'll get IndexOutOfBoundsException. For such items</span>
                        <span class="comment">// we will use previously calculated dimensions</span>
                        measureChild(recycler, i, unspecified, heightSize, childDimensions);
                    } <span class="keyword">else</span> {
                        logMeasureWarning(i);
                    }
                }
                <span class="variable">width</span> += childDimensions[CHILD_WIDTH];
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    <span class="variable">height</span> = childDimensions[CHILD_HEIGHT];
                }
                <span class="keyword">if</span> (hasWidthSize &amp;&amp; <span class="variable">width</span> &gt;= widthSize) {
                    <span class="keyword">break</span>;
                }
            }
        }

        <span class="keyword">if</span> (exactWidth) {
            <span class="variable">width</span> = widthSize;
        } <span class="keyword">else</span> {
            <span class="variable">width</span> += getPaddingLeft() + getPaddingRight();
            <span class="keyword">if</span> (hasWidthSize) {
                <span class="variable">width</span> = Math.<span class="built_in">min</span>(<span class="variable">width</span>, widthSize);
            }
        }

        <span class="keyword">if</span> (exactHeight) {
            <span class="variable">height</span> = heightSize;
        } <span class="keyword">else</span> {
            <span class="variable">height</span> += getPaddingTop() + getPaddingBottom();
            <span class="keyword">if</span> (hasHeightSize) {
                <span class="variable">height</span> = Math.<span class="built_in">min</span>(<span class="variable">height</span>, heightSize);
            }
        }

        setMeasuredDimension(<span class="variable">width</span>, <span class="variable">height</span>);

        <span class="keyword">if</span> (view != <span class="keyword">null</span> &amp;&amp; overScrollMode == ViewCompat.OVER_SCROLL_IF_CONTENT_SCROLLS) {
            <span class="keyword">final</span> <span class="built_in">boolean</span> fit = (vertical &amp;&amp; (!hasHeightSize || <span class="variable">height</span> &lt; heightSize))
                    || (!vertical &amp;&amp; (!hasWidthSize || <span class="variable">width</span> &lt; widthSize));

            ViewCompat.setOverScrollMode(view, fit ? ViewCompat.OVER_SCROLL_NEVER : ViewCompat.OVER_SCROLL_ALWAYS);
        }
    }

    <span class="keyword">private</span> <span class="keyword">void</span> logMeasureWarning(<span class="built_in">int</span> child) {
        <span class="keyword">if</span> (BuildConfig.DEBUG) {
            Log.w(<span class="string">"LinearLayoutManager"</span>, <span class="string">"Can't measure child #"</span> + child + <span class="string">", previously used dimensions will be reused."</span> +
                    <span class="string">"To remove this message either use #setChildSize() method or don't run RecyclerView animations"</span>);
        }
    }

    <span class="keyword">private</span> <span class="keyword">void</span> initChildDimensions(<span class="built_in">int</span> <span class="variable">width</span>, <span class="built_in">int</span> <span class="variable">height</span>, <span class="built_in">boolean</span> vertical) {
        <span class="keyword">if</span> (childDimensions[CHILD_WIDTH] != <span class="number">0</span> || childDimensions[CHILD_HEIGHT] != <span class="number">0</span>) {
            <span class="comment">// already initialized, skipping</span>
            <span class="keyword">return</span>;
        }
        <span class="keyword">if</span> (vertical) {
            childDimensions[CHILD_WIDTH] = <span class="variable">width</span>;
            childDimensions[CHILD_HEIGHT] = childSize;
        } <span class="keyword">else</span> {
            childDimensions[CHILD_WIDTH] = childSize;
            childDimensions[CHILD_HEIGHT] = <span class="variable">height</span>;
        }
    }

    @Override
    <span class="keyword">public</span> <span class="keyword">void</span> setOrientation(<span class="built_in">int</span> orientation) {
        <span class="comment">// might be called before the constructor of this class is called</span>
        <span class="comment">//noinspection ConstantConditions</span>
        <span class="keyword">if</span> (childDimensions != <span class="keyword">null</span>) {
            <span class="keyword">if</span> (getOrientation() != orientation) {
                childDimensions[CHILD_WIDTH] = <span class="number">0</span>;
                childDimensions[CHILD_HEIGHT] = <span class="number">0</span>;
            }
        }
        <span class="keyword">super</span>.setOrientation(orientation);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> clearChildSize() {
        hasChildSize = <span class="keyword">false</span>;
        setChildSize(DEFAULT_CHILD_SIZE);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> setChildSize(<span class="built_in">int</span> childSize) {
        hasChildSize = <span class="keyword">true</span>;
        <span class="keyword">if</span> (<span class="keyword">this</span>.childSize != childSize) {
            <span class="keyword">this</span>.childSize = childSize;
            requestLayout();
        }
    }

    <span class="keyword">private</span> <span class="keyword">void</span> measureChild(RecyclerView.Recycler recycler, <span class="built_in">int</span> position, <span class="built_in">int</span> widthSize, <span class="built_in">int</span> heightSize, <span class="built_in">int</span>[] dimensions) {
        <span class="keyword">final</span> View child;
        <span class="keyword">try</span> {
            child = recycler.getViewForPosition(position);
        } <span class="keyword">catch</span> (IndexOutOfBoundsException e) {
            <span class="keyword">if</span> (BuildConfig.DEBUG) {
                Log.w(<span class="string">"LinearLayoutManager"</span>, <span class="string">"LinearLayoutManager doesn't work well with animations. Consider switching them off"</span>, e);
            }
            <span class="keyword">return</span>;
        }

        <span class="keyword">final</span> RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) child.getLayoutParams();

        <span class="keyword">final</span> <span class="built_in">int</span> hPadding = getPaddingLeft() + getPaddingRight();
        <span class="keyword">final</span> <span class="built_in">int</span> vPadding = getPaddingTop() + getPaddingBottom();

        <span class="keyword">final</span> <span class="built_in">int</span> hMargin = p.leftMargin + p.rightMargin;
        <span class="keyword">final</span> <span class="built_in">int</span> vMargin = p.topMargin + p.bottomMargin;

        <span class="comment">// we must make insets dirty in order calculateItemDecorationsForChild to work</span>
        makeInsetsDirty(p);
        <span class="comment">// this method should be called before any get<span class="label">XxxDecorationXxx() methods</span></span>
        calculateItemDecorationsForChild(child, tmpRect);

        <span class="keyword">final</span> <span class="built_in">int</span> hDecoration = getRightDecorationWidth(child) + getLeftDecorationWidth(child);
        <span class="keyword">final</span> <span class="built_in">int</span> vDecoration = getTopDecorationHeight(child) + getBottomDecorationHeight(child);

        <span class="keyword">final</span> <span class="built_in">int</span> childWidthSpec = getChildMeasureSpec(widthSize, hPadding + hMargin + hDecoration, p.<span class="variable">width</span>, canScrollHorizontally());
        <span class="keyword">final</span> <span class="built_in">int</span> childHeightSpec = getChildMeasureSpec(heightSize, vPadding + vMargin + vDecoration, p.<span class="variable">height</span>, canScrollVertically());

        child.measure(childWidthSpec, childHeightSpec);

        dimensions[CHILD_WIDTH] = getDecoratedMeasuredWidth(child) + p.leftMargin + p.rightMargin;
        dimensions[CHILD_HEIGHT] = getDecoratedMeasuredHeight(child) + p.bottomMargin + p.topMargin;

        <span class="comment">// as view is recycled let's not keep old measured values</span>
        makeInsetsDirty(p);
        recycler.recycleView(child);
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> makeInsetsDirty(RecyclerView.LayoutParams p) {
        <span class="keyword">if</span> (!canMakeInsetsDirty) {
            <span class="keyword">return</span>;
        }
        <span class="keyword">try</span> {
            <span class="keyword">if</span> (insetsDirtyField == <span class="keyword">null</span>) {
                insetsDirtyField = RecyclerView.LayoutParams.class.getDeclaredField(<span class="string">"mInsetsDirty"</span>);
                insetsDirtyField.setAccessible(<span class="keyword">true</span>);
            }
            insetsDirtyField.<span class="built_in">set</span>(p, <span class="keyword">true</span>);
        } <span class="keyword">catch</span> (NoSuchFieldException e) {
            onMakeInsertDirtyFailed();
        } <span class="keyword">catch</span> (IllegalAccessException e) {
            onMakeInsertDirtyFailed();
        }
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> onMakeInsertDirtyFailed() {
        canMakeInsetsDirty = <span class="keyword">false</span>;
        <span class="keyword">if</span> (BuildConfig.DEBUG) {
            Log.w(<span class="string">"LinearLayoutManager"</span>, <span class="string">"Can't make LayoutParams insets dirty, decorations measurements might be incorrect"</span>);
        }
    }
}
</code></pre><p>参考：<a href="http://blog.csdn.net/guxiao1201/article/details/40425231" target="_blank" rel="external">RecyclerView高度随Item自适应</a></p>
<p>2015-9-19</p>
<h1 id="ListView高度">ListView高度</h1><p>在ListView下面有一个Button，ListView设置高度为<code>wrap_content</code>，当ListView高度超出屏幕时，Button就不显示了。<br>解决：<br>给ListView增加</p>
<pre><code><span class="label">android:</span>layout_weight=<span class="string">"1"</span> 
</code></pre><p>2015-9-21</p>
<h1 id="SearchView">SearchView</h1><h2 id="按返回键关闭SearchView">按返回键关闭SearchView</h2><pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>{
    <span class="keyword">if</span> ( searchView != <span class="keyword">null</span> ) {
        <span class="keyword">if</span> (!searchView.isIconified()) {
            searchView.setIconified(<span class="keyword">true</span>);
        } <span class="keyword">else</span> {
            <span class="keyword">super</span>.onBackPressed();
        }
    }
}
</code></pre><p>参考：<a href="http://stackoverflow.com/a/17782575/5315255" target="_blank" rel="external">How do I close a SearchView programmatically?</a></p>
<h2 id="点击外部关闭SearchView">点击外部关闭SearchView</h2><pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setupUI</span><span class="params">(View view)</span> </span>{

    <span class="keyword">if</span>(!(view <span class="keyword">instanceof</span> SearchView)) {

        view.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() {

            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>{
                searchMenuItem.collapseActionView();
                <span class="keyword">return</span> <span class="keyword">false</span>;
            }

        });
    }

    <span class="comment">//If a layout container, iterate over children and seed recursion.</span>
    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) {

        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ((ViewGroup) view).getChildCount(); i++) {

            View innerView = ((ViewGroup) view).getChildAt(i);

            setupUI(innerView);
        }
    }
}
</code></pre><p>参考：<a href="http://stackoverflow.com/a/17591520/5315255" target="_blank" rel="external">how to make searchview loose focus and collapse when clicked elsewhere on activity</a></p>
<p>2015-9-22</p>
<h1 id="Sqlite判断记录是否存在">Sqlite判断记录是否存在</h1><pre><code>Cursor <span class="built_in">cursor</span> = db.query(……);
<span class="keyword">if</span> (<span class="built_in">cursor</span>.moveToNext())
    <span class="keyword">return</span> <span class="keyword">true</span>;
<span class="keyword">else</span>
    <span class="keyword">return</span> <span class="keyword">false</span>;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>之前开发“简算”的时候忘记记录了，有时间补上。。觉得养成记录的习惯比较好。。</p>
<p>2015-8-6 15:07:54</p>
<h1 id="1-词库">1.词库</h1><p>找不到词库，暂时找到一个带音标和释义的考研单词excel（估计是好几年前的大纲词汇），]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android notes]]></title>
    <link href="http://codingbubble.github.io/2015/07/15/Android-notes/"/>
    <id>http://codingbubble.github.io/2015/07/15/Android-notes/</id>
    <published>2015-07-15T03:17:30.000Z</published>
    <updated>2015-07-15T03:27:33.582Z</updated>
    <content type="html"><![CDATA[<h1 id="xxx_cannot_be_resolved_or_is_not_a_field">xxx cannot be resolved or is not a field</h1><p>更改</p>
<pre><code><span class="preprocessor"><span class="keyword">import</span> Android.R;</span>
</code></pre><p>为</p>
<pre><code><span class="preprocessor"><span class="keyword">import</span> your.application.packagename.R;</span>
</code></pre><h1 id="java代码批量初始化按钮">java代码批量初始化按钮</h1><pre><code>Button btn[] = <span class="built_in">new</span> Button[<span class="built_in">len</span>];
<span class="keyword">for</span>(<span class="typename">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++){
    btn[i] = <span class="built_in">new</span> Button(this);
    ……
}
</code></pre><h1 id="java代码中设置控件属性">java代码中设置控件属性</h1><p>使用LayoutParams</p>
<h1 id="隐藏标题栏">隐藏标题栏</h1><pre><code>requestWindowFeature<span class="list">(<span class="keyword">Window</span>.FEATURE_NO_TITLE)</span><span class="comment">;</span>
</code></pre><p>#</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="xxx_cannot_be_resolved_or_is_not_a_field">xxx cannot be resolved or is not a field</h1><p>更改</p>
<pre><code><span class="preprocesso]]>
    </summary>
    
      <category term="Android" scheme="http://codingbubble.github.io/tags/Android/"/>
    
      <category term="Android" scheme="http://codingbubble.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java 去掉小数里多余的0和小数点]]></title>
    <link href="http://codingbubble.github.io/2015/07/04/java-del-num-zero/"/>
    <id>http://codingbubble.github.io/2015/07/04/java-del-num-zero/</id>
    <published>2015-07-04T11:25:35.000Z</published>
    <updated>2015-07-04T12:51:16.023Z</updated>
    <content type="html"><![CDATA[<h1 id="一、将double/String转成整数">一、将double/String转成整数</h1><p>1.</p>
<pre><code><span class="keyword">if</span>( double num % <span class="number">1</span>.<span class="number">0</span> == <span class="number">0</span>){
    long l = (long)<span class="type">Double</span>.parseDouble(num);
    <span class="type">String</span> <span class="literal">result</span> = <span class="type">Long</span>.toString(l);
}
</code></pre><p>2.</p>
<pre><code><span class="keyword">if</span>( double num % <span class="number">1</span>.<span class="number">0</span> == <span class="number">0</span>){
    <span class="type">DecimalFormat</span> df = new <span class="type">DecimalFormat</span>();
    <span class="type">String</span> <span class="literal">result</span> = df.format(num);
}
</code></pre><h1 id="二、去掉小数多余的0">二、去掉小数多余的0</h1><pre><code><span class="built_in">String</span> <span class="built_in">num</span>;
<span class="keyword">if</span>(<span class="built_in">num</span>.indexOf(<span class="string">"."</span>) &gt; <span class="number">0</span>){  
    <span class="built_in">num</span>= <span class="built_in">num</span>.replaceAll(<span class="string">"0+?$"</span>, <span class="string">""</span>);<span class="comment">//去掉多余的0  </span>
    <span class="built_in">num</span>= <span class="built_in">num</span>.replaceAll(<span class="string">"[.]$"</span>, <span class="string">""</span>);<span class="comment">//如最后一位是.则去掉  </span>
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、将double/String转成整数">一、将double/String转成整数</h1><p>1.</p>
<pre><code><span class="keyword">if</span>( double num % <span class="numbe]]>
    </summary>
    
      <category term="Java" scheme="http://codingbubble.github.io/tags/Java/"/>
    
      <category term="数据处理" scheme="http://codingbubble.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Java" scheme="http://codingbubble.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java4Android notes]]></title>
    <link href="http://codingbubble.github.io/2015/05/31/Java4Android-notes/"/>
    <id>http://codingbubble.github.io/2015/05/31/Java4Android-notes/</id>
    <published>2015-05-31T15:13:42.713Z</published>
    <updated>2015-05-31T15:13:42.713Z</updated>
    <content type="html"><![CDATA[<p>Java4Android学习笔记</p>
<h1 id="01_Java考古学">01 Java考古学</h1><ol>
<li>伟大的1970年（前后）<br>（1）1963年，剑桥大学将ALGOL 60语言发展成为CPL（Combined Programming Language）语言。<br>（2）1967年，剑桥大学的Matin Richards对CPL语言进行了简化，产生了BCPL语言。<br>（3）1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，起名为“B语言”。意为将CPL语言煮干，提炼出其精华。他用B语言写出了第一个UNIX操作系统。<br>（4）1973年，B语言也给人“煮”了一下，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，取BCPL第二个字母为名，即C语言。</li>
<li>Sun公司 </li>
</ol>
<ul>
<li>Stanford University Network缩写</li>
<li>“没有竞争就没有创新，而没有创新就没有一切”</li>
<li>最早意识到网络</li>
</ul>
<ol>
<li>上世纪最伟大的程序员——Bill Joy<br>（1）在MIT的BBS上被众多程序员认为是上世纪最伟大的程序员<br>（2）被《财富》杂志誉为网络时代的爱迪生<br>（3）和同伴一起完成了csh，vi，TCP/IP，NFS，JNI，BSD UNIX，Solaris等<br>（4）在1982-2003担任SUN公司首席科学家长达21年。</li>
<li>Java的诞生<br>（1）90年代初，Java前身出现——Oak<br>（2）1992年，Sun成立了一家名为First Person公司，使用Oak语言为时代华纳公司开发一个和有线电视点播相关的项目<br>（3）1994年，Oak被命名为Java。<br>5.Java的发展<br>（1）1995年，Sun正式对外界公开Java，并发布JDK1.0<br>（2）1996年，Sun成立了JavaSoft组织，各大公司纷纷向Sun申请Java许可，包括网景、惠普、IBM、Oracle，甚至微软<br>（3）1998年，Sun公司正式将Java更名为Java2：ME、SE、EE。</li>
</ol>
<h1 id="02_Java创世纪">02 Java创世纪</h1><ol>
<li>什么是编程<br>（1）学会编程可以让你和计算机随意的沟通<br>（2）编程是一种创造性的工作<br>（3）学会编程会让上帝与你同在</li>
<li><p>JDK的安装和配置<br>（1）什么是JDK？<br>Java Development Kit开发工具包<br>（2）安装后配置环境变量：path，classpath<br>计算机-属性-高级系统设置-环境变量-系统变量<br><code>HAVA_HOME</code>：“<code>E:\Software\Java\jdk</code>”<br><code>PATH</code>：末尾加上“<code>;E:\Software\Java\jdk1.8.0_31\bin</code>”<br>或“<code>;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code>”<br><code>CLASSPATH</code>：新建后，输入变量值<code>&quot;.&quot;</code>代表当前目录<br>或“<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code>”<br><code>环境变量</code>：在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。<br>测试：<code>win+R</code>，调出cmd窗口<br>输入：<code>java -version</code>，<code>javac</code></p>
</li>
<li><p>创世纪（Hello World）<br>新手工具：<code>Notepad++</code><br>保存<code>“Ctrl+s”</code></p>
<blockquote>
<p>Hello.java</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Hello World!"</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>编译源代码<code>javac Hello.java</code>，生成一个类文件<code>Hello.class</code>，即编译成功<br>运行类文件<code>java Hello</code><br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B01.png" alt=""></p>
<blockquote>
<p>注意：区分大小写！</p>
</blockquote>
<p>4.什么是编译？<br>（1）源代码——人类可以理解的代码<br>（2）计算机无法理解源代码<br>（3）编译——将源代码转换成计算机可以理解的代码</p>
<h1 id="03_Java基本概念">03 Java基本概念</h1><ol>
<li>什么是环境变量？<br>操作系统中用来指定操作系统运行时必需的一些最基本的参数。<br>通常为一系列的<code>键值对</code>（变量名-变量值）——计算机中存储数据的最基本形式之一。<br>（1）<code>Path</code>——操作系统外部命令搜索路径。<br>凡是想在命令行里执行的命令，其exe文件所在目录必须在path的变量值里（依次搜索path里的目录）<br>（2）<code>Classpath</code>——类文件搜索路径。</li>
<li><code>JDK</code>里有什么？<br>“<code>bin</code>”：使用java需要的所有的命令<br>“<code>include</code>”：C语言程序<br>“<code>lib</code>”：包文件</li>
<li>什么是<code>JRE</code>？<br><code>Java Runtime Environment</code>，Java运行时环境。<br>包括：<br>（1）JVM——Java Virtual Machine，Java虚拟机。提升Java的跨平台性。<br>（2）Java平台核心类文件<br>（3）其他支持文件。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B02.png" alt=""><h1 id="04_Java的变量">04 Java的变量</h1></li>
<li>什么是变量？<br>（1）计算机是一种极度精确的机器<br>（2）要将信息存储在计算机中，必须指明信息存储的位置和所需的内存空间<br>（3）在Java编程语言当中，使用声明语句完成上述任务<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B03.png" alt=""></li>
<li>变量的声明<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B04.png" alt=""></li>
<li>变量的赋值<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B05.png" alt=""></li>
<li>变量的命名规范：<br>变量命名语法规范——合法<br>（1）以字母、下划线、美元符<code>$</code>开头<br>（2）后面跟字母、下划线、美元符<code>$</code>、数字<br>（3）Java变量名没有长度限制<br>（4）对大小写敏感<br>驼峰命名法（骆驼命名法）——合理<br>（1）变量名应用有意义的英文单词<br>（2）变量名若只有1个单词，则所有字母小写<br>（3）………………多个单词，从第2个单词开始首字母大写<br>合法命名：Password，last_word，$abc，_ref<br>正确命名：password，lastName</li>
</ol>
<h1 id="05_Java的基本数据类型">05 Java的基本数据类型</h1><ol>
<li>布尔型变量boolean</li>
</ol>
<ul>
<li>适用于逻辑运算，一般用于程序流程控制</li>
<li>在Java中的boolean类型只有2种取值可能：true，false</li>
</ul>
<ol>
<li>字符型char</li>
</ol>
<ul>
<li>单引号，1个字符：char c = ‘a’;</li>
<li><p>使用Unicode字符集<br>为每种语言的每个字符设定了统一且唯一的二进制码<br>（1）满足了跨语言文本转换和处理的需求<br>（2）在互联网中扮演着非常重要的角色<br>（3）使用数字0-0x10FFFF表示字符<br>（4）最多允许有1114112个字符。</p>
<ul>
<li><p>Unicode字符集中一个英文字符与一个中文字符所占空间大小一样，故字符型变量可      以存储汉字，如</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = ‘中’;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>合法。<br>（ASCII字符集American Standard Code for Information Interchange<br>标准ASCII码使用7位2进制数来表示字符，可表示所有的数字、大小写字母及一些常见符号<br>）<br>乱码出现的原因：存、取字符的字符集不同。（NPP++用ANSI即可）</p>
<pre><code><span class="comment"><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestChar</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> c = <span class="string">'中'</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><ol>
<li>数值型变量<br>类型    占用空间    表数范围<br>byte        1B            -128~127<br>short    2B            -215~215-1<br>int        4B            -231~231-1<br>long        8B            -263~263-1</li>
</ol>
<ul>
<li>Java整型常量有3种表示形式：十进制、八进制0、十六进制0x</li>
<li>整型常量默认为int</li>
<li>声明long型常量可以后加’l’或’L’，如 long l = 3L;</li>
</ul>
<ol>
<li>浮点型<br>类型    占用空间    表数范围<br>float        4B            -3.403E38~3.403E38<br>double    8B            -1.798E308~1.798E308</li>
</ol>
<h1 id="06练习课（1）">06练习课（1）</h1><p>1.创建一个java源文件，命名为Exerc11.java。在主函数中创建一个boolean类型的变量，并尝试为这个变量赋值（true，false，0），并将这个变量的值打印出来。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Exerc11&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String args[])&#123;</span><br><span class="line">		<span class="keyword">boolean</span> bt = <span class="keyword">true</span>;</span><br><span class="line">		System.out.<span class="keyword">println</span>(bt);</span><br><span class="line">		<span class="keyword">boolean</span> bf = <span class="keyword">false</span>;</span><br><span class="line">		System.out.<span class="keyword">println</span>(bf);</span><br><span class="line">		<span class="keyword">boolean</span> b0 = <span class="number">0</span>;</span><br><span class="line">		System.out.<span class="keyword">println</span>(b0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.创建一个Java源文件，命名为Exerc12.java。主函数中创建一个char类型变量，尝试为其赋值（中、英文字符），并打印。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Exerc12</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> cc = <span class="string">'字'</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(cc);</span><br><span class="line">		<span class="keyword">char</span> ce = <span class="string">'e'</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(ce);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.创建一个Java源文件，命名为Exerc13.java。主函数中为每一种数值型创建一个变量，并赋值，然后进行各种加减乘除运算。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Exerc13</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">short</span> s = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">long</span> l = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">float</span> f = <span class="number">0.1</span>F;</span><br><span class="line">		<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//	i = l;</span></span><br><span class="line">	<span class="comment">//	int j = 0.5*10;</span></span><br><span class="line">		<span class="keyword">byte</span> k = (<span class="keyword">byte</span>)(b + <span class="number">200</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>笔记：<br>1.字面量（整数都是int，小数都是double）<br>2.强制类型转换 加括号<br>3.数值型类型表数范围关系：<br>byte&lt;short&lt;int&lt;long&lt;double<br>一次运算所得结果的类型取决于操作数中范围最大的类型。</p>
<h1 id="07运算符与表达式">07运算符与表达式</h1><ol>
<li>运算符的分类<br>（1）算术运算符：+，—，*，/，%，++，——<blockquote>
<p>int a = 3/2;        //1<br>double b = 3/2;        //1.0<br>double c = 3/2.0;    //1.5</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">division</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args [])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">3</span>/<span class="number">2</span>;		<span class="comment">//1</span></span><br><span class="line">		System.<span class="keyword">out</span>.println(a);</span><br><span class="line">		<span class="keyword">double</span> b = <span class="number">3</span>/<span class="number">2</span>;		<span class="comment">//1.0</span></span><br><span class="line">		System.<span class="keyword">out</span>.println(b);</span><br><span class="line">		<span class="keyword">double</span> c = <span class="number">3</span>/<span class="number">2.0</span>;	<span class="comment">//1.5</span></span><br><span class="line">		System.<span class="keyword">out</span>.println(c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>（2）关系运算符：&gt;，&lt;，&gt;=，&lt;=，==，!=<br>运算结果为boolean型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestRelationalOperators</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">		boolean b = i == j;</span><br><span class="line">		System.<span class="keyword">out</span>.println(b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行输出b，结果为false<br>（3）布尔逻辑运算符：结果为true，false。</p>
<blockquote>
<p>!    逻辑非<br> &amp;    逻辑与（a&amp;b，a、b均判断）<br> |    逻辑或<br> ^    逻辑异或<br>&amp;&amp;    短路与（a&amp;&amp;b，若a假，则无需判断b）<br> ||    短路或（a||b，若a真，则无需判断b）</p>
</blockquote>
<p>（4）位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;<br>（5）赋值运算符：=<br> 扩展赋值运算符：+=，—=，*=，/=<br>（6）字符串联接运算符：+</p>
<ol>
<li>各种运算符的使用方法</li>
<li>什么是表达式？<br>表达式的值：对表达式中操作数进行运算<br>表达式的值的数据类型：即为表达式的类型<h1 id="08分支语句">08分支语句</h1>程序运行流程的分类：顺序、分支、循环 结构。</li>
<li>if…else…<br>①</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔类型表达式）&#123;</span><br><span class="line">语句一；</span><br><span class="line">语句二；</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  ②</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔类型表达式）&#123;</span><br><span class="line">语句一；</span><br><span class="line">语句二；</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">语句</span><br><span class="line">……</span><br><span class="line">&#125;		<span class="comment">//else可无。</span></span><br></pre></td></tr></table></figure>
<p>  ③</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔类型表达式）&#123;</span><br><span class="line">语句一；</span><br><span class="line">语句二；</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">（此<span class="keyword">else</span>可无）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestIf</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"i的值等于10"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; <span class="number">12</span>)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"i的值大于5，小于12"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式：<span class="keyword">byte</span>，<span class="keyword">short</span>，<span class="keyword">int</span>，<span class="keyword">char</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>：</span><br><span class="line">语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">break</span>；</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>：</span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line"><span class="keyword">break</span>；</span><br><span class="line">……</span><br><span class="line"><span class="keyword">case</span> 常量n：</span><br><span class="line">语句n；</span><br><span class="line"><span class="keyword">break</span>；</span><br><span class="line">[<span class="keyword">default</span>：</span><br><span class="line">默认语句；</span><br><span class="line"><span class="keyword">break</span>；]		<span class="comment">//default可选</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：若没有break，则匹配的case后续case都会直接输出。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestSwitch</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">switch</span>(c)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">'b'</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">'c'</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">'a'</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">'d'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="09练习课（2）">09练习课（2）</h1><p>目标：熟悉if…else…结构的使用方法。</p>
<ol>
<li>将学生的分数按照标准分为优、良、中、差4个级别。<br>（1）创建一个名为Exerc21的类<br>（2）在Exerc21类中加入主函数<br>（3）在主函数中定义一个整型变量，用于表示学生的分数<br>（4）使用if…else…结构对分数进行分级。<br>分析：还有2种情况，大于100，小于0</li>
</ol>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> Exerc21&#123;</span><br><span class="line">	public static void main(String <span class="keyword">args</span>[])&#123;</span><br><span class="line">		double <span class="keyword">score</span> = 5.5;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">score</span> &lt; 0 || <span class="keyword">score</span> &gt; 100)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"错误"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">score</span> &gt; 0 &amp;&amp; <span class="keyword">score</span> &lt; 60)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"不及格"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">score</span> &gt;= 60 &amp;&amp; <span class="keyword">score</span> &lt; 90)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"及格"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"优秀"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>猜拳游戏<br>（1）创建一个名为Exerc22的类<br>（2）在Exerc22类中加入主函数<br>（3）在主函数中定义2个char类型变量，分别代表2个玩家的出拳<br>（4）使用if…else…结构对结果进行判断。</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Exerc22</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> a = <span class="string">'D'</span>;</span><br><span class="line">		<span class="keyword">char</span> b = <span class="string">'B'</span>;</span><br><span class="line">		<span class="keyword">if</span> ( a &lt; <span class="number">65</span> || a &gt; <span class="number">67</span> || b &lt; <span class="number">65</span> || b &gt; <span class="number">67</span>)&#123;  <span class="comment">//直接用ASCII判断（老师是一个个比较）</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"错误"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( a &gt; b )</span></span>&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"a胜"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( a &lt; b )</span></span>&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"b胜"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"平"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="10循环语句">10循环语句</h1><ol>
<li>for循环<br>和c一样：</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span> ; <span class="built_in">i</span> &lt; <span class="number">10</span> ; <span class="built_in">i</span>++)<span class="cell">&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">testFor</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"准备进入循环语句"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"循环语句结束"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>while循环<br>和c一样，while括号里为布尔型：</li>
</ol>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span><span class="comment">( i &lt; 10)</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">testWhile</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(i);</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="11练习课（3）">11练习课（3）</h1><p>目标：熟悉Java中的for循环使用方法。</p>
<ol>
<li>打印出100-200之间的所有素数——只能被1和自己整除。<br>步骤：<br>（1）定义一个类，名为TestPrimeNumber<br>（2）在类中定义主函数<br>（3）用for循环打印出所有在100-200间的数字<br>（4）在for循环中，每当循环执行一次，就判断循环变量的值是否为素数。若是，则打印当前值：<br>①判断n是否为素数，首先用2除n，若除不尽，再用3除n，以此类推，若从2     到n-1都无法整除n，则n为素数——2个for循环——设计一个标志boolean b =true;     当整除时令b=false;<br>②不能被2-√2间的每一个数整除，则为素数</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestPrimeNumber</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span> ; i &lt;= <span class="number">200</span> ; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> j;</span><br><span class="line">			<span class="keyword">for</span>(j = <span class="number">2</span> ; j &lt;= Math.sqrt(i) ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">break</span>;	</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(i % j != <span class="number">0</span>)</span><br><span class="line">				System.<span class="keyword">out</span>.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用boolean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestPrimeNumber</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span> ; i &lt;= <span class="number">200</span> ; i++)&#123;</span><br><span class="line">			boolean b = <span class="keyword">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span> ; j &lt;= Math.sqrt(i) ; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">					b = <span class="keyword">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;	</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(b)</span><br><span class="line">				System.<span class="keyword">out</span>.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在命令行中打印出如下图形：<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B06.png" alt=""><br>步骤：<br>（1）定义一个类，名为TestTriangle<br>（2）在类中定义一个主函数<br>（3）使用for循环打印4行，每行1个“<em>”<br>（4）打印4行，每行4个“</em> ”<br>（5）打印4行，第1行有1个“<em> ”，第2行有2个“</em> ”，以此类推<br>（6）在打印“* ”前先打印“ ”，第1行3个空格，第2行2个空格，即4-行数，以此类推。</li>
</ol>
<p>作业：（在论坛）</p>
<ol>
<li>想办法优化1中的TestPrimeNumber.java程序。<br>笔记：TestPrimeNumberOptimize.java从2~√2依次对n求余，若不为0则为素数。Java中开根号：double m=Math.sqrt(n);<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B07.png" alt=""></li>
<li>打印出任意行的与2中类似的图形。<br>笔记：TestTriangleOptimize.java<br>（1）在命令行输入“ctrl+c”跳出当前运行的程序<br>（2）输入一个整数，为星号的行数。<br>使用Scanner<br>使用时需要引入包import java.util.Scanner;<br>首先定义Scanner对象<br>Scanner sc = new Scanner(System.in);<br>如果要输入整数，则 int n = sc.nextInt();<br>String类型的，则String temp = sc.next();<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B08.png" alt=""><h1 id="12面向对象基础_1">12面向对象基础_1</h1></li>
<li>什么是面向对象？<br>（1）面向对象是一种编程方法<br>（2）…………………思维方式<br>（3）…………不是一种编程语言</li>
<li>应该如何学习面向对象？<br>（1）掌握一门面向对象语言的语法<br>（2）掌握面向对象的思维方式<br>（3）熟悉面向对象设计原则：消除重复代码<br>（4）掌握面向对象设计模式：什么场合用什么方法</li>
<li>什么是面向对象思维方式？<br>（1）首先确定谁来做，其次确定怎么做<br>（2）首先考虑整体，其次考虑局部<br>（3）首先考虑抽象，其次考虑具体：越抽象越容易。<br>总结：</li>
<li>不要以为掌握了一门面向对象语言就是掌握了面向对象</li>
<li>习惯于将面向对象与现实世界做比较</li>
<li>面向对象终极目标：减少重复代码。<h1 id="13面向对象基础_2">13面向对象基础_2</h1></li>
<li>创建类的方法</li>
</ol>
<ul>
<li>定义类</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span><br><span class="line"></span>&#123;</span><br><span class="line">属性；	<span class="comment">//成员变量，描述类的状态</span></span><br><span class="line">方法；	<span class="comment">//成员方法（函数），描述类的行为</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>类的表示方法<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B09.png" alt=""><br>一个矩形代表一个类<br>如果一个方法（函数）中有与成员变量同名的局部变量，该方法中对这个变量名的访问是局部变量，而不再是成员变量</li>
</ul>
<ol>
<li>创建对象的方法<br>格式：<code>类名 对象名 = new 类名()</code>    对象为引用数据类型。<br>如：  <code>Dog  dog = new  Dog();</code><br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B010.png" alt=""><br>堆内存（圆）存储对象的本体，栈内存（矩形）存放对象的引用。<br>类是抽象的，对象是具体的。</li>
<li>对象和对象的引用<br>当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器会自动扫描对象的动态内存区，把没有引用的对象作为垃圾收集起来并释放——调用System.gc( )。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</li>
</ol>
<h1 id="14面向对象基础_3">14面向对象基础_3</h1><ol>
<li>对象的使用方法<br>使用对象调用变量和函数：<br>1、<code>对象.变量</code>        （如：d.name = “大黄”;）<br>2、<code>对象.函数()</code> （如： d.jump( );）</li>
<li>生成多个对象</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog d1 = <span class="keyword">new</span> Dog( );</span><br><span class="line">Dog d2 = <span class="keyword">new</span> Dog( );</span><br></pre></td></tr></table></figure>
<p>凡是见“new”就在堆内存中生成一个对象，栈内存中2个引用。</p>
<ol>
<li>匿名对象的使用<br>可以不定义对象的引用名称，而直接调用这个对象的方法。这样的对象叫做匿名对象。如：<code>new Dog().jump();</code><br>没有对象名——一次性的。<h1 id="15面向对象基础_4">15面向对象基础_4</h1>1.函数的重载</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funA</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(“没有参数的funA函数”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funA</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(“拥有一个整型参数的funA函数”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funA</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">double</span> d)</span></span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(“拥有<span class="number">2</span>个参数的funA函数 ”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重载的定义：<br>（1）多个函数在同一个类中<br>（2）相同函数名<br>（3）参数列表不同。<br>应用时，</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[] )</span></span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A( );</span><br><span class="line">a.funA( );</span><br><span class="line">a.funA(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>构造函数的作用<br>构造函数不是成员函数。<br>（1）没有返回值类型的定义<code>A(){}</code><br>（2）名字必须和类名相同 （若自己未写上，编译器会自动加上该类的一个空构造函数——java类至少存在一个构造函数）<br>（3）调用<code>A a = new A();</code><br>（4）允许重载。<br>作用：<br>简化为对象的成员变量赋初始值的步骤——在创建对象的过程中对对象的一些属性初始化（对象的一些与生俱来的属性不能通过创建对象后设定初始值的形式来初始化）。<br>（笔记：或许可以理解为类没有参数，构造函数可以有参数，通过函数的参数初始化代入？）<br>注：<br>如果类中已有含参数的构造函数，编译器就不会自动添加无参数的构造函数。<br>调用的时候要写上参数<code>A a = new A(参数1，参数2…);</code><h1 id="16_this的使用方法">16 this的使用方法</h1></li>
<li>使用this调用成员变量和成员函数</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println( <span class="string">" my name is "</span> + <span class="keyword">this</span>.name );	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处“this”可省略.如果”talk”的参数里有“name”变量那么此处“this”不可省略，否则会与成员变量“name”混淆。</p>
<ol>
<li>使用this调用构造函数<br>对this的调用必须是构造函数中的第一个语句。且不能在一个构造函数里调用多个this函数<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B011.png" alt=""></li>
</ol>
<h1 id="17_static关键字的作用">17 static关键字的作用</h1><ol>
<li>静态成员变量的语法特点</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> name;</span><br></pre></td></tr></table></figure>
<p>可以直接使用类名来调用成员变量（<strong>不用</strong>“<code>对象名.成员变量</code>”）<br>类层次的变量，属于这一个类而不是单个对象，静态成员变量的值只有一份</p>
<ol>
<li>静态函数的语法特点</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;……&#125;</span><br></pre></td></tr></table></figure>
<p>也可以直接用类名调用<br>静态函数类不能使用非静态的的成员变量<br>静态函数中不能使用this </p>
<ol>
<li>静态代码块的语法特点</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没名字<br>在装载这个类的时候执行静态代码块，<strong>无需调用</strong><br>作用：为静态成员变量赋初始值。<br>（实际用的较少）</p>
<h1 id="18_继承初步">18 继承初步</h1><p>面向对象最重要的3个基本特征：继承、封装、多态。</p>
<ol>
<li>什么是继承？<br>面向对象里，继承是一个类得到了另一个类当中的成员变量和成员方法。<br>只能继承成员变量和成员函数，不能继承构造函数。<br>java只支持单继承，不允许多继承：1个子类只能继承1个父类（C++可继承多个父类）——提供多重继承机制（接口机制）。</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="comment">//不仅可以直接继承父类的成员变量和函数还能继续定义自己的成员变量及函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在子类的构造函数中，必须先调用父类的构造函数（若未主动调用，编译器会自动加上【<code>super(参数);</code>只能在第1条语句】来自动调用）。 即不能继承但可调用父类构造函数。<br>子类通过super访问父类的内部引用：<br>（1）<code>super([参数列表])</code>调用父类的构造函数；<br>（2）<code>super.父类成员名</code>调用父类成员</p>
<blockquote>
<p>注：<br>在创建子类的对象时，Java虚拟机首先执行父类的构造方法，然后再执行子类的构造方法。<br>若子类的构造函数没有显式调用父类的构造函数，则系统默认调用父类的无参构造函数；若父类定义了非空构造函数则系统不再有默认的无参构造函数。<br>若父类没有无参构造函数，创建子类时若未显式调用父类的构造函数则代码不能编译。</p>
</blockquote>
<ol>
<li>为什么要使用继承？<br>减少类定义的重复代码<br>共同的代码只需在父类修改即可<br>继承是在一些比较一般的类的基础上构造、建立和扩充新类的最有效的手段。</li>
<li>继承的基本语法特点。<h1 id="19_子类实例化过程">19 子类实例化过程</h1>笔记见上。</li>
</ol>
<h1 id="20_函数的复写">20 函数的复写</h1><ol>
<li><p>函数的复写/覆盖/重写（override）<br>（1）在具有父子关系的2个类当中<br>（2）父类和子类各有1个函数，这2个函数的定义（返回值类型、函数名、参数列表）完全相同</p>
<blockquote>
<p>注意：重载和复写的区别<br>成员变量的隐藏（override）：子类成员变量与父类成员变量同名。</p>
</blockquote>
</li>
<li><p>使用super调用父类的成员函数和成员变量<br>作用和this类似</p>
</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.复写的父类成员函数</span><br></pre></td></tr></table></figure>
<h1 id="21_对象的转型">21 对象的转型</h1><ol>
<li>对象的向上转型——将子类的对象赋值给父类的引用（必须有继承关系）</li>
</ol>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Student s</span> = new Student();	<span class="comment">//子类</span></span><br><span class="line"><span class="constant">Person p</span> = s;	<span class="comment">//父类</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> p = <span class="keyword">new</span> <span class="type">Student</span><span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<p>子类→父类<br>对象→引用<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/Java4Android%E7%AC%94%E8%AE%B012.png" alt=""></p>
<blockquote>
<p>注：<br>（1）一个引用能够调用哪些成员（变量和函数），取决于这个引用的类型。<br>（2）一个引用调用的是哪一个方法，取决于这个引用所指向的对象。<br>（3）向上转型不可能失败，一定会成功，只要是继承关系。</p>
</blockquote>
<ol>
<li>对象的向下转型——将父类的对象赋值给子类的引用</li>
</ol>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Student s1</span> = new Student();</span><br><span class="line"><span class="constant">Person p</span> = s1;		<span class="comment">//前2句即【Person p = new Student();】先向上转型</span></span><br><span class="line"><span class="constant">Student s2</span> = (Student)p;		<span class="comment">//（强制类型转换）向下强制转型</span></span><br></pre></td></tr></table></figure>
<h1 id="22_面向对象应用">22 面向对象应用</h1><p>被客户不断变化的需求“折磨”<br>用面向对象适应客户需求的变化<br>不同类的相同功能函数的<strong><em>重复代码</em></strong>——如何减少？<br>父类——n个子类继承</p>
<h1 id="23_抽象类和抽象函数">23 抽象类和抽象函数</h1><ol>
<li>什么是抽象函数<br>只有函数的定义，没有函数体的函数。</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abstract void <span class="function"><span class="title">fun</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>
<p>往往用来表征我们在对问题领域进行分析、设计中得出的抽象概念，是对一系列看上去不同，但本质上相同的具体概念的抽象。</p>
<ol>
<li>什么是抽象类<br>使用abstract定义的类被称为抽象类——（基类）<br>（1）抽象类不能够生成对象——无法实例化<br>（2）若一个类中含有抽象函数，那么这个类必须被声明为抽象类<br>（3）若一个类中没有抽象函数，那么这个类也可以被声明为抽象类（因为某种原因不想让别人生成此类的对象时，可把此类声明为抽象类）<br>（4）实现多态——天生被子类继承→子类可以生成对象——复写（抽象类的子类需提供父类中所有抽象方法的实现，否则子类也必须是抽象类）<br>（5）主要用来进行类型隐藏。</li>
<li>抽象类可以有构造函数吗？<br>24为什么用抽象类<br>25包和访问权限_1<br>26包和访问权限_2<br>27包和访问权限_3<br>28接口的基本语法<br>29接口的应用<br>30 Java当中的异常_1<br>31 Java当中的异常_2<br>32 Java当中的IO_1<br>33 Java当中的IO_2<br>34 Java当中的IO_3<br>35内部类和匿名内部类<br>36 Java当中的线程_1<br>37 Java当中的线程_2<br>38 Java当中的线程_3<br>39深入同步语法<br>40 Java当中的数组<br>41类集框架_1<br>42类集框架_2<br>43类集框架_3<br>44 equals函数的作用<br>45 hashCode()与toString()<br>46开发工具之Eclipse_1<br>47开发工具之Eclipse_2<br>48开发工具之Eclipse_3<br>49开发工具之Eclipse_4<br>50综合练习_1<br>51综合练习_2<br>52综合练习_3定义输入输出格式<br>53综合练习_4</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java4Android学习笔记</p>
<h1 id="01_Java考古学">01 Java考古学</h1><ol>
<li>伟大的1970年（前后）<br>（1）1963年，剑桥大学将ALGOL 60语言发展成为CPL（Combined Programming Lan]]>
    </summary>
    
      <category term="Android" scheme="http://codingbubble.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://codingbubble.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://codingbubble.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Html学习笔记]]></title>
    <link href="http://codingbubble.github.io/2015/05/21/Html-notes-1/"/>
    <id>http://codingbubble.github.io/2015/05/21/Html-notes-1/</id>
    <published>2015-05-21T07:18:13.000Z</published>
    <updated>2015-06-11T14:33:13.549Z</updated>
    <content type="html"><![CDATA[<p>学习课程由<a href="https://www.shiyanlou.com/" target="_blank" rel="external">实验楼</a>、<a href="http://www.jisuanke.com/course" target="_blank" rel="external">计蒜客</a>和<a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a>提供</p>
<h1 id="web前端开发基础">web前端开发基础</h1><p>学习web前端开发基础技术需要掌握：HTML、CSS、JavaScript语言。这三门技术都是用来实现什么的呢：</p>
<ol>
<li><code>HTML</code>是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li>
<li><code>CSS样式</code>是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li>
<li><code>JavaScript</code>是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。<h2 id="HTML">HTML</h2>什么是HTML<ul>
<li>HTML：超文本标记语言 (Hyper Text Markup Language) </li>
<li>超文本：页面内可以包含图片、链接、甚至音乐等非文字元素</li>
<li>使用标记标签来描述网页</li>
<li>文件后缀名是(.html)<h2 id="CSS">CSS</h2>CSS是能够真正做到网页表现与内容分离的一种样式设计语言。CSS 是指层叠样式表 （Cascading Style Sheets）的缩写，因为其也并没有明确逻辑性的规划，我们平时也不视其为一种编程语言。通过CSS定义的样式表，HTML 元素如何显示可以更为完毕的被定义。<br>相对于传统纯HTML的表现而言，结合CSS后的网页中的对象可以进行像素级的精确控制的排版。<br>由于允许同时控制多重页面的样式和布局，CSS 可以称得上 WEB 设计领域的一个突破。作为网站开发者，你能够为每个 HTML 元素定义样式，并将之应用于你希望的任意多的页面中。如需进行全局的更新，只需简单地改变样式，然后网站中的所有元素均会自动地更新。<h3 id="CSS样式">CSS样式</h3><h1 style="color:red;">我在学CSS</h1><br>其中<code>color:red</code>这样的CSS语句就叫做CSS样式。</li>
</ul>
</li>
</ol>
<ul>
<li><p>字体大小</p>
<pre><code><span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">16px</span></span></span>;
</code></pre></li>
<li><p>字体加粗</p>
<pre><code><span class="rule"><span class="attribute">font-weight</span>:<span class="value">bold</span></span>;
</code></pre></li>
<li>背景颜色  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value">black</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意</code> 每个CSS样式之间要用<code>;</code>隔开<br>如：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span> <span class="attribute">style</span>=<span class="value">"color:red;font-size:16px;"</span>&gt;</span>你好<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>显示为：</p>
<p></p><p style="color:red;font-size:16px;">你好</p><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;<span class="tag">body</span> style = <span class="string">"background-color:powderblue"</span>&gt;</span><br><span class="line">        &lt;<span class="tag">h1</span> style = <span class="string">"text-align:center"</span>&gt;<span class="tag">h1</span>:show some founctions of style&lt;/h1&gt;</span><br><span class="line">        &lt;<span class="tag">p</span> style = <span class="string">"text-align:center;font-family:verdana;color:gray"</span>&gt;verdana and gray&lt;/p&gt;</span><br><span class="line">        &lt;<span class="tag">p</span> style = <span class="string">"font-family:time;color:green"</span>&gt;<span class="tag">time</span> and green&lt;/p&gt;</span><br><span class="line">        &lt;<span class="tag">p</span> style = <span class="string">"font-size:40px"</span>&gt;the size of these words is <span class="number">40</span>pixels&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p>
<h3 id="常用CSS特性">常用CSS特性</h3><ul>
<li>文字的水平对齐：text-align<br>指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。<br>属性值：<br><code>left</code>（左侧对齐）、<code>right</code>（右侧对齐）、<code>center</code>（居中）和<code>justify</code>（两端对齐）。</li>
<li>文字的颜色：<code>color</code><br>元素的前景色（在 HTML表现中，就是元素文本的颜色）<br>颜色的写法有3种：英文名、16进制#RRGGBB、RGB颜色</li>
<li>背景颜色：<code>background-color:颜色;</code><br>为元素设置一种纯色，填充元素的内容、内边距和边框区域，扩展到元素边框的外边界（但不包括外边距）。如果边框有透明部分（如虚线边框），会透过这些透明部分显示出背景色。</li>
<li>背景图片：<code>background-image:url(&#39;图片地址&#39;);</code><br>背景图片（background-image）的设置可以使得元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。</li>
<li>背景图片位置：<code>background-position:竖直 水平;</code><br>默认地，背景图像位于元素的左上角[left top]，并在水平和垂直方向上重复；而当背景图片位置（background-position）被设置后，背景图片的开始位置就可以不再使用默认的左上角了。<br>竖直方向：center、top、bottom<br>水平方向：center、left、right<br>也可以用30px 20px这样的形式，设置背景图片相对对象上沿、左沿的开始位置的具体数值。</li>
</ul>
<p>例如：将对象设置成有蓝色背景，加某个叫sky的图片做背景并且水平、垂直方向都居中的时候：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">p</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value">blue</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">url</span>(<span class="string">'./sky.jpg'</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-position</span>:<span class="value"> center center</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>边框：<code>border:边框宽度 边框样式 边框颜色;</code><br>边框宽度用数字加单位的形式（如1px）<br>边框样式包括solid（实线）、dotted（点）、dashed（虚线）和double（双线）等<br>边框颜色和之前文字颜色、背景颜色的定义方式相同。</li>
<li>圆角：<code>border-radius:弧度半径;</code><br>定义的实际上是一个边框角上的弧度半径。<h3 id="练习">练习</h3></li>
</ul>
<ol>
<li><p>制作一张海报</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>一张海报<span class="tag">&lt;/<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span> <span class="attribute">style</span>=<span class="value">"text-align:center;background-image:url('http://img2.3lian.com/2014/f3/71/d/75.jpg');background-position:top center;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">style</span>=<span class="value">"color:red;"</span>&gt;</span>保护海洋<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>制作按钮</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">style</span>=<span class="value">"font-size:24px;line-height:48px;color:white;background-color:#2ECC71;border:3px solid silver;border-radius:10px;"</span>&gt;</span>系统按钮<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="CSS的盒子模式">CSS的盒子模式</h3><p>在网页设计中常听的属性名：元素本身（content）、内边距（或称“填充”，padding）、边框（border）、外边距（margin）， CSS盒子模式都具备这些属性。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/20150527%E7%9B%92%E5%AD%90%E6%A8%A1%E5%BC%8F.png" alt=""><br>内容（content）是盒子里装的东西；内边距（padding）类似“填充物”，就是怕盒子里装的东西（贵重的）损坏而添加的泡沫或者其它抗震的辅料；边框（border）就是盒子本身；外边距（margin）说明盒子摆放的时候不能全部堆在一起，要留一定空隙保持通风。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/20150527%E7%9B%92%E5%AD%90%E5%A4%96%E9%97%B4%E8%B7%9D.png" alt=""><br>在网页设计上，内容常指文字、图片等元素，也可以是小盒子（DIV嵌套），与现实生活中盒子不同的是，现实生活中的东西一般不能大于盒子，否则盒子会被撑坏的，而CSS盒子具有弹性，里面的东西大过盒子本身最多把它撑大，但它不会损坏的。<br>填充padding只有宽度属性，可以理解为生活中盒子里的抗震辅料厚度，而边框border有大小和颜色之分，我们又可以理解为生活中所见盒子的厚度以及这个盒子是用什么颜色材料做成的，边界margin就是该盒子与其它东西要保留多大距离。<br>每个HTML标记都可看作一个盒子； 每个盒子都有：border、padding、margin属性； 每个属性都包括四个部分：上、右、下、左；这四部分可同时设置，也可分别设置。</p>
<h2 id="Javascript">Javascript</h2><p>Javascript是用来控制网页的动作与跳转的编程语言。<br>Javascript是世界上最流行的脚本语言之一，也是一种轻量级的<code>编程语言</code>。因为它早先在Web浏览器中被广泛采纳，并表现差强人意，大家曾称它为“属于Web的语言”。<br>Javascript 语言的表达能力较为完美，我们可以通过它实现大部分其它编程语言所能表达的逻辑；具体应用在Web端时，它可以实现对HTML文档的写入（改变标签、内容和样式），对用户诸如点击一类的行为作出响应，也可以高效的完成一些相对简单的验证、计算工作。<br>请注意，JavaScript 与 Java 虽然名字相似甚至带有误导性，但是两种完全不同的语言，无论在概念还是设计上。 Java为由Sun公司发明的不被视为脚本语言的编程语言。<br> ECMA-262 是 JavaScript 标准的官方名称。 JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。<br> 练习：<br> 打开网页时弹出欢迎语句的对话框</p>
<pre><code><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="lisp">alert<span class="list">(<span class="string">"欢迎光临bubble's blog"</span>)</span><span class="comment">;</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><h1 id="HTML文件结构">HTML文件结构</h1><p><img src="http://7xj9f8.com1.z0.glb.clouddn.com/BaiduShurufa_2015-5-22_12-27-35.png" alt=""><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span> //声明这个网页是使用HTML规范的</span><br><span class="line">    <span class="tag">&lt;<span class="title">html</span>&gt;</span>  //根标签，所有的网页标签都在<span class="tag">&lt;<span class="title">html</span>&gt;</span><span class="tag">&lt;/<span class="title">html</span>&gt;</span>中</span><br><span class="line">        <span class="tag">&lt;<span class="title">head</span>&gt;</span>  //定义文档的头部，它是所有头部元素的容器，用于网页的基本信息设置</span><br><span class="line">            <span class="tag">&lt;<span class="title">title</span>&gt;</span>.....<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">body</span>&gt;</span>  //网页的主要内容，标签中的内容会在浏览器中显示出来</span><br><span class="line">            <span class="tag">&lt;<span class="title">p</span>&gt;</span>.....<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="HTML文档">HTML文档</h1><p>HTML 文档也被称为网页，HTML 文档包含<code>HTML 标签</code>和<code>纯文本</code>，Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML标签（相当于是隐藏的格式描述），而是使用标签来解释页面的内容。</p>
<h1 id="HTML代码注释">HTML代码注释</h1><p>语法：</p>
<pre><code><span class="comment">&lt;!--注释文字 --&gt;</span>
</code></pre><h1 id="HTML标签">HTML标签</h1><p>HTML与其它标记语言一样，通过一套标记标签 (markup tag) 来描述网页。即网页都是由html标签组成的。</p>
<ol>
<li>HTML 标签是由英文尖括号<code>&lt;</code>和<code>&gt;</code>包围的关键词，比如<code>&lt;html&gt;</code>；</li>
<li>标签通常是成对出现的，比如<code>&lt;p&gt;</code>和<code>&lt;/p&gt;</code>，其中第一个标签是<code>开始标签（开放标签）</code>，第二个标签是<code>结束标签（闭合标签）</code>，位于起始标签和结束标签之间的文本就是<code>HTML元素</code>的内容，即<code>&lt;开始标签&gt;内容&lt;/结束标签&gt;</code>。<br>也有不是成对出现的标签，如<code>&lt; br&gt;</code>、<code>&lt; hr&gt;</code>等。</li>
<li>HTML 标签不区分大小写，但建议小写。</li>
<li>标签与标签之间是可以嵌套的，但先后顺序必须保持一致，如：<code>&lt;div&gt;</code>里嵌套<code>&lt;p&gt;</code>，那么<code>&lt;/p&gt;</code>必须放在<code>&lt;/div&gt;</code>的前面。</li>
<li><p>语义化，让你的网页更好的被搜索引擎理解<br>语义化，说的通俗点就是：明白每个标签的用途（在什么情况下我可以使用这个标签才合理）<br>语义化的好处：<br> i. 更容易被搜索引擎收录。<br> ii. 更容易让屏幕阅读器读出网页内容。</p>
<h2 id="HTML元素">HTML元素</h2><p>HTML网页实际上就是由许许多多各种各样的HTML元素构成的文本文件，元素由开始标签和结束标签组成，用来包含某些内容，是从开始标签（start tag）到结束标签（end tag）的所有代码：</p>
<p> &lt;开始标签&gt; 元 素 内 容 &lt;结束标签&gt;<br>如<code>&lt; p&gt;内容&lt; /p&gt;</code>这就是一个元素。<code>&lt; br/&gt;</code>本身既是开始标签也是结束标签，但不包含任何内容，所以这只是个标签。</p>
<h3 id="HTML元素语法">HTML元素语法</h3></li>
</ol>
<ul>
<li>HTML 元素以开始标签起始</li>
<li>HTML 元素以结束标签终止</li>
<li>元素的内容是开始标签与结束标签之间的内容</li>
<li>某些 HTML 元素具有空内容（empty content），即为<code>空元素</code>，在开始标签中进行关闭（以开始标签的结束而结束）。空标签只需要写一个开始标签，这样的标签有<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img /&gt;</code>。</li>
<li>大多数 HTML 元素可拥有属性<h2 id="HTML属性">HTML属性</h2></li>
<li>在 HTML 元素的开始标签中定义。</li>
<li>以键值对的形式出现，比如：name=”value”。</li>
<li><p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。<br>如：</p>
<pre><code><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.shiyanlou.com"</span>&gt;</span>shiyanlou<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
</code></pre><p><code>href=&quot;http://www.shiyanlou.com&quot;</code>，这一部分就叫做&lt; a&gt;标签的属性，是对&lt; a&gt;标签的补充说明，既指向的网页。</p>
<pre><code>&lt;<span class="tag">h1</span> align=<span class="string">"center"</span>&gt;居中显示标题&lt;/h1&gt;  <span class="comment">//居中显示标题</span>
&lt;<span class="tag">body</span> bgcolor=<span class="string">"#000000"</span>&gt;    <span class="comment">//背景颜色</span>
&lt;<span class="tag">body</span> bgcolor=<span class="string">"rgb(0,0,0)"</span>&gt;  <span class="comment">//背景颜色</span>
&lt;<span class="tag">body</span> bgcolor=<span class="string">"black"</span>&gt;  <span class="comment">//背景颜色</span>
</code></pre><p>常用标签：</p>
<h2 id="文档头部&lt;head&gt;">文档头部<code>&lt;head&gt;</code></h2><p>文档的头部描述了文档的各种属性和信息，包括文档的标题等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。<br>下面这些标签可用在 head 部分：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>网页标题栏的标题<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">...</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="erlang">...</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>网页的title标签用于告诉用户和搜索引擎这个网页的主要内容是什么，搜索引擎可以通过网页标题，迅速的判断出网页的主题。每个网页的内容都是不同的，每个网页都应该有一个独一无二的title。</p>
<h2 id="标题Heading_：&lt;h1&gt;_-_&lt;h6&gt;_等标签">标题Heading ：<code>&lt;h1&gt; - &lt;h6&gt;</code> 等标签</h2><pre><code><span class="comment"><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;This <span class="keyword">is</span> <span class="keyword">first</span> heading&lt;/h1&gt;</span><br></pre></td></tr></table></figure></span>
</code></pre><h2 id="段落paragraph_：&lt;p&gt;_标签">段落paragraph ：<code>&lt;p&gt;</code> 标签</h2><pre><code><span class="comment"><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This <span class="keyword">is</span> a <span class="property">paragraph</span>.&lt;/p&gt;</span><br></pre></td></tr></table></figure></span>
</code></pre><h2 id="换行：&lt;br/&gt;标签">换行：<code>&lt;br/&gt;</code>标签</h2><p>在 html 中是忽略回车和空格的，代码的文本中输入的再多回车和空格也只显示为1个空格。<br>语法：<br>在需要换行的地方加入即可<br>xhtml1.0写法：<br><code>&lt;br /&gt;</code><br>html4.01写法：<br><code>&lt;br&gt;</code><br>现在一般使用 xhtml1.0 的版本的写法（其它标签也是），这种版本比较规范。</p>
<p><code>&lt;br/&gt;</code>和<code>&lt;p&gt;</code>标签换行的区别：</p>
<ul>
<li>&lt; br/&gt;是只需一个单独使用，而&lt; p&gt;和&lt; /p&gt;是一对使用</li>
<li>br标签是小换行提行（相当于文本中输入一个回车），p标签是大换行（相当于两个回车）隔行作用。<h2 id="空格：&amp;nbsp;">空格：<code>&amp;nbsp;</code></h2>1个<code>&amp;nbsp;</code>显示为1个空格。是单词<code>Non-breaking space不间断空格</code>的缩写<h2 id="单独设置样式：&lt;span&gt;标签">单独设置样式：<code>&lt;span&gt;</code>标签</h2><code>&lt;span&gt;</code>标签是没有语义的，它的作用就是为了设置单独的样式用的，在<code>&lt;style&gt;</code>标签里设置样式。<h2 id="图片：&lt;img&gt;标签">图片：<code>&lt;img&gt;</code>标签</h2>语法：<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="variable">src=</span><span class="string">"图片地址"</span> <span class="variable">alt=</span><span class="string">"图像不可见/下载失败时的提示文本"</span> <span class="variable">title =</span> <span class="string">"图像可见时(鼠标滑过图片时)的提示文本)"</span>&gt;</span><br><span class="line">&lt;img <span class="variable">src=</span><span class="string">"图片地址"</span>/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>图像可以是GIF，PNG，JPEG格式的图像文件。</p>
<ul>
<li>按钮button：<code>&lt;button&gt;</code>标签  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="HTML文本格式化标签">HTML文本格式化标签</h2><table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; b&gt;</td>
<td style="text-align:right">（bold）粗体</td>
</tr>
<tr>
<td style="text-align:left">&lt; big&gt;</td>
<td style="text-align:right">（big）大字体</td>
</tr>
<tr>
<td style="text-align:left">&lt; em&gt;</td>
<td style="text-align:right">（emphasized）强调字（斜体）</td>
</tr>
<tr>
<td style="text-align:left">&lt; i&gt;</td>
<td style="text-align:right">（italic）斜体</td>
</tr>
<tr>
<td style="text-align:left">&lt; small&gt;</td>
<td style="text-align:right">（small）小字体</td>
</tr>
<tr>
<td style="text-align:left">&lt; strong&gt;</td>
<td style="text-align:right">(strong)加重语气（粗体）</td>
</tr>
</tbody>
</table>
<h2 id="短文本引用：&lt;q&gt;标签">短文本引用：<code>&lt;q&gt;</code>标签</h2><p>语法：<br><code>&lt;q&gt;引用文本&lt;/q&gt;</code></p>
<ul>
<li>引用的文本不用加双引号，浏览器会对q标签自动添加双引号。</li>
<li>这里用<code>&lt;q&gt;</code>标签的真正关键点不是它的默认样式双引号（如果这样我们不如自己在键盘上输入双引号就行了），而是它的语义：引用别人的话。<h2 id="长文本引用：&lt;blockquote&gt;标签">长文本引用：<code>&lt;blockquote&gt;</code>标签</h2>语法：<br><code>&lt;blockquote&gt;引用文本&lt;/blockquote&gt;</code><br>浏览器对<code>&lt;blockquote&gt;</code>标签的解析是缩进样式<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/blockquote%E6%A0%87%E7%AD%BE.png" alt=""><h2 id="添加水平横线：&lt;hr&gt;标签">添加水平横线：<code>&lt;hr&gt;</code>标签</h2>语法：<br>html4.01版本<code>&lt;hr&gt;</code><br>xhtml1.0版本 <code>&lt;hr /&gt;</code><br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/%E6%B0%B4%E5%B9%B3%E6%A8%AA%E7%BA%BF.png" alt=""></li>
<li><code>&lt;hr /&gt;</code>标签和<code>&lt;br /&gt;</code>标签一样也是一个空标签，所以只有一个开始标签，没有结束标签。</li>
<li><code>&lt;hr /&gt;</code>标签的在浏览器中的默认样式线条比较粗，颜色为灰色，可使用css样式对其修改。</li>
<li>现在一般使用 xhtml1.0 的版本（其它标签也是），这种版本比较规范。<h2 id="加入一行代码：&lt;code&gt;标签">加入一行代码：<code>&lt;code&gt;</code>标签</h2>语法：<br><code>&lt;code&gt;代码语言&lt;/code&gt;</code><br>默认无样式</li>
<li>如果是多行代码，可以使用<code>&lt;pre&gt;</code>标签。<br>语法：<br><code>&lt;pre&gt;语言代码段&lt;/pre&gt;</code><h2 id="预格式文本：&lt;pre&gt;标签">预格式文本：<code>&lt;pre&gt;</code>标签</h2>预格式文本标签<code>&lt; pre&gt;....&lt; /pre&gt;</code>，常用来展示计算机的源代码。<br>代码段和网页展示是一样的格式，不用额外添加换行符标签就能换行<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>first test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span> <span class="attribute">bgcolor</span> = "#<span class="attribute">F0FFF0</span>"&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">align</span> = "<span class="attribute">center</span>"&gt;</span>My first html<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span>&gt;</span>first paragraph：hello shiyanlou<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span> = "<span class="attribute">http:</span>//<span class="attribute">www.shiyanlou.com</span>"&gt;</span>shiyanlou<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>文本格式化<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="title">b</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>加重语气<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">big</span>&gt;</span>大字体<span class="tag">&lt;/<span class="title">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">em</span>&gt;</span>强调字<span class="tag">&lt;/<span class="title">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">small</span>&gt;</span>小字体<span class="tag">&lt;/<span class="title">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="网页加入地址信息：&lt;address&gt;标签">网页加入地址信息：<code>&lt;address&gt;</code>标签</h2><p>语法：<br><code>&lt;address&gt;地址信息&lt;/address&gt;</code><br>在浏览器上默认显示的样式为斜体，可以使用css样式来修改。</p>
<h2 id="无序列表：ul-li标签">无序列表：<code>ul-li</code>标签</h2><p>语法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>信息1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>信息2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">   ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>默认样式是圆点<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt=""></p>
<h2 id="有序列表：ol-li标签">有序列表：<code>ol-li</code>标签</h2><p>语法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">li</span>&gt;</span>信息1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">li</span>&gt;</span>信息2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">   ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>序号默认从1开始</p>
<h2 id="id和class">id和class</h2><p>HTML标签中，经常会定义两个标签属性，使逻辑更加清晰：</p>
<ul>
<li>id：标识标签的唯一身份<br>语法：<br><code>&lt;div  id=&quot;版块名称&quot;&gt;…&lt;/div&gt;</code><br>id就是标签的名字，id有<code>唯一性</code>，一个网页如果有2个相同 id的HTML标签的，浏览器只选择<strong>第一个</strong>id进行操作，而忽略第二个同名id。</li>
<li>class：标记标签的类别特质<br>class是标签的“类”，不同标签可以叫同一个class。我们可以把样式或者作用相同的标签，统一标注一个class，这样管理起来很方便。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/id%E5%92%8Cclass.png" alt=""><br>id和class可以随便取名称，只要相对统一、便于识别和记忆就可以了<br>参考<a href="http://www.alloyteam.com/2011/10/107/" target="_blank" rel="external">腾讯AlloyTeam的命名规范</a></li>
<li>利用id和class更快速地将CSS应用到各个HTMl标签上<ul>
<li><code>&lt;style&gt;</code>标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span></span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="tag">p</span><span class="rules">&#123;  //给不同id的p标签添加相同的效果</span><br><span class="line">            <span class="rule"><span class="attribute">color</span>:<span class="value">blue</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="class">.wrap</span><span class="rules">&#123;  //相同class的不同标签添加相同效果，在class前加.</span><br><span class="line">            <span class="rule"><span class="attribute">background-color</span>:<span class="value">yellow</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="id">#content3</span><span class="rules">&#123;  //选取特定id的标签，在id前加#</span><br><span class="line">            <span class="rule"><span class="attribute">font-weight</span>:<span class="value">bold</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"content1"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"content2"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"content3"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"wrap"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"wrap"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"wrap"</span>&gt;</span>计蒜客<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="div标签">div标签</h2><p>在网页制作过程过中，可以把一些<code>独立的逻辑部分</code>划分出来，放在一个<code>&lt;div&gt;</code>标签中，这个<code>&lt;div&gt;</code>标签的作用就相当于一个<code>容器</code>。<br>语法：<br><code>&lt;div&gt;…&lt;/div&gt;</code><br>div标签可定义文档中的分区、层或节（division/section），是我们最常见作为网页页面容器的一个标签。 div标签可以把文档分割为独立的、不同的部分。</p>
<p>它可以用作严格的组织工具，并且不使用任何格式与其关联。 如果结合 id 或 class 来标记div，那么该标签的作用会变得更加有效。</p>
<p>由于div提供了高度的灵活性，很容易让新人过度使用他们。为了避免过度使用div标签，你应该在写HTML代码的时候总是问自己是否有一个实际的HTML标记。</p>
<p>例如，你为什么不使用HTML标题标记，例如h1和h2？一旦你开始考虑到了div的问题，你很快就会使用适当的HTML标记，而不是自动创建一个新div。它不仅可以减少代码量，而且还会给你的代码更合理的加载时间。<br>过度使用div常常称为“div多用症”,这是代码结构不合理而且过分复杂的一个信号。</p>
<p>一些CSS新手会尝试用div重建自己原来的表格结构。但是，这只是用一套不必要的标签替换了另一套不必要的标签。实际上，应该使用div根据条目的意义或功能（而不是根据它们的表现方式或布局）对相关条目进行分组。</p>
<h2 id="练习：制作相册">练习：制作相册</h2><ul>
<li><p>骨架<br>搭建网页骨架，方便后续设计</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>相册<span class="tag">&lt;/<span class="title">title</span>&gt;</span>   //网站名</span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>  //正中间显示内容的区域</span><br><span class="line">            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>成为海贼王的男人<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>   //相册的标题</span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"album"</span>&gt;</span>    //照片区域</span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span> //相框容器</span><br><span class="line">                    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.1.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.2.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.3.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.4.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.5.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.6.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>盒子模型</p>
</li>
</ul>
<ol>
<li><p>外间距<code>margin</code></p>
<ul>
<li><p>外间距样式：<code>margin:外间距-上 外间距-右 外间距-下 外间距-左;</code> </p>
<pre><code><span class="comment"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#content</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></span>
</code></pre></li>
<li><p>上下、左右间距分别一样时：<code>margin:上下间距 左右间距;</code></p>
<pre><code><span class="comment"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#content</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">10px</span> <span class="number">20px</span></span></span>;   </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></span>
</code></pre></li>
<li><p>上下左右间距全一样：<code>margin:间距;</code></p>
</li>
</ul>
</li>
<li>内间距<code>padding:上 右 下 左;</code><br>格式和<code>margin</code>一样<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>相册<span class="tag">&lt;/<span class="title">title</span>&gt;</span>   //网站名</span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">h1</span><span class="rules">&#123; </span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;  //让文字在容器中居中显示</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="id">#content</span><span class="rules">&#123;   //让容器居中</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">960px</span></span></span>;    //设置容器宽度，默认和浏览器一样宽</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> auto</span></span>;  //设置容器外间距：上下间距为0，左右间距为auto自动（浏览器自动平分两边间距）</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="class">.frame</span><span class="rules">&#123; //给class为frame的&lt;div&gt;添加样式</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">10px</span> <span class="number">20px</span></span></span>;   //相框容器外间距</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;    //相框容器宽</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;   //相框容器高</span><br><span class="line">                <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">10px</span> <span class="number">10px</span></span></span>;  //相框容器内间距</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="tag">img</span><span class="rules">&#123; //相框容器里的图片</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">280px</span></span></span>;    //图片宽</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">180px</span></span></span>;   //图片高</span><br><span class="line">                <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">0</span></span></span>;   //消除图片边框</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>  //正中间显示内容的区域</span><br><span class="line">            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>成为海贼王的男人<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>   //相册的标题</span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"album"</span>&gt;</span>    //照片区域</span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span> //相框容器</span><br><span class="line">                    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.1.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.2.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.3.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.4.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.5.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.6.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>其他细节<ul>
<li>float和clear<br>对div一类默认占满整行的标签，如果希望多个这样的标签在一行内和平相处，除了设置一个比浏览器小的宽度外，还得增加一个浮动属性（float）。以<code>float:left</code>为例，设置float样式的元素，首先会相对父元素“浮”起来，不再占用父元素的空间，然后会往一个方向靠，一个紧跟一个。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/float.png" alt=""><br>但由于有父元素的限制，当3号元素超出父元素（同一行的浮动元素盒子模型需要的总宽度大于父级容器元素宽度），超出父元素限制的子元素（下图中的3号元素）就会放到新的一行里。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/float%E8%B6%85%E5%87%BA.png" alt=""><br>浮动的框可以向左（left）或向右（right）浮动；如果无需浮动，则可以使用默认属性或设置浮动属性为none。在实践中，针对网页排版，我们一般都采用同向浮动——也就是说在同一个父元素中的子元素，要么都向左浮动，要么都向右浮动；这样做可以避免一些不必要的由分辨率、浏览器兼容性诱发的奇葩错误。<br>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。<br><code>clear</code>属性定义了元素的哪边上不允许出现浮动元素，可以设置为both（两侧）、left（左侧）、right（右侧）；<br>如果不需限制则可以使用默认的允许两侧存在浮动的none。clear属性会在元素上外边距之上增加<code>清除空间</code>（但外边距本身并不改变），使得元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>相册<span class="tag">&lt;/<span class="title">title</span>&gt;</span>   //网站名</span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">h1</span><span class="rules">&#123; </span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value">center</span></span>;  //让文字在容器中居中显示</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="id">#content</span><span class="rules">&#123;   //让容器居中</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">960px</span></span></span>;    //设置容器宽度，默认和浏览器一样宽</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> auto</span></span>;  //设置容器外间距：上下间距为0，左右间距为auto自动（浏览器自动平分两边间距）</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="class">.frame</span><span class="rules">&#123; //给class为frame的&lt;div&gt;添加样式</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">10px</span> <span class="number">20px</span></span></span>;   //相框容器外间距</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">284px</span></span></span>;    //相框容器宽，注意这里的变化，这样整个相框的宽度就是300px了</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;   //相框容器高</span><br><span class="line">                <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">10px</span> <span class="number">10px</span></span></span>;  //相框容器内间距</span><br><span class="line">                <span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>; //向左浮动，而不是默认的垂直排列</span><br><span class="line">                <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">3px</span> solid white</span></span>; //边框</span><br><span class="line">                <span class="rule"><span class="attribute">border-radius</span>:<span class="value"><span class="number">10px</span></span></span>; //圆角</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="tag">img</span><span class="rules">&#123; //相框容器里的图片</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">280px</span></span></span>;    //图片宽</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">180px</span></span></span>;   //图片高</span><br><span class="line">            &#125;</span></span><br><span class="line">            <span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">background-image</span>:<span class="value"><span class="function">url</span>(http://res.jisuanke.com/img/fe/back1.png)</span></span>; //背景图片</span><br><span class="line">        &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>  //正中间显示内容的区域</span><br><span class="line">            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>成为海贼王的男人<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>   //相册的标题</span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"album"</span>&gt;</span>    //照片区域</span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span> //相框容器</span><br><span class="line">                    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.1.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.2.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.3.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.4.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.5.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"frame"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://res.jisuanke.com/img/fe/21.6.jpg"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>最后效果：<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/%E6%9C%80%E7%BB%88%E7%9B%B8%E5%86%8C.png" alt=""></p>
<h2 id="表格：table标签">表格：<code>table</code>标签</h2><p>创建表格的四个元素：<br>table、tbody、tr、th、td</p>
<ol>
<li><code>&lt;table&gt;…&lt;/table&gt;</code>：整个表格以<code>&lt;table&gt;</code>标记开始、<code>&lt;/table&gt;</code>标记结束。</li>
<li><code>&lt;tbody&gt;…&lt;/tbody&gt;</code>：当表格内容非常多时，表格会下载一点显示一点，但如果加上<code>&lt;tbody&gt;</code>标签后，这个表格就要等表格内容全部下载完才会显示。如右侧代码编辑器中的代码。</li>
<li><code>&lt;tr&gt;…&lt;/tr&gt;</code>：表格的一行row，所以有几对tr 表格就有几行。</li>
<li><code>&lt;td&gt;…&lt;/td&gt;</code>：表格的一个单元格，一行中包含几对<code>&lt;td&gt;...&lt;/td&gt;</code>，说明一行中就有几列。</li>
<li><code>&lt;th&gt;…&lt;/th&gt;</code>：表格的头部的一个单元格，表格表头。</li>
<li>表格中列的个数，取决于一行中数据单元格的个数。</li>
</ol>
<ul>
<li>table表格在没有添加css样式之前，在浏览器中显示是没有表格线的</li>
<li>表头，也就是th标签中的文本默认为粗体并且居中显示<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>认识table表标签<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span>&gt;</span>学生数<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span>&gt;</span>平均成绩<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>一班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>30<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>89<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>二班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>35<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>85<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>三班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>32<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>80<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://7xj9f8.com1.z0.glb.clouddn.com/table.png" alt=""></p>
<h3 id="用css样式，为表格加入边框">用css样式，为表格加入边框</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>为表格添加边框<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"> //增加<span class="tag">CSS</span>样式</span><br><span class="line"><span class="tag">table</span> <span class="tag">tr</span> <span class="tag">td</span>,<span class="tag">th</span><span class="rules">&#123;<span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>;&#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">summary</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">th</span>&gt;</span>学生数<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">th</span>&gt;</span>平均成绩<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>一班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>30<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>89<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>二班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>35<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>85<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>三班<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>32<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>80<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xj9f8.com1.z0.glb.clouddn.com/table%E8%BE%B9%E6%A1%86.png" alt=""></p>
<h3 id="为表格添加标题和摘要：caption标签">为表格添加标题和摘要：caption标签</h3><ol>
<li>摘要<br>摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使<code>搜索引擎</code>更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。<br>语法：<br><code>&lt;table summary=&quot;表格简介文本&quot;&gt;</code></li>
<li>标题：<code>&lt;caption&gt;</code>标签<br>用以描述表格内容，标题的显示位置：表格上方。<br>语法：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">caption</span>&gt;</span>标题文本<span class="tag">&lt;/<span class="title">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>…<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>…<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        …</span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="链接：&lt;a&gt;标签">链接：<code>&lt;a&gt;</code>标签</h2><p>语法：<br><code>&lt;a  href=&quot;目标网址&quot;&gt;链接显示的文本&lt;/a&gt;</code></p>
<ul>
<li>鼠标悬停显示提示文字：<code>title=&quot;鼠标滑过显示的文本&quot;</code><br>title属性的作用，鼠标滑过链接文字时会显示这个属性的文本内容。这个属性在实际网页开发中作用很大，主要方便搜索引擎了解链接地址的内容（语义化更友好）</li>
<li>新窗口打开链接：<code>target=&quot;_blank&quot;;</code></li>
<li>不显示下划线：<code>text-decoration:none;</code></li>
<li>点过的链接变色：<code>:visited</code>伪类</li>
<li>鼠标悬停时显示下划线且变色：<code>:hover</code>伪类</li>
<li>在网页中链接Email地址：<code>mailto</code><br>使用mailto能让访问者便捷向网站管理者发送电子邮件。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/mailto.jpg" alt=""><br>注意：如果mailto后面同时有多个参数的话，第一个参数必须以<code>?</code>开头，后面的参数每一个都以<code>&amp;</code>分隔。<br><img src="http://7xj9f8.com1.z0.glb.clouddn.com/mailto2.jpg" alt=""><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>学习a标签<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="tag">a</span><span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">text-decoration</span>:<span class="value">none</span></span>;   //不显示下划线</span><br><span class="line">            <span class="rule"><span class="attribute">color</span>:<span class="value">green</span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">        <span class="rule"><span class="attribute">a</span>:<span class="value">visited&#123;  //点过的链接变色</span><br><span class="line">            color:blue</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="rule"><span class="attribute">a</span>:<span class="value">hover&#123;    //鼠标悬停时显示下划线且变色</span><br><span class="line">            text-decoration:underline</span></span>;  //显示下划线</span><br><span class="line">            <span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.jisuanke.com?28"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> &gt;</span>点我打开新窗口<span class="tag">&lt;/<span class="title">a</span>&gt;</span>   //新窗口打开链接</span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="与用户交互：&lt;form&gt;标签">与用户交互：<code>&lt;form&gt;</code>标签</h2><p>表单form是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据。<br>语法：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form   <span class="keyword">method</span>=<span class="string">"传送方式"</span>   action=<span class="string">"服务器文件"</span>&gt;...&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>
<p>讲解：<br>1.<code>&lt;form&gt;</code> 标签是成对出现的，以<code>&lt;form&gt;</code>开始，以<code>&lt;/form&gt;</code>结束。<br>2.<code>action</code> ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)。<br>3.<code>method</code> ： 数据传送的方式（get/post）。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form    <span class="keyword">method</span>=<span class="string">"post"</span>   action=<span class="string">"save.php"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"username"</span>&gt;用户名:&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"pass"</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"pass"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:<br>1、所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在<code>&lt;form&gt;&lt;/form&gt;</code>标签之间（否则用户输入的信息可提交不到服务器上哦！）。<br>2、<code>method:post/get</code>的区别<br>Form中的get和post方法，在数据传输过程中分别对应了GET和POST方法。</p>
<pre><code>- Get将表单中数据的按照variable=<span class="keyword">value</span>的形式，添加到<span class="keyword">action</span>所指向的URL后面，并且两者使用“?”连接，而各个变量之间使用“&amp;”连接；Post是将表单中的数据放在<span class="keyword">form</span>的数据体中，按照变量和值相对应的方式，传递到<span class="keyword">action</span>所指向URL。
</code></pre><p>如下形式：<br>     <a href="http://www.imooc.com/test.asp?name=lilian&amp;password=12345678" target="_blank" rel="external">http://www.imooc.com/test.asp?name=lilian&amp;password=12345678</a></p>
<pre><code>-<span class="ruby"> <span class="constant">Get</span>是不安全的，因为在传输过程，数据被存放在请求的<span class="constant">URL</span>地址中，这样就可能会有一些隐私的信息被第三方看到。
</span>-<span class="ruby"> <span class="constant">Get</span>方式传输的数据量非常小，一般限制在 <span class="number">2</span>KB 左右，但是执行效率却比 <span class="constant">Post</span> 方法好；而 <span class="constant">Post</span> 方式传递的数据量相对较大，它是等待服务器来读取数据，不过也有字节限制，这是为了避免对服务器用大量数据进行恶意攻击，根据微软方面的说法，微软对用<span class="string">`Request.Form()`</span>可接收的最大数据有限制，<span class="constant">IIS4</span>中为 <span class="number">80</span>KB 字节，<span class="constant">IIS5</span> 中为 <span class="number">100</span>KB 字节。</span>
</code></pre><p>综上所述，请尽量用 Post 方法。</p>
</blockquote>
<h3 id="文本、密码输入框">文本、密码输入框</h3><p>当用户要在表单中键入字母、数字等内容时，就会用到文本输入框。文本框也可以转化为密码输入框。<br>语法：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text/password"</span> name=<span class="string">"名称"</span> value=<span class="string">"文本"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>1、<code>type</code>：<br>   当<code>type=&quot;text&quot;</code>时，输入框为文本输入框;<br>   当<code>type=&quot;password&quot;</code>时, 输入框为密码输入框。<br>2、<code>name</code>：为文本框命名，以备后台程序ASP 、PHP使用。<br>3、<code>value</code>：为文本输入框设置默认值。(一般起到提示作用)<br>举例：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span>&gt;</span><br><span class="line">  姓名：</span><br><span class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"myName"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">  密码：</span><br><span class="line">  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"pass"</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在浏览器的效果：<br>（插入图片：文本输入框）</p>
<h3 id="文本域，支持多行文本输入">文本域，支持多行文本输入</h3><p>当用户需要在表单中输入大段文字时，需要用到文本输入域。<br>语法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">textarea</span>  <span class="attribute">rows</span>=<span class="value">"行数"</span> <span class="attribute">cols</span>=<span class="value">"列数"</span>&gt;</span>文本<span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1、<code>&lt;textarea&gt;</code>标签是成对出现的，以<code>&lt;textarea&gt;</code>开始，以<code>&lt;/textarea&gt;</code>结束。<br>2、<code>cols</code>：多行输入域的列数。<br>3、<code>rows</code>：多行输入域的行数。<br>4、在<code>&lt;textarea&gt;&lt;/textarea&gt;</code>标签之间可以输入默认值。<br>举例：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form  <span class="keyword">method</span>=<span class="string">"post"</span> action=<span class="string">"save.php"</span>&gt;</span><br><span class="line">        &lt;label&gt;联系我们&lt;/label&gt;</span><br><span class="line">        &lt;textarea cols=<span class="string">"50"</span> rows=<span class="string">"10"</span> &gt;在这里输入内容...&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<br>这两个属性可用css样式的width和height来代替：col用width、row用height来代替。<br>浏览器显示结果：<br>（插入图片：文本输入域）<br>例：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>文本域<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"save.php"</span> <span class="attribute">method</span>=<span class="value">"post"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span>&gt;</span>个人简介：<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">cols</span>=<span class="value">"50"</span> <span class="attribute">rows</span>=<span class="value">"10"</span>&gt;</span>在这里输入内容...<span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"确定"</span>  <span class="attribute">name</span>=<span class="value">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"reset"</span> <span class="attribute">value</span>=<span class="value">"重置"</span>  <span class="attribute">name</span>=<span class="value">"reset"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示结果：<br>（插入图片：文本输入域）</p>
<h3 id="单选框、复选框">单选框、复选框</h3><p>在使用表单设计调查表时，为了减少用户的操作，使用选择框是一个好主意，html中有两种选择框，即单选框和复选框，两者的区别是单选框中的选项用户只能选择一项，而复选框中用户可以任意选择多项，甚至全选。请看下面的例子:<br>语法：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input   <span class="variable">type=</span><span class="string">"radio/checkbox"</span>   <span class="variable">value=</span><span class="string">"值"</span>    <span class="variable">name=</span><span class="string">"名称"</span>   <span class="variable">checked=</span><span class="string">"checked"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>1、<code>type</code>:<br>   当 <code>type=&quot;radio&quot;</code> 时，控件为单选框<br>   当 <code>type=&quot;checkbox&quot;</code> 时，控件为复选框<br>2、<code>value</code>：提交数据到服务器的值（后台程序PHP使用）<br>3、<code>name</code>：为控件命名，以备后台程序 ASP、PHP 使用<br>4、<code>checked</code>：当设置 checked=”checked” 时，该选项被<strong>默认选中</strong></p>
<blockquote>
<p>注意:<br>同一组的<strong>单选</strong>按钮，name 取值一定要一致。</p>
</blockquote>
<h3 id="使用下拉列表框，节省空间">使用下拉列表框，节省空间</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>学习课程由<a href="https://www.shiyanlou.com/" target="_blank" rel="external">实验楼</a>、<a href="http://www.jisuanke.com/course" target="_blank"]]>
    </summary>
    
      <category term="html" scheme="http://codingbubble.github.io/tags/html/"/>
    
      <category term="前端" scheme="http://codingbubble.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://codingbubble.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个性化你的Hexo-笔记]]></title>
    <link href="http://codingbubble.github.io/2015/05/08/%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%A0%E7%9A%84Hexo/"/>
    <id>http://codingbubble.github.io/2015/05/08/个性化你的Hexo/</id>
    <published>2015-05-08T14:09:02.000Z</published>
    <updated>2015-05-26T14:19:24.773Z</updated>
    <content type="html"><![CDATA[<p>注意：<br>1.修改配置文件时注意<code>YAML语法</code>，参数<code>冒号:</code>后一定要留<code>空格</code><br>2.若出现中文乱码请修改文件编码格式为<code>UTF-8</code></p>
<h1 id="hexo目录介绍">hexo目录介绍</h1><p>默认目录结构：</p>
<pre><code>.
├── .deploy <span class="preprocessor">#执行hexo deploy命令部署到GitHub上的内容目录</span>
├── <span class="keyword">public</span> <span class="preprocessor">#执行hexo generate命令，输出的静态网页内容目录</span>
├── scaffolds <span class="preprocessor">#layout模板文件目录，其中的md文件可以添加编辑</span>
├── scripts <span class="preprocessor">#扩展脚本目录，这里可以自定义一些javascript脚本</span>
├── source <span class="preprocessor">#文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</span>
|   ├── _drafts <span class="preprocessor">#草稿文章</span>
|   └── _posts <span class="preprocessor">#发布文章</span>
├── themes <span class="preprocessor">#主题文件目录</span>
├── _config.yml <span class="preprocessor">#全局配置文件，大多数的设置都在这里</span>
└── <span class="keyword">package</span>.json <span class="preprocessor">#应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</span>
</code></pre><h1 id="插件plugins">插件plugins</h1><p><a href="http://hexo.io/plugins/" target="_blank" rel="external">Hexo插件</a></p>
<h2 id="安装插件">安装插件</h2><pre><code>$ npm <span class="operator"><span class="keyword">install</span> &lt;<span class="keyword">plugin</span>-name&gt; <span class="comment">--save</span>
$ npm <span class="keyword">update</span></span>
</code></pre><h2 id="启用插件">启用插件</h2><p>修改hexo目录下的<code>_config.yml</code>，添加：</p>
<pre><code>plugins:
- plugin-<span class="property">name</span>
</code></pre><h2 id="升级插件">升级插件</h2><pre><code><span class="built_in">npm</span> update
</code></pre><h2 id="卸载插件">卸载插件</h2><pre><code>npm <span class="operator"><span class="keyword">uninstall</span> &lt;<span class="keyword">plugin</span>-name&gt;</span>
</code></pre><h2 id="常用插件安装与配置">常用插件安装与配置</h2><p>首页文章数量，存档，分类，本地服务器代理，发布器，更新，rss等插件</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-archive <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-category <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span>
</code></pre><p>装完之后去全局配置文件 <code>\hexo\_config.yml</code> 修改参数</p>
<pre><code>index_generator:
  per_page: <span class="number">10</span> ##首页默认<span class="number">10</span>篇文章标题 如果值为<span class="number">0</span>不分页

archive_generator:
  per_page: <span class="number">10</span> ##归档页面默认<span class="number">10</span>篇文章标题
  yearly: true  ##生成年视图
  monthly: true ##生成月视图

tag_generator:
  per_page: <span class="number">10</span> ##标签分类页面默认<span class="number">10</span>篇文章

category_generator: 
   per_page: <span class="number">10</span> ###分类页面默认<span class="number">10</span>篇文章

feed:
  type: atom #<span class="hexcolor">#fee</span>d类型 atom或者rss2
  path: atom<span class="class">.xml</span> #<span class="hexcolor">#fee</span>d路径
  limit: <span class="number">20</span>  #<span class="hexcolor">#fee</span>d文章最小数量
</code></pre><p>-多部署</p>
<pre><code>deploy:
  type: git
  message: update  #<span class="id">#git</span> message建议默认字段update 可以自定义
  repository: 
  github: &lt;repository url&gt;,[branch] #<span class="id">#github</span> 仓库地址和分支
  gitcafe: &lt;repository url&gt;,[branch] #<span class="id">#gitcafe</span> 仓库地址和分支
</code></pre><h1 id="README文件">README文件</h1><p>在<code>\hexo\source</code>新建<code>README</code>文件（注意不要带后缀），用文本编辑器打开编辑内容。</p>
<h1 id="404页面">404页面</h1><p>在<code>hexo\source</code>下新建<code>404</code>文件（不要带后缀），插入代码即可。<br><a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯公益</a></p>
<h1 id="整站配置">整站配置</h1><h2 id="编辑\hexo\_config-yml文件">编辑<code>\hexo\_config.yml</code>文件</h2><pre><code><span class="preprocessor"># Hexo Configuration</span>
<span class="preprocessor">## Docs: http://zespia.tw/hexo/docs/configure.html</span>
<span class="preprocessor">## Source: https://github.com/tommy351/hexo/</span>

<span class="preprocessor"># Site #整站的基本信息</span>
<span class="label">title:</span> bubble sky <span class="preprocessor">#网站标题，站点左上角</span>
<span class="label">subtitle:</span> Coding world, changing world ^_^ <span class="preprocessor">#副标题，站点左上角</span>
<span class="label">description:</span> Coding world, changing world ^_^ <span class="preprocessor">#给搜索引擎看的，对站点的描述，可以自定义，在生成html中的head-&gt;meta中可看到</span>
<span class="label">author:</span> bubble <span class="preprocessor">#网站作者，在站点左下角可以看到</span>
<span class="label">email:</span> <span class="preprocessor">#你的联系邮箱</span>
<span class="label">language:</span> <span class="built_in">zh</span>-CN <span class="preprocessor">#中文</span>

<span class="preprocessor"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span>
<span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>
<span class="label">url:</span> http://codingbubble.github.io  <span class="preprocessor">#你的域名</span>
<span class="label">root:</span> /
<span class="label">permalink:</span> :year/:month/:day/:title/
<span class="label">tag_dir:</span> tags
<span class="label">archive_dir:</span> archives
<span class="label">category_dir:</span> categories

<span class="preprocessor"># Writing 文章布局、写作格式的定义，不修改</span>
<span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span>
<span class="label">default_layout:</span> post
<span class="label">auto_spacing:</span> false <span class="preprocessor"># Add spaces between asian characters and western characters</span>
<span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span>
<span class="label">max_open_file:</span> <span class="number">100</span>
<span class="label">filename_case:</span> <span class="number">0</span>
<span class="label">highlight:</span> <span class="preprocessor">#代码高亮</span>
  enable: true <span class="preprocessor">#是否启用</span>
  backtick_code_block: true
  line_number: true <span class="preprocessor">#是否显示行号</span>
  tab_replace:

<span class="preprocessor"># Category &amp; Tag</span>
<span class="label">default_category:</span> uncategorized
<span class="label">category_map:</span>
<span class="label">tag_map:</span>

<span class="preprocessor"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span>
<span class="preprocessor">## 2: Enable pagination</span>
<span class="preprocessor">## 1: Disable pagination</span>
<span class="preprocessor">## 0: Fully Disable</span>
<span class="label">archive:</span> <span class="number">1</span>
<span class="label">category:</span> <span class="number">1</span>
<span class="label">tag:</span> <span class="number">1</span>

<span class="preprocessor"># Server 不修改</span>
<span class="preprocessor">## Hexo uses Connect as a server</span>
<span class="preprocessor">## You can customize the logger format as defined in</span>
<span class="preprocessor">## http://www.senchalabs.org/connect/logger.html</span>
<span class="label">port:</span> <span class="number">4000</span>
<span class="label">logger:</span> false
<span class="label">logger_format:</span>

<span class="preprocessor"># Date / Time format 日期格式</span>
<span class="preprocessor">## Hexo uses Moment.js to parse and display date</span>
<span class="preprocessor">## You can customize the date format as defined in</span>
<span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="label">date_format:</span> MMM D YYYY <span class="preprocessor">#文章发表时间的显示格式，可在上面链接里按照格式修改</span>
<span class="label">time_format:</span> H:mm:ss

<span class="preprocessor"># Pagination #每页显示文章数，可以自定义</span>
<span class="preprocessor">## Set per_page to 0 to disable pagination</span>
<span class="label">per_page:</span> <span class="number">10</span> <span class="preprocessor">#每页显示10篇文章</span>
<span class="label">pagination_dir:</span> page

<span class="preprocessor"># Disqus 社会化评论disqus，我使用多说，在主题中配置</span>
<span class="label">disqus_shortname:</span>

<span class="preprocessor"># Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改</span>
<span class="preprocessor">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span>
<span class="preprocessor">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span>
<span class="label">theme:</span> light
<span class="label">exclude_generator:</span>
<span class="label">plugins:</span>
- hexo-generator-feed
- hexo-generator-sitemap

<span class="preprocessor"># Deployment 站点部署到github要配置</span>
<span class="preprocessor">## Docs: http://zespia.tw/hexo/docs/deploy.html</span>
<span class="label">deploy:</span>
  type: git
  repository: git@github.com:username/username.github.io.git
  branch: master
</code></pre><p>执行命令<code>hexo g</code>，<code>hexo s</code>，打开<code>localhost:4000</code>查看效果。</p>
<h2 id="新建文章时默认生成categories项">新建文章时默认生成categories项</h2><p>在<code>hexo\scaffolds\post.md</code>中，添加一行<code>categories:</code>。同理可应用在<code>page.md</code>和<code>photo.md</code>。</p>
<h2 id="win7中新建文章后自动打开文件">win7中新建文章后自动打开文件</h2><p>参考了几个博主的方法，但貌似都是苹果机的，本人对脚本语言完全不懂，琢磨尝试了几次，竟然成功了~<br><a href="https://github.com/hexojs/hexo/issues/1007" target="_blank" rel="external">hexo作者给出的代码</a>：</p>
<pre><code><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;

<span class="comment">// Hexo 2.x</span>
hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(path)</span></span>{
  spawn(<span class="string">'vi'</span>, [path]);
});

<span class="comment">// Hexo 3</span>
hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{
  spawn(<span class="string">'vi'</span>, [data.path]);
});
</code></pre><p>稍加修改即可，如下：</p>
<ul>
<li>在<code>hexo\scripts</code>目录新建文件<code>open_new.js</code>，在其中捕获new事件，若scripts文件夹不存在可手动创建。</li>
<li><p>添加代码：</p>
<pre><code>//hexo new <span class="string">"post"</span>后自动用默认编辑器打开文件
var exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;

/* Hexo <span class="number">2.</span>x
hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(path)</span></span>{
  exec(<span class="string">'start'</span> + path);
});
*/

// Hexo <span class="number">3</span>
hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{
  exec(<span class="string">'start '</span> + data.path);
});
</code></pre><p>我是Hexo 3版本，测试成功~但2.x版本尚未测试，猜想可能代码差不多是这样吧，安装2.x版本的朋友可以试试。</p>
</li>
</ul>
<h1 id="主题theme">主题theme</h1><p><a href="http://hexo.io/themes/" target="_blank" rel="external">Hexo主题</a></p>
<h2 id="下载主题">下载主题</h2><pre><code>$ git clone <span class="tag">&lt;<span class="title">repository</span>&gt;</span> themes/<span class="tag">&lt;<span class="title">theme-name</span>&gt;</span>
</code></pre><p>如：</p>
<pre><code><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/hexojs</span><span class="regexp">/hexo-theme-light.git themes/light</span>
</code></pre><h2 id="启用主题">启用主题</h2><p>修改hexo目录下的<code>_config.yml</code>，启用主题：</p>
<pre><code><span class="attribute">theme</span>: <span class="string">theme-name</span>
</code></pre><p>如：</p>
<pre><code><span class="attribute">theme</span>: <span class="string">light</span>
</code></pre><h2 id="主题配置">主题配置</h2><p>编辑文件<code>\hexo\themes\light\_config.yml</code></p>
<pre><code><span class="attribute">menu</span>: #站点右上角导航栏，暂时默认，后面介绍修改
  首页: /
  存档: /archives
  关于: /about
  <span class="attribute">ToDo</span>: /todolist

<span class="attribute">widgets</span>: #站点右边栏，暂时默认，后面介绍修改和添加
- search
- category
- tagcloud
- weibo
- blogroll

<span class="attribute">excerpt_link</span>: 阅读全文 #替换为中文

<span class="attribute">plugins</span>: 

<span class="attribute">twitter</span>: #右边栏要显示twitter展示的话，需要在此设置
  <span class="attribute">username</span>: moxie198
  <span class="attribute">show_replies</span>: false
  <span class="attribute">tweet_count</span>: <span class="number">5</span>

<span class="attribute">addthis</span>: #SNS分享，暂时默认，后面会介绍
  <span class="attribute">enable</span>: true
  <span class="attribute">pubid</span>:
  <span class="attribute">facebook</span>: true
  <span class="attribute">twitter</span>: true
  <span class="attribute">google</span>: true
  <span class="attribute">pinterest</span>: true

<span class="attribute">fancybox</span>: true #图片效果，默认

<span class="attribute">google_analytics</span>: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍
<span class="attribute">rss</span>:  #生成RSS，需要配置路径，暂时默认，后面介绍
</code></pre><h3 id="修改局部页面">修改局部页面</h3><p>页面展现的全部逻辑都在每个主题中控制，源代码在<code>hexo\themes\themename\</code>中</p>
<pre><code>.
├── languages  <span class="preprocessor">#多语言</span>
|   ├── <span class="keyword">default</span>.yml <span class="preprocessor">#默认语言</span>
|   └── zh-CN.yml  <span class="preprocessor">#中文语言</span>
├── <span class="keyword">layout</span> <span class="preprocessor">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span>
|   ├── _partial   <span class="preprocessor">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span>
|   └── _widget <span class="preprocessor">#小挂件的布局，页面下方小挂件的控制</span>
├── source <span class="preprocessor">#源码</span>
|   ├── css <span class="preprocessor">#css源码 </span>
|   |   ├── _base  <span class="preprocessor">#*.styl基础css</span>
|   |   ├── _partial   <span class="preprocessor">#*.styl局部css</span>
|   |   ├── fonts  <span class="preprocessor">#字体</span>
|   |   ├── images <span class="preprocessor">#图片</span>
|   |   └── style.styl <span class="preprocessor">#*.styl引入需要的css源码</span>
|   ├── fancybox   <span class="preprocessor">#fancybox效果源码</span>
|   └── js <span class="preprocessor">#javascript源代码</span>
├── _config.yml <span class="preprocessor">#主题配置文件</span>
└── README.md  <span class="preprocessor">#用GitHub的都知道</span>
</code></pre><p>如果你需要修改头部，直接修改<code>hexo\themes\themename\layout\_partial\header.ejs</code>，比如头上加个搜索框：</p>
<pre><code>&lt;div&gt;
&lt;form <span class="variable">class=</span><span class="string">"search"</span> <span class="variable">action=</span><span class="string">"//google.com/search"</span> <span class="variable">method=</span><span class="string">"get"</span> <span class="variable">accept-charset=</span><span class="string">"utf-8"</span>&gt;
 &lt;input <span class="variable">type=</span><span class="string">"search"</span> <span class="variable">name=</span><span class="string">"q"</span> <span class="variable">id=</span><span class="string">"search"</span> <span class="variable">autocomplete=</span><span class="string">"off"</span> <span class="variable">autocorrect=</span><span class="string">"off"</span> <span class="variable">autocapitalize=</span><span class="string">"off"</span> <span class="variable">maxlength=</span><span class="string">"20"</span> <span class="variable">placeholder=</span><span class="string">"Search"</span> /&gt;
 &lt;input <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">name=</span><span class="string">"q"</span> <span class="variable">value=</span><span class="string">"site:&lt;%- config.url.replace(/^https?:\/\//, '') %&gt;"</span>&gt;
&lt;/form&gt;
&lt;/div&gt;
</code></pre><p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。<br>再如，你要修改页脚版权信息，直接编辑<code>hexo\themes\themename\layout\_partial\footer.ejs</code>。同理，你需要修改css，直接去修改对应位置的styl文件。</p>
<h3 id="社会化评论系统——多说">社会化评论系统——多说</h3><p>hexo默认使用国外比较流行的disqus，国内多使用“多说”。步骤非常简单：</p>
<ol>
<li>在<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>进行注册，获得通用代码。</li>
<li><p>将通用代码粘贴到<code>themes\themename\layout\_partial\comment.ejs</code>里面，如下：</p>
<pre><code><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span> ( page.comments){ </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span>
        #通用代码
    <span class="tag">&lt;/<span class="title">section</span>&gt;</span>
</span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>其中<code>&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;请将此处替换成文章在你的站点中的ID&quot; data-title=&quot;请替换成文章的标题&quot; data-url=&quot;请替换成文章的网址&quot;&gt;&lt;/div&gt;</code>替换为<code>&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%- config.root %&gt;&lt;%- item.path%&gt;&quot; data-title=&quot;&lt;%- item.title %&gt;&quot; data-url=&quot;&lt;%- item.permalink %&gt;&quot;&gt;&lt;/div&gt;</code></p>
</li>
<li><p>在<code>hexo\_config.yml</code>中添加多说的配置：</p>
<p> duoshuo_shortname: 你站点的short_name(通用代码中可查看)</p>
</li>
</ol>
<h3 id="页面导航">页面导航</h3><p>在<code>themes\themename\layout\_partial\comment.ejs</code>文件中，加入一段代码，如下：</p>
<pre><code><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span> ( page.comments){ </span>%&gt;<span class="xml">

 <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">id</span>=<span class="value">"pagination"</span> &gt;</span>
    </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (page.prev) { </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value"></span></span></span>&lt;%-<span class="ruby"> page.prev.path </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">class</span>=<span class="value">"alignleft prev"</span> &gt;</span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'prev'</span>) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml">
    </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (page.<span class="keyword">next</span>) { </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value"></span></span></span>&lt;%-<span class="ruby"> page.<span class="keyword">next</span>.path </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">class</span>=<span class="value">"alignright next"</span> &gt;</span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'next'</span>) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">nav</span>&gt;</span>

<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span></span>
</code></pre><p>light主题默认显示为“上一页”“下一页”，若想更改显示的文字，在<code>hexo\themes\light\languages</code>中你选择的语言包内修改：</p>
<pre><code><span class="attribute">prev</span>: <span class="string">上一篇</span>
<span class="attribute">next</span>: <span class="string">下一篇</span>
</code></pre><h3 id="百度分享">百度分享</h3><p>到<a href="http://share.baidu.com/" target="_blank" rel="external">百度分享</a>获得代码，在<code>themes/themename/layout/_partial/article.ejs</code>中，将<code>&lt;%-partial(&#39;post/share&#39;)%&gt;</code>删掉，替换为百度分享的代码。</p>
<h3 id="添加网站图标">添加网站图标</h3><p>在<code>themes/themename/layout/_partial/head.ejs</code>里将<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.png&quot; rel=&quot;icon&quot;&gt;</code>替换为<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-ico&quot;&gt;</code>。将<code>favicon.ico</code>图标文件放在<code>hexo\source</code>目录下。<br>制作图标的网站：<a href="http://www.faviconer.com" target="_blank" rel="external">faviconer</a>。</p>
<h3 id="添加分类、标签云">添加分类、标签云</h3><p>在<code>themes/themename/_config.yml</code>中，添加如下：</p>
<pre><code>widgets:
-<span class="ruby"> category
</span>-<span class="ruby"> tagcloud</span>
</code></pre><h3 id="添加友情链接">添加友情链接</h3><p>在<code>themes/themename/layout/_widget</code>中新建名为<code>blogroll.ejs</code>的文件，编辑内容如下：</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"widget tag"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h3</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"entry"</span>&gt;</span> #以下为添加友情链接时要修改的地方
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"网站地址"</span> <span class="attribute">title</span>=<span class="value">"网站名"</span>&gt;</span>你想显示的名字<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>每次更改友链时编辑<code>&lt;ul&gt;&lt;/ul&gt;</code>之间的内容即可，其中<code>&lt;li&gt;&lt;a href=&quot;网站地址&quot; title=&quot;网站名&quot;&gt;你想显示的名字&lt;/a&gt;&lt;/li&gt;</code>为添加友情链接的格式，如</p>
<pre><code><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://codingbubble.github.io/"</span> <span class="attribute">title</span>=<span class="value">"bubble sky"</span>&gt;</span>bubble's blog<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</code></pre><p>一个链接一行。<br>然后在<code>themes/themename/_config.yml</code>中，添加如下：</p>
<pre><code>widgets:
<span class="bullet">- </span>blogroll
</code></pre><h3 id="添加统计">添加统计</h3><p><a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>，<a href="http://www.google.com/analytics/" target="_blank" rel="external">谷歌统计</a><br>以百度统计、modernist主题为例，介绍如何添加。<br>编辑文件<code>hexo\themes\modernist\_config.yml</code>，增加配置选项：</p>
<pre><code><span class="string">baidu_tongji:</span> <span class="literal">true</span>
</code></pre><p>新建文件<code>hexo\themes\modernist\layout\_partial\baidu_tongji.ejs</code>，内容如下：</p>
<pre><code><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span> (theme.baidu_tongji){ </span>%&gt;<span class="xml">
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="vala">
<span class="preprocessor">#你的百度统计代码</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>注册并登录百度统计获取你的统计代码。</p>
<p>编辑文件<code>hexo\themes\modernist\layout\_partial\head.ejs</code>，在<code>/head</code>之前增加：</p>
<pre><code>&lt;<span class="preprocessor">%</span>- partial<span class="comment">('baidu_tongji')</span> <span class="preprocessor">%</span>&gt;
</code></pre><p>重新生成并部署你的站点。</p>
<h3 id="自定义挂件">自定义挂件</h3><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在<code>hexo\themes\modernist\layout\_widget\</code>下，新建自己的ejs文件，如<code>myWidget.ejs</code>，然后在配置文件<code>hexo\themes\modernist\_config.yml</code>中配置。</p>
<pre><code><span class="label">widgets:</span>
  - myWidget
</code></pre><p>用上述方法可以添加新浪微博小挂件。</p>
<ul>
<li>生成自己的<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">微博组件</a>。</li>
<li>新建<code>hexo\themes\themename\layout\_widget\weibo.ejs</code>文件。</li>
<li><p>配置<code>hexo\themes\themename\_config.yml</code>：</p>
<pre><code>widgets:
<span class="bullet">- </span>weibo
</code></pre></li>
</ul>
<h3 id="导航栏添加“About”">导航栏添加“About”</h3><p>执行命令：</p>
<pre><code>hexo <span class="keyword">new</span> page <span class="string">"About"</span>
</code></pre><ol>
<li>到<code>source\About\index.md</code>编辑内容。</li>
<li><p>在<code>themes\light\_config.yml</code>中，添加如下：</p>
<pre><code><span class="attribute">menu</span>:
  <span class="attribute">About</span>: /about
</code></pre></li>
</ol>
<p>上述步骤，也可以手工生成，在<code>hexo\source\</code>下手工新建<code>About</code>和<code>index.md</code>也是完全等价的。</p>
<h3 id="添加fork_me_on_github">添加<code>fork me on github</code></h3><p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">github官方教程</a>，把代码插入到任意一个全局的模板文件中就行，比如layout.ejs的末尾。</p>
<h3 id="添加RSS">添加RSS</h3><p>hexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：</p>
<ol>
<li>安装RSS插件到本地：<code>npm install hexo-generator-feed</code></li>
<li><p>开启RSS功能：编辑<code>hexo/_config.yml</code>，添加如下代码：</p>
<pre><code>plugins:
<span class="bullet">- </span>hexo-generator-feed
</code></pre></li>
<li>在站点添加链接：<br>在<code>themes\light\_config.yml</code>中，编辑 <code>rss: /atom.xml</code><br>在<code>themes\light\layout\_partial\header.ejs</code>中，<code>&lt;ul&gt;</code> <code>&lt;/ul&gt;</code>之间，添加一行代码<code>&lt;li&gt; &lt;a href=&quot;/atom.xml&quot;&gt;RSS&lt;/a&gt; &lt;/li&gt;</code><br>启动服务器，用浏览器打开<code>http://localhost:4000/atom.xml</code>，就可以看到RSS已经生效了。</li>
</ol>
<h3 id="添加sitemap">添加sitemap</h3><ol>
<li>安装sitemap到本地：<code>npm install hexo-generator-sitemap</code></li>
<li><p>开启sitemap功能：编辑<code>hexo/_config.yml</code>，添加如下代码：</p>
<pre><code>plugins:
<span class="bullet">- </span>hexo-generator-sitemap
</code></pre></li>
</ol>
<p>不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。<br>启动服务器，用浏览器打开<code>http://localhost:4000/sitemap.xml</code>，就可以看到sitemap已经生效了。</p>
<h3 id="添加站内搜索">添加站内搜索</h3><ul>
<li><p>百度搜索<br>Hexo默认使用Google搜索，可设置为百度搜索。<br>打开<code>themes/themename/layout/_widget/search.ejs</code>文件，里面内容替换为：</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"search"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"//baidu.com/baidu"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"search"</span> <span class="attribute">name</span>=<span class="value">"word"</span> <span class="attribute">results</span>=<span class="value">"0"</span> <span class="attribute">placeholder</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'search'</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"si"</span> <span class="attribute">value</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.url.replace(<span class="regexp">/^https?:\/\//</span>, <span class="string">''</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">tn</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">value</span>=<span class="value">"bds"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">cl</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">value</span>=<span class="value">"3"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">ct</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">value</span>=<span class="value">"2097152"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">s</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">value</span>=<span class="value">"on"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span>
</code></pre></li>
<li>Swiftype搜索</li>
</ul>
<ol>
<li>去<a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>注册</li>
<li><code>CREATE SEARCH ENGINE</code>创建一个站内搜索</li>
<li>填上相应的信息后，Swiftype就开始抓取了</li>
<li>点<code>INSTALL</code>安装，根据自己的喜好设置。</li>
<li>选择左侧的<code>SWIFTYPE INSTALL CODE</code>，复制生成的代码，覆盖<code>themes/themename/layout/_widget/search.ejs</code>文件即可。</li>
</ol>
<h3 id="添加返回顶部按钮">添加返回顶部按钮</h3><ol>
<li><p>添加html代码<br>在<code>/themes/themename/layout/_partial</code>文件夹新建文件<code>totop.ejs</code>，并向其中加入如下代码：</p>
 <div id="totop" style="position:fixed;bottom:150px;right:50px;cursor: pointer;"><br> <a title="返回顶部"><img src="/img/scrollup.png"></a><br> </div></li>
<li><p>添加js代码<br>在<code>/themes/themename/source/js</code>文件夹新建文件<code>totop.js</code>，将如下代码复制其中：</p>
<pre><code><span class="list">(<span class="keyword">function</span><span class="list">($)</span> <span class="collection">{
    // When to show the scroll link
    // higher number = scroll link appears further down the page
    var upperLimit = <span class="number">1000</span><span class="comment">;</span>

    // Our scroll link element
    var scrollElem = $<span class="list">(<span class="keyword">'#totop'</span>)</span><span class="comment">;</span>

    // Scroll to top speed
    var scrollSpeed = <span class="number">500</span><span class="comment">;</span>

    // Show and hide the scroll to top link based on scroll position
    scrollElem.hide<span class="list">()</span><span class="comment">;</span>
    $<span class="list">(<span class="keyword">window</span>)</span>.scroll<span class="list">(<span class="keyword">function</span> <span class="list">()</span> <span class="collection">{
        var scrollTop = $<span class="list">(<span class="keyword">document</span>)</span>.scrollTop<span class="list">()</span><span class="comment">;</span>
        if <span class="list">( scrollTop &gt; upperLimit )</span> <span class="collection">{
            $<span class="list">(<span class="keyword">scrollElem</span>)</span>.stop<span class="list">()</span>.fadeTo<span class="list">(<span class="number">300</span>, <span class="number">1</span>)</span><span class="comment">; // fade back in</span>
        }</span>else<span class="collection">{
            $<span class="list">(<span class="keyword">scrollElem</span>)</span>.stop<span class="list">()</span>.fadeTo<span class="list">(<span class="number">300</span>, <span class="number">0</span>)</span><span class="comment">; // fade out</span>
        }</span>
    }</span>)</span><span class="comment">;</span>

    // Scroll to top animation on click
    $<span class="list">(<span class="keyword">scrollElem</span>)</span>.click<span class="list">(<span class="keyword">function</span><span class="list">()</span><span class="collection">{
        $<span class="list">(<span class="keyword">'html</span>, body')</span>.animate<span class="list">(<span class="collection">{scrollTop:0}</span>, scrollSpeed)</span><span class="comment">; return false;</span>
    }</span>)</span><span class="comment">;</span>
}</span>)</span><span class="list">(<span class="keyword">jQuery</span>)</span><span class="comment">;</span>
</code></pre><p>可以对upperLimit和scrollSpeed参数进行修改，控制显示位置和回滚速度。</p>
</li>
<li><p>添加文件引用<br>在文件<code>/themes/themename/layout/_partial/after_footer.ejs</code>末尾添加以下两行代码：</p>
<pre><code><span class="xml"></span>&lt;%-<span class="ruby"> partial(<span class="string">'totop'</span>) </span>%&gt;<span class="xml">
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value">js/totop.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
</code></pre></li>
<li>添加按钮图片<br>将图片<img src="http://ww3.sinaimg.cn/large/0067jhJ4gw1erz8cbug7wj301e01e3y9.jpg" alt="">复制到<code>\themes\themename\source\img</code>目录下，文件名为<code>scrollup.png</code>，页面足够长时，就看到按钮出现了。</li>
</ol>
<h3 id="添加文章目录">添加文章目录</h3><ol>
<li><p>修改主题的ejs文件<br>我们首先要编辑文章显示页面的模板，也就是<code>themes/themename/layout/_partial/article.ejs</code>文件。为了将目录生成在正文之前，我们首先在这个文件中找到<code>&lt;%- post.content %&gt;</code>类似代码，并在这一行之前加入如下代码：</p>
<pre><code><span class="xml"><span class="comment">&lt;!-- Table of Contents --&gt;</span>
</span>&lt;%<span class="ruby"> <span class="keyword">if</span> (!index &amp;&amp; post.toc){ </span>%&gt;<span class="xml">
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"toc"</span> <span class="attribute">class</span>=<span class="value">"toc-article"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">strong</span> <span class="attribute">class</span>=<span class="value">"toc-title"</span>&gt;</span>文章目录<span class="tag">&lt;/<span class="title">strong</span>&gt;</span>
    </span>&lt;%-<span class="ruby"> toc(post.content) </span>%&gt;<span class="xml">
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>if语句中有两个条件，!index是为了不在首页的文章摘要中生成目录，post.toc确保了只在显式地标记了toc: true的文章中生成目录。若这两个条件满足，则创建一个目录的<code>&lt;div&gt;</code>。</p>
</li>
<li><p>为目录编写CSS文件<br>要指定目录的样式，修改文件<code>themes/themename/source/css/_partial/article.styl</code>。在文件的最后，添加如下代码：</p>
<pre><code><span class="comment">/*toc*/</span>
<span class="class">.toc-article</span>
  <span class="attribute">background</span> <span class="hexcolor">#eee</span>
  <span class="attribute">border</span> <span class="number">1px</span> solid <span class="hexcolor">#bbb</span>
  <span class="attribute">border-radius</span> <span class="number">10px</span>
  <span class="attribute">margin</span> <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0.3em</span> <span class="number">1.5em</span>
  <span class="attribute">padding</span> <span class="number">1.2em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">1em</span>
  <span class="attribute">max-width</span> <span class="number">28%</span>
<span class="class">.toc-title</span>
  <span class="attribute">font-size</span> <span class="number">120%</span>
<span class="id">#toc</span>
  <span class="attribute">line-height</span> <span class="number">1em</span>
  <span class="attribute">font-size</span> <span class="number">0.9em</span>
  <span class="attribute">float</span> <span class="attribute">right</span>
  <span class="class">.toc</span>
    <span class="attribute">padding</span> <span class="number">0</span>
    <span class="attribute">margin</span> <span class="number">1em</span>
    <span class="attribute">line-height</span> <span class="number">1.8em</span>
    <span class="tag">li</span>
      <span class="attribute">list-style-type</span> <span class="attribute">none</span>
  <span class="class">.toc-child</span> 
    <span class="attribute">margin-left</span> <span class="number">1em</span>
</code></pre></li>
</ol>
<ul>
<li>第一段的<code>toc-article</code>指定了目录整个<code>&lt;div&gt;</code>的背景色、边框色、倒角半径、各种间距以及最大的宽度。注意这里最好指定目录的最大宽度，我将其设为了28%，也就是文章正文那个框的宽度的28%，也可以设为一个固定的长度，比如在笔记本电脑上16em就是个不错的宽度，但为了能适配各种不同尺寸的屏幕，最好还是设置为百分比。如果不指定最大宽度，遇到比较长的标题时，生成的目录会非常难看。这个最大宽度的设置是我在网上其他添加目录的方法中没有见到的。</li>
<li>第二段的<code>toc-title</code>指的就是<code>文章目录</code>那四个字，这四个字要比其他字大一些，将其字号设为其他字的120%。</li>
<li>第三段的<code>#toc.toc</code>指定了目录列表的一些细节，将font-size设为0.9em会让目录的字比文章的字稍小一些。最后的<code>.toc-child</code>指定了二级目录的缩进量。</li>
</ul>
<p>再次生成页面，应该已经可以显示比较美观的目录了。<br>此后，只需在你想要显示目录的文章.md开头加上<code>toc: true</code>即可。</p>
<h3 id="添加支付宝捐助按钮">添加支付宝捐助按钮</h3><p>代码：</p>
<pre><code>&lt;form <span class="variable">action=</span><span class="string">"https://shenghuo.alipay.com/send/payment/fill.htm"</span> <span class="variable">method=</span><span class="string">"POST"</span> <span class="variable">target=</span><span class="string">"_blank"</span> <span class="variable">accept-charset=</span><span class="string">"GBK"</span>&gt;
    &lt;input <span class="variable">name=</span><span class="string">"optEmail"</span> <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">value=</span><span class="string">"***@email.com"</span> /&gt;    //你的邮箱帐号
    &lt;input <span class="variable">name=</span><span class="string">"payAmount"</span> <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">value=</span><span class="string">"1"</span> /&gt;     //默认捐助金额
    &lt;input <span class="variable">id=</span><span class="string">"title"</span> <span class="variable">name=</span><span class="string">"title"</span> <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">value=</span><span class="string">"捐赠bubble's blog"</span> /&gt;    //付款说明
    &lt;input <span class="variable">name=</span><span class="string">"memo"</span> <span class="variable">type=</span><span class="string">"hidden"</span> <span class="variable">value=</span><span class="string">"来源：个性化你的Hexo"</span> /&gt;    //备注
    &lt;input <span class="variable">name=</span><span class="string">"pay"</span> <span class="variable">type=</span><span class="string">"image"</span> <span class="variable">value=</span><span class="string">"转账"</span> <span class="variable">src=</span><span class="string">"https://img.alipay.com/sys/personalprod/style/mc/btn-index.png"</span> /&gt;    //设置按钮图标
&lt;/form&gt;
</code></pre><h3 id="添加FlagCounter">添加FlagCounter</h3><p><a href="http://www.flagcounter.com/" target="_blank" rel="external">FlagCounter</a>是来自美国的一个免费流量统计工具，和传统的免费统计工具不同，Flagcounter可记录网站访问者所在的国家，用国旗表示，可统计到访国家的数量，并带有简单的统计分析功能。代码仅仅是一段简短的Html图片超链接代码，非JavaScript代码，适合于支持HTML代码的网站或博客。</p>
<h3 id="图床">图床</h3><p>我看大部分都用的<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛</a>，我也用七牛吧<br>注册以后，新建空间，选择<strong>公开空间</strong>，上传图片后即可获得外链。</p>
<h1 id="速度优化">速度优化</h1><p>由于 Google 被大陆屏蔽，Github 从大陆访问也比较慢，且不太稳定。所以一方面可以把 Blog 迁移到国内，比如Gitcafe提供的免费Page服务，又快又好用，可以参考<a href="http://zipperary.com/2013/11/23/hexo-to-gitcafe/" target="_blank" rel="external">托管博客到gitcafe</a>。</p>
<ol>
<li>把 google 提供的<code>jquery</code>和<code>fonts api</code>全换掉。由于不同的主题其位置不同，最好是搜索一下。<br>Unix/Linux 用户在 shell 中切换到自己的主题目录下面；Windows 用户用 Git Bash 切换到主题目录下面。然后用<code>grep &#39;jquery&#39; -r ./</code>搜索使用 jquery 的位置，如果是用的 google 的，则替换成国内的相应版本，我用的是百度，<code>//libs.baidu.com/jquery/2.0.3/jquery.min.js</code>，<code>//libs.baidu.com/jquery/1.8.0/jquery.min.js</code>。</li>
<li>替换google fonts，同样的方法，<code>grep &#39;fonts&#39; -r ./</code>，找到后替换为<code>//fonts.useso.com/css?family=Lato:400,400italic</code>即可。</li>
</ol>
<h1 id="更新记录">更新记录</h1><p>2015.05.23</p>
<ul>
<li>添加支付宝捐助按钮</li>
<li>添加FlagCounter<br>2015.05.24</li>
<li>图床</li>
</ul>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="http://zipperary.com/2013/05/29/hexo-guide-3/" target="_blank" rel="external">hexo系列教程：（三）hexo博客的配置、使用</a></li>
<li><a href="http://zipperary.com/2013/05/30/hexo-guide-4/" target="_blank" rel="external">hexo系列教程：（四）hexo博客的优化技巧</a></li>
<li><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">hexo系列教程：（五）hexo博客的优化技巧续</a></li>
<li><a href="http://www.winterland.me/2013/11/hexo-scroll2top/" target="_blank" rel="external">为hexo添加scroll to top功能</a></li>
<li><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank" rel="external">使用hexo搭建博客</a></li>
<li><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">Hexo在github上构建免费的Web应用</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
<li><a href="http://ijiaober.github.io/2014/08/07/hexo/hexo-09/" target="_blank" rel="external">Hexo使用攻略：（九）为Hexo添加百度搜索</a></li>
<li><a href="http://erona.me/2015/02/11/%E4%B8%BALight%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Swiftype%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">为Light主题添加Swiftype搜索</a></li>
<li><a href="http://www.yehbeats.com/2015/04/06/hexo-topmenu/" target="_blank" rel="external">Hexo，添加返回顶部按钮</a></li>
<li><a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/" target="_blank" rel="external">为Hexo博客添加目录</a></li>
<li><a href="http://kuangqi.me/tricks/open-macdown-when-add-a-new-post/" target="_blank" rel="external">在为Hexo博客添加文章时自动打开编辑器</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/1007" target="_blank" rel="external">Open markdown file after running hexo new?</a></li>
<li><a href="http://xintao.us/?post=179" target="_blank" rel="external">为网站页面添加“支付宝捐助按钮”代码</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>注意：<br>1.修改配置文件时注意<code>YAML语法</code>，参数<code>冒号:</code>后一定要留<code>空格</code><br>2.若出现中文乱码请修改文件编码格式为<code>UTF-8</code></p>
<h1 id="hexo目录介]]>
    </summary>
    
      <category term="Hexo" scheme="http://codingbubble.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitHub+Hexo搭建个人博客-笔记]]></title>
    <link href="http://codingbubble.github.io/2015/05/07/Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://codingbubble.github.io/2015/05/07/Github-Hexo搭建个人博客/</id>
    <published>2015-05-07T15:30:17.000Z</published>
    <updated>2015-05-26T14:19:10.684Z</updated>
    <content type="html"><![CDATA[<p>刚入驻GitHub的菜鸟一枚，第一篇博文就用来做搭建博客的笔记吧~</p>
<p>本文针对<code>windows</code>平台和<code>Hexo 3.x</code></p>
<h1 id="环境准备，搭建本地博客">环境准备，搭建本地博客</h1><h2 id="安装Node-js">安装Node.js</h2><p><a href="https://nodejs.org/download/" target="_blank" rel="external">Node.js官网下载</a></p>
<h2 id="安装Git">安装Git</h2><p><a href="http://git-scm.com/downloads" target="_blank" rel="external">Git官网下载</a></p>
<ol>
<li>cmd下使用Git命令<br> 配置系统环境变量Path，添加如下2个路径，路径之间用英文分号”;”隔开<ul>
<li>git安装路径中bin的位置，如：<code>D:\Program Files\Git\bin</code></li>
<li>git安装路径中git-core的位置，如：<code>D:\Program Files\Git\libexec\git-core</code></li>
</ul>
</li>
<li>Git Bash下使用Git命令(本文使用此方法)<ul>
<li>双击桌面上的”Git Bash”</li>
<li>在桌面或文件夹任意空白处点击鼠标右键，选择”Git Bash”</li>
</ul>
</li>
</ol>
<h2 id="安装Hexo，搭建本地博客">安装Hexo，搭建本地博客</h2><p>打开Git Bash，执行如下命令</p>
<pre><code>npm <span class="keyword">install</span> -g hexo
</code></pre><ol>
<li><p>创建hexo文件夹<br>安装完成后，根据自己的喜好建立hexo目录（如H:\hexo），在此目录空白处右键打开Git Bash执行以下命令，Hexo即会自动在此目录建立网站所需要的所有文件。</p>
<pre><code><span class="title">hexo</span> init
</code></pre></li>
<li>安装依赖包<pre><code>npm <span class="keyword">install</span>
</code></pre></li>
<li><p>本地查看<br>现在我们已经搭建起本地的hexo博客了，在hexo目录执行以下命令</p>
<pre><code>hexo generate
hexo <span class="keyword">server</span>
</code></pre><p>然后到浏览器输入<code>localhost:4000</code>查看博客。</p>
</li>
</ol>
<h1 id="配置SSH_keys">配置SSH keys</h1><p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">官方教程</a></p>
<ol>
<li>检查SSH keys的设置<pre><code>$ <span class="built_in">cd</span> ~/.ssh
</code></pre>如果显示<code>No such file or directory</code>说明你是第一次使用git，跳到第3步，否则继续。</li>
<li><p>备份和移除原来的SSH Key设置<br>因为已经存在key文件，所以需要备份旧的数据并删除：</p>
<pre><code><span class="variable">$ </span>ls
config  id_rsa  id_rsa.pub  known_hosts
<span class="variable">$ </span>mkdir key_backup
<span class="variable">$ </span>cp id_rsa* key_backup
<span class="variable">$ </span>rm id_rsa*
</code></pre></li>
<li><p>生成新的SSH Key<br>执行如下命令，邮箱地址为自己的邮箱地址（经常使用的，不一定是github的），需要输入文件名的时候，回车即可。</p>
<pre><code>$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span>
Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.
Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;
</code></pre><p>系统提示你输入加密串，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>注意：输入密码的时候没有*星号的，直接输入就可以了。</p>
<pre><code>Enter passphrase (empty <span class="keyword">for</span> no passphrase):<span class="variable">&lt;输入加密串&gt;</span>
Enter same passphrase again:<span class="variable">&lt;再次输入加密串&gt;</span>
</code></pre><p>最后看到这样的界面，SSH Key就设置成功了。<br><img src="http://ww4.sinaimg.cn/large/6b52694dgw1erw5pja0wpj20f70843zu.jpg" alt=""></p>
</li>
<li>添加SSH Key到GitHub<br>在本机设置SSH Key之后，需要添加到GitHub上。<br>用文本编辑工具打开<code>id_rsa.pub</code>文件（路径在第3步里<code>Enter file in which to save the key</code>可以查看），如果看不到这个文件，你需要设置显示隐藏文件(若找不到，可用文件搜索功能搜索)。<br>在GitHub的主页右上角上点击设置按钮，选择<code>SSH Keys</code>项，把<code>id_rsa.pub</code>文件的内容复制进去，点击<code>Add Key</code>按钮即可。</li>
<li><p>测试<br>执行如下命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p>
<pre><code><span class="variable">$ </span>ssh -<span class="constant">T </span>git<span class="variable">@github</span>.com
</code></pre><p>如果出现如下提示</p>
<pre><code>The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span>
RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span>
Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?
</code></pre><p>输入yes，然后会看到</p>
<pre><code>Hi cnfeat! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.
</code></pre><p>现在你已经可以通过SSH链接到GitHub了。</p>
</li>
<li><p>设置用户信息<br>Git会根据用户名和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，执行如下命令设置个人信息，把<code>username</code>和<code>邮箱</code>替换成你的用户名和邮箱。</p>
<pre><code>$ git config --global user<span class="class">.name</span> <span class="string">"username"</span>
$ git config --global user<span class="class">.email</span> <span class="string">"your_email@youremail.com"</span>
</code></pre><p>SSH Key配置成功，本机已成功连接到GitHub。</p>
</li>
</ol>
<h1 id="部署到GitHub">部署到GitHub</h1><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如username.github.io这样的可访问的站，每个用户名下面只能建立一个。</p>
<ol>
<li>创建repository<br>在自己GitHub主页右下角，创建一个新的repository，名为<code>username.github.io</code>，其中username替换为你的GitHub用户名<br><img src="http://ww4.sinaimg.cn/large/6b52694dgw1erw4iiu31hj208z03lmxh.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/6b52694dgw1erw4iu112xj20a901wt8u.jpg" alt=""></li>
<li>生成pages<br>创建好repository后，点击repository右侧的<code>Settings</code>，下拉，点击<code>Automatic page generator</code><br><img src="http://ww4.sinaimg.cn/large/6b52694dgw1erw4l8hhy0j20jn04z75b.jpg" alt=""><br>点击<img src="http://ww4.sinaimg.cn/large/96e8f43agw1erx03f4170j204100y3yc.jpg" alt=""><br>选择合适的主题，点击<img src="http://ww1.sinaimg.cn/large/6b52694dgw1erw4o1fm0aj202z00vt8i.jpg" alt=""><br>好了，在浏览器打开你的”username.github.io”，页面已生成。</li>
<li><p>配置<code>hexo\_config.yml</code>文件<br>打开<code>hexo\_config.yml</code>文件，底部编辑</p>
<pre><code><span class="attribute">deploy</span>:
    <span class="attribute">type</span>: git
    <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.com.git
    <span class="attribute">branch</span>: master
</code></pre><p>其中username替换为你的GitHub用户名。<br>Git Bash执行以下命令即可完成部署，注意部署会覆盖掉你之前在版本库中存放的文件。</p>
<pre><code><span class="title">hexo</span> clean
hexo generate
hexo deploy
</code></pre><p>此时，在博客的根目录下会生成一个文件夹：<code>.deploy</code>。<br>或可加入<code>—generate</code>选项，在部署前自动生成文件。</p>
<pre><code>hexo deploy <span class="comment">--generate</span>
</code></pre><p>简写：</p>
<pre><code>hexo <span class="keyword">d</span> --<span class="keyword">g</span>
</code></pre><p>其原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。<br>至此，我们的博客已经完全搭建起来了，在浏览器访问username.github.io就能看到你的成就了！</p>
</li>
</ol>
<blockquote>
<p>记住：每次修改本地文件后，需要hexo generate才能保存。每次使用命令时，都要在H:\hexo目录下。</p>
</blockquote>
<h1 id="Tips">Tips</h1><ol>
<li>若右键菜单中没有<code>git bash</code>选项，可以进入开始菜单找到git bash，然后通过cd进入相应目录执行命令。</li>
<li>在github部署完成之后，马上访问可能出现<code>404错误</code>，这是正常的，（最多）等待十分钟左右就可以访问了。如果还不行，那很可能是你没有验证Github发给你的邮件。</li>
<li>如果在hexo d之后出现<code>fatal: &#39;username.github.io&#39; does not appear to be a git repository</code>，一是检查 repo 的名字是否合乎规范、是否含有大写字母、config.yml 中的 deploy 配置是否正确，二是把 git bash 关掉，重新打开再执行命令。</li>
<li>在要求输入密码时，你输入之后密码是不显示的，这是为了安全，并非是你没输上。</li>
<li>出现乱码的，推荐使用 sublime text或者Notepad++编辑文件，记住将文件编码转为<code>UTF-8</code>。</li>
<li>安装 hexo 时卡在那儿不动，很可能是网络不给力，能全局 break wall 就好了。</li>
<li>遇到什么其他的问题，不妨删除<code>.deploy</code>和<code>db.json</code>再重新生成试一试。</li>
<li>有的时候当你修改页面或更改配置后发现并没有立即生效，可以执行<code>hexo clean</code>然后再启动<code>hexo server</code>。</li>
<li><code>hexo deploy</code>时，有时会出现这个提示信息<code>warning: LF will be replaced by CRLF</code>，虽然看起来挺乱糟糟的，但不影响使用，可以忽略不计。若想不提示，可以使用如下方法：<ul>
<li>切换到博客的根目录，执行如下命令：<code>git config --global core.autocrlf false</code></li>
<li>删除掉该目录下的<code>.git</code>文件夹（可能是隐藏的），命令：<code>rm -rf .git</code></li>
<li>重新<code>git init</code> <code>hexo deploy</code>即可~</li>
</ul>
</li>
<li><code>hexo deploy</code>没反应，主要问题出在config.yml的deploy配置上。注意缩进，同时注意冒号后面要有一个空格。</li>
<li><code>hexo update -g</code>升级错误，hexo命令失效，可执行<code>npm install -g hexo</code>重新安装一遍hexo，效果跟升级一样。</li>
<li>搜索框进行搜索：没有结果。点击搜索后进入的google页面，搜索框里面若显示<code>site:yoursite.com</code>，这说明有个地方没有设置，打开hexo目录下的config文件，填写URL。</li>
<li>代码块中不显示行号，使用四个空格的方式标志代码块的确没行号，需要行号的要使用反引号的方式。</li>
</ol>
<h1 id="开启你的hexo旅程">开启你的hexo旅程</h1><h2 id="命令">命令</h2><h3 id="常用命令">常用命令</h3><pre><code>hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="preprocessor">#新建文章</span>
hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="preprocessor">#新建页面</span>
hexo generate <span class="preprocessor">#生成静态页面至public目录</span>
hexo <span class="keyword">server</span> <span class="preprocessor">#开启本地预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo deploy <span class="preprocessor">#将.deploy目录部署到GitHub</span>
</code></pre><h3 id="常用复合命令">常用复合命令</h3><pre><code>hexo deploy -<span class="keyword">g</span>
hexo server -<span class="keyword">g</span>
</code></pre><h3 id="简写">简写</h3><pre><code>hexo <span class="variable">n =</span>= hexo new
hexo <span class="variable">g =</span>= hexo generate
hexo <span class="variable">s =</span>= hexo server
hexo <span class="variable">d =</span>= hexo deploy
</code></pre><h2 id="发表文章">发表文章</h2><p>在Git Bash中执行如下命令</p>
<pre><code><span class="title">hexo</span> n <span class="string">"文章标题"</span>
</code></pre><p>在<code>\hexo\source\_posts</code>中打开同名文件，编辑开头。</p>
<pre><code><span class="label">title:</span> 文章标题 <span class="preprocessor">#自定义</span>
<span class="label">date:</span> <span class="number">2015</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">07</span>:<span class="number">56</span>:<span class="number">29</span> <span class="preprocessor">#发表日期，一般不改动</span>
<span class="label">categories:</span> hexo <span class="preprocessor">#文章分类</span>
<span class="label">tags:</span> [tag1,tag2] <span class="preprocessor">#文章标签，多于一项时用这种格式</span>
---
<span class="preprocessor">#这里开始使用markdown格式输入你的正文。</span>
</code></pre><p>多个tag也可以这样写：</p>
<pre><code>tags:
-<span class="ruby"> tag1
</span>-<span class="ruby"> tag2</span>
</code></pre><h2 id="文章摘要">文章摘要</h2><p>在需要显示摘要的地方添加如下代码即可：</p>
<pre><code>#摘要
<span class="comment">&lt;!--more--&gt;</span>
#余下全文
</code></pre><p>more以上的部分会已摘要的形式显示，more以下内容查看全文时才显示。也可以在md文件中定义description。</p>
<h2 id="文章中插入图片">文章中插入图片</h2><p>使用markdown写文章，插入图片的格式为<code>![图片名称](链接地址)</code>。<br>这里的链接地址，对于hexo，有两种方式：</p>
<ul>
<li>使用本地路径：在<code>hexo/source</code>目录下新建一个<code>img</code>文件夹，将图片放入该文件夹下，插入图片时链接即为<code>\img\图片名称</code>。</li>
<li>使用图床，获取外链地址。比如<a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="external">微博图床</a>，将图片拖入区域中，会生成图片的URL，这就是链接地址。</li>
</ul>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="http://beiyuu.com/github-pages/" target="_blank" rel="external">使用Github Pages建独立博客</a></li>
<li><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">hexo系列教程：（二）搭建hexo博客</a></li>
<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank" rel="external">使用hexo搭建博客</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚入驻GitHub的菜鸟一枚，第一篇博文就用来做搭建博客的笔记吧~</p>
<p>本文针对<code>windows</code>平台和<code>Hexo 3.x</code></p>
<h1 id="环境准备，搭建本地博客">环境准备，搭建本地博客</h1><h2 id]]>
    </summary>
    
      <category term="Hexo" scheme="http://codingbubble.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://codingbubble.github.io/2015/05/05/hello-world/"/>
    <id>http://codingbubble.github.io/2015/05/05/hello-world/</id>
    <published>2015-05-05T14:38:18.000Z</published>
    <updated>2015-05-22T07:47:25.886Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>